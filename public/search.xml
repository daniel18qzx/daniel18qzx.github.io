<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网格搜寻]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%2F2828%2F</url>
    <content type="text"><![CDATA[数据集载入1234567891011121314151617181920212223242526272829303132333435# -*- coding: utf-8 -*-import pandas as pdimport numpy as npfrom matplotlib import pyplot as pltimport seaborn as snsimport warningsfrom sklearn.preprocessing import minmax_scalefrom sklearn.preprocessing import LabelEncoderfrom sklearn.preprocessing import Imputerfrom sklearn.model_selection import train_test_splitwarnings.filterwarnings('ignore')df = pd.read_csv(u"2019-08-01_金融数据描述_data1.csv",encoding = 'gbk')# 删除无用delete = ['Unnamed: 0', 'custid', 'trade_no', 'bank_card_no','id_name','latest_query_time','source','loans_latest_time','first_transaction_time', 'student_feature']df = df.drop(delete,axis=1)# 处理分类型特征df['reg_preference_for_trad'] = LabelEncoder().fit_transform(df['reg_preference_for_trad'].astype(str))# 使用众数填充for i in range(df.shape[1]): feature = df.iloc[:,i].values.reshape(-1,1) imp_mode = Imputer(strategy='most_frequent') df.iloc[:,i] = imp_mode.fit_transform(feature)# 数据划分X = df[:].drop("status",axis=1)y = df["status"]X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle = False)# 数据归一化X_train = minmax_scale(X_train)X_test = minmax_scale(X_test) Simple Grid Search（使用Holdout验证）交叉验证的目的是为了让模型评估更加准确可信。 缺点： 最终的表现好坏与初始数据的划分结果有很大的关系，为了处理这种情况，可以采用交叉验证的方式来减少偶然性 12345678910111213141516171819from sklearn.svm import SVCfrom sklearn.model_selection import train_test_splitprint("Size of training set:&#123;&#125; size of testing set:&#123;&#125;".format(X_train.shape[0],X_test.shape[0]))#### grid search startbest_score = 0for gamma in [0.001,0.01,0.1,1,10,100]: for C in [0.001,0.01,0.1,1,10,100]: svm = SVC(gamma=gamma,C=C) #对于每种参数可能的组合，进行一次训练； svm.fit(X_train,y_train) score = svm.score(X_test,y_test) if score &gt; best_score: #找到表现最好的参数 best_score = score best_parameters = &#123;'gamma':gamma,'C':C&#125;### grid search endprint("Best score:&#123;:.2f&#125;".format(best_score))print("Best parameters:&#123;&#125;".format(best_parameters)) Size of training set:3803 size of testing set:951 Best score:0.78 Best parameters:{&#39;gamma&#39;: 0.1, &#39;C&#39;: 10} 原始数据集划分成训练集和测试集以后，其中测试集除了用作调整参数，也用来测量模型的好坏；这样做导致最终的评分结果比实际效果要好，错估模型的泛化能力。 解决方法是可以对训练集再进行一次划分，分成训练集和验证集，这样划分的结果就是：原始数据划分为3份，分别为：训练集、验证集和测试集；其中训练集用来模型训练，验证集用来调整参数，而测试集用来衡量模型表现好坏。 12345678910111213141516171819X_trainval,y_trainval = X_train,y_trainX_train,X_val,y_train,y_val = train_test_split(X_trainval,y_trainval)print("Size of training set:&#123;&#125; size of validation set:&#123;&#125; size of teseting set:&#123;&#125;".format(X_train.shape[0],X_val.shape[0],X_test.shape[0]))best_score = 0.0for gamma in [0.001,0.01,0.1,1,10,100]: for C in [0.001,0.01,0.1,1,10,100]: svm = SVC(gamma=gamma,C=C) svm.fit(X_train,y_train) score = svm.score(X_val,y_val) if score &gt; best_score: best_score = score best_parameters = &#123;'gamma':gamma,'C':C&#125;svm = SVC(**best_parameters)svm.fit(X_trainval,y_trainval)test_score = svm.score(X_test,y_test)print("Best score on validation set:&#123;:.2f&#125;".format(best_score))print("Best parameters:&#123;&#125;".format(best_parameters))print("Best score on test set:&#123;:.2f&#125;".format(test_score)) Size of training set:2852 size of validation set:951 size of teseting set:951 Best score on validation set:0.79 Best parameters:{&#39;gamma&#39;: 0.01, &#39;C&#39;: 100} Best score on test set:0.76 Grid Search with Cross Validation（使用K折交叉验证）Grid Search 调参方法存在的共性弊端就是：耗时；参数越多，候选值越多，耗费时间越长。所以，一般情况下，先定一个大范围，然后再细化。 123456789101112from sklearn.model_selection import GridSearchCVparam_grid = &#123;"gamma":[0.001,0.01,0.1,1,10,100], "C":[0.001,0.01,0.1,1,10,100]&#125;print("Parameters:&#123;&#125;".format(param_grid))grid_search = GridSearchCV(SVC(),param_grid,cv=5)grid_search.fit(X_train,y_train)print("Test set score:&#123;:.2f&#125;".format(grid_search.score(X_test,y_test)))print("Best parameters:&#123;&#125;".format(grid_search.best_params_))print("Best score on train set:&#123;:.2f&#125;".format(grid_search.best_score_)) Parameters:{&#39;gamma&#39;: [0.001, 0.01, 0.1, 1, 10, 100], &#39;C&#39;: [0.001, 0.01, 0.1, 1, 10, 100]} Test set score:0.77 Best parameters:{&#39;C&#39;: 10, &#39;gamma&#39;: 0.1} Best score on train set:0.79 参考： DataWhale数据挖掘实战营 调参必备—Grid Search网格搜索 交叉验证和网格搜索]]></content>
      <categories>
        <category>人工智能</category>
        <category>基础概念</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6种分类模型比较]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%2F32513%2F</url>
    <content type="text"><![CDATA[数据集载入123456789# -*- coding: utf-8 -*-import pandas as pdimport numpy as npfrom matplotlib import pyplot as pltimport seaborn as snsimport warningswarnings.filterwarnings('ignore')df = pd.read_csv(u"2019-08-01_金融数据描述_data1.csv",encoding = 'gbk') 1df.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 4754 entries, 0 to 4753 Data columns (total 90 columns): Unnamed: 0 4754 non-null int64 custid 4754 non-null int64 trade_no 4754 non-null object bank_card_no 4754 non-null object low_volume_percent 4752 non-null float64 middle_volume_percent 4752 non-null float64 take_amount_in_later_12_month_highest 4754 non-null int64 trans_amount_increase_rate_lately 4751 non-null float64 trans_activity_month 4752 non-null float64 trans_activity_day 4752 non-null float64 transd_mcc 4752 non-null float64 trans_days_interval_filter 4746 non-null float64 trans_days_interval 4752 non-null float64 regional_mobility 4752 non-null float64 student_feature 1756 non-null float64 repayment_capability 4754 non-null int64 is_high_user 4754 non-null int64 number_of_trans_from_2011 4752 non-null float64 first_transaction_time 4752 non-null float64 historical_trans_amount 4754 non-null int64 historical_trans_day 4752 non-null float64 rank_trad_1_month 4752 non-null float64 trans_amount_3_month 4754 non-null int64 avg_consume_less_12_valid_month 4752 non-null float64 abs 4754 non-null int64 top_trans_count_last_1_month 4752 non-null float64 avg_price_last_12_month 4754 non-null int64 avg_price_top_last_12_valid_month 4650 non-null float64 reg_preference_for_trad 4752 non-null object trans_top_time_last_1_month 4746 non-null float64 trans_top_time_last_6_month 4746 non-null float64 consume_top_time_last_1_month 4746 non-null float64 consume_top_time_last_6_month 4746 non-null float64 cross_consume_count_last_1_month 4328 non-null float64 trans_fail_top_count_enum_last_1_month 4738 non-null float64 trans_fail_top_count_enum_last_6_month 4738 non-null float64 trans_fail_top_count_enum_last_12_month 4738 non-null float64 consume_mini_time_last_1_month 4728 non-null float64 max_cumulative_consume_later_1_month 4754 non-null int64 max_consume_count_later_6_month 4746 non-null float64 railway_consume_count_last_12_month 4742 non-null float64 pawns_auctions_trusts_consume_last_1_month 4754 non-null int64 pawns_auctions_trusts_consume_last_6_month 4754 non-null int64 jewelry_consume_count_last_6_month 4742 non-null float64 status 4754 non-null int64 source 4754 non-null object first_transaction_day 4752 non-null float64 trans_day_last_12_month 4752 non-null float64 id_name 4478 non-null object apply_score 4450 non-null float64 apply_credibility 4450 non-null float64 query_org_count 4450 non-null float64 query_finance_count 4450 non-null float64 query_cash_count 4450 non-null float64 query_sum_count 4450 non-null float64 latest_query_time 4450 non-null object latest_one_month_apply 4450 non-null float64 latest_three_month_apply 4450 non-null float64 latest_six_month_apply 4450 non-null float64 loans_score 4457 non-null float64 loans_credibility_behavior 4457 non-null float64 loans_count 4457 non-null float64 loans_settle_count 4457 non-null float64 loans_overdue_count 4457 non-null float64 loans_org_count_behavior 4457 non-null float64 consfin_org_count_behavior 4457 non-null float64 loans_cash_count 4457 non-null float64 latest_one_month_loan 4457 non-null float64 latest_three_month_loan 4457 non-null float64 latest_six_month_loan 4457 non-null float64 history_suc_fee 4457 non-null float64 history_fail_fee 4457 non-null float64 latest_one_month_suc 4457 non-null float64 latest_one_month_fail 4457 non-null float64 loans_long_time 4457 non-null float64 loans_latest_time 4457 non-null object loans_credit_limit 4457 non-null float64 loans_credibility_limit 4457 non-null float64 loans_org_count_current 4457 non-null float64 loans_product_count 4457 non-null float64 loans_max_limit 4457 non-null float64 loans_avg_limit 4457 non-null float64 consfin_credit_limit 4457 non-null float64 consfin_credibility 4457 non-null float64 consfin_org_count_current 4457 non-null float64 consfin_product_count 4457 non-null float64 consfin_max_limit 4457 non-null float64 consfin_avg_limit 4457 non-null float64 latest_query_day 4450 non-null float64 loans_latest_day 4457 non-null float64 dtypes: float64(70), int64(13), object(7) memory usage: 3.3+ MB 特征预处理删除无用12delete = ['Unnamed: 0', 'custid', 'trade_no', 'bank_card_no','id_name','latest_query_time','source','loans_latest_time','first_transaction_time', 'student_feature']df = df.drop(delete,axis=1) 处理分类型特征12from sklearn.preprocessing import LabelEncoderdf['reg_preference_for_trad'] = LabelEncoder().fit_transform(df['reg_preference_for_trad'].astype(str)) 使用众数填充12345from sklearn.preprocessing import Imputerfor i in range(df.shape[1]): feature = df.iloc[:,i].values.reshape(-1,1) imp_mode = Imputer(strategy='most_frequent') df.iloc[:,i] = imp_mode.fit_transform(feature) 数据划分12X = df[:].drop("status",axis=1)y = df["status"] 123from sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle = False) 数据归一化123from sklearn.preprocessing import minmax_scaleX_train = minmax_scale(X_train)X_test = minmax_scale(X_test) 建模与预测使用一般建模方法1234567891011121314151617181920212223242526272829303132333435from sklearn.metrics import *from sklearn.linear_model import LogisticRegressionfrom sklearn.svm import SVCfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifierfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import cross_val_scoreLR = LogisticRegression()LR = LR.fit(X_train, y_train)# LR = cross_val_score(LR, X_train, y_train, cv = 5)svc = SVC(kernel='linear', probability = True)svc = svc.fit(X_train, y_train)# svc = cross_val_score(svc,X_train,y_train, cv = 5)DT = DecisionTreeClassifier(max_depth = 6)DT = DT.fit(X_train, y_train)# DT = cross_val_score(DT, X_train, y_train, cv = 5)RF = RandomForestClassifier()RF = RF.fit(X_train, y_train)# RF = cross_val_score(RF, X_train, y_train, cv = 5)KNN = KNeighborsClassifier()KNN = KNN.fit(X_train, y_train)# LR = cross_val_score(LR, X_train, y_train, cv = 5)GBDT = GradientBoostingClassifier()GBDT = GBDT.fit(X_train, y_train)# LR = cross_val_score(LR, X_train, y_train, cv = 5)names = ["LR", "SVC", 'DT', "RF", "KNN", "GBDT"]models = [LR, svc, DT, RF, KNN, GBDT]evaluates = ['accuracy', 'precision', 'recall', 'f1', 'roc_auc'] 1234567891011121314151617181920212223242526272829303132333435363738df_list = []for name,model in zip(names,models): y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) #accuracy train_accuracy = model.score(X_train,y_train) test_accuracy = model.score(X_test,y_test) #precision train_precision = precision_score(y_train,y_train_pred) test_precision = precision_score(y_test,y_test_pred) #recall train_recall = recall_score(y_train,y_train_pred) test_recall = recall_score(y_test,y_test_pred) #f1 train_f1 = f1_score(y_train,y_train_pred) test_f1 = f1_score(y_test,y_test_pred) #auc y_train_pred = model.predict_proba(X_train)[:,1] y_test_pred = model.predict_proba(X_test)[:,1] train_auc = roc_auc_score(y_train,y_train_pred) test_auc = roc_auc_score(y_test,y_test_pred) print('&#123;&#125; 训练集： accuracy:&#123;:.3&#125;,precision:&#123;:.3&#125;, recall:&#123;:.3&#125;, f1:&#123;:.3&#125;, auc:&#123;:.3&#125;'.format(name,train_accuracy,train_precision,train_recall,train_f1,train_auc)) print('&#123;&#125; 测试集： accuracy:&#123;:.3&#125;,precision:&#123;:.3&#125;, recall:&#123;:.3&#125;, f1:&#123;:.3&#125;, auc:&#123;:.3&#125;'.format(name,test_accuracy,test_precision,test_recall,test_f1,test_auc)) print('\n') df = pd.DataFrame(np.array([train_accuracy,train_precision,train_recall,train_f1,train_auc,test_accuracy,test_precision,test_recall,test_f1,test_auc]).reshape(2,-1), index = ['train','test'], columns = ['Accuracy','Precision','Recall','F1-Score','AUC-Score']) df_list.append(df)pd.concat(df_list,axis=0,keys=names) LR 训练集： accuracy:0.801,precision:0.742, recall:0.279, f1:0.406, auc:0.8 LR 测试集： accuracy:0.789,precision:0.752, recall:0.365, f1:0.491, auc:0.787 SVC 训练集： accuracy:0.793,precision:0.809, recall:0.196, f1:0.316, auc:0.809 SVC 测试集： accuracy:0.771,precision:0.843, recall:0.222, f1:0.351, auc:0.796 DT 训练集： accuracy:0.829,precision:0.723, recall:0.487, f1:0.582, auc:0.832 DT 测试集： accuracy:0.727,precision:0.516, recall:0.361, f1:0.425, auc:0.707 RF 训练集： accuracy:0.981,precision:0.999, recall:0.924, f1:0.96, auc:0.999 RF 测试集： accuracy:0.722,precision:0.509, recall:0.218, f1:0.305, auc:0.673 KNN 训练集： accuracy:0.816,precision:0.741, recall:0.379, f1:0.501, auc:0.848 KNN 测试集： accuracy:0.708,precision:0.445, recall:0.184, f1:0.261, auc:0.623 GBDT 训练集： accuracy:0.859,precision:0.867, recall:0.497, f1:0.632, auc:0.913 GBDT 测试集： accuracy:0.754,precision:0.573, recall:0.474, f1:0.519, auc:0.771 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Accuracy Precision Recall F1-Score AUC-Score LR train 0.800684 0.742120 0.279396 0.405956 0.799942 test 0.788644 0.751938 0.364662 0.491139 0.786801 SVC train 0.792795 0.808889 0.196332 0.315972 0.809276 test 0.770768 0.842857 0.221805 0.351190 0.796191 DT train 0.829345 0.722756 0.486516 0.581560 0.831990 test 0.726604 0.516129 0.360902 0.424779 0.706676 RF train 0.981331 0.998834 0.924488 0.960224 0.999103 test 0.722397 0.508772 0.218045 0.305263 0.672949 KNN train 0.816198 0.740506 0.378641 0.501071 0.847694 test 0.707676 0.445455 0.184211 0.260638 0.623415 GBDT train 0.858796 0.866541 0.497303 0.631940 0.912630 test 0.753943 0.572727 0.473684 0.518519 0.770979 123456789101112131415161718192021222324252627282930313233def draw_roc_curve(train_pre_proba,test_pre_proba,train_auc,test_auc,model_name,num): fpr,tpr,roc_auc = train_pre_proba test_fpr,test_tpr,test_roc_auc = test_pre_proba plt.figure() lw = 2 plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % train_auc) plt.plot(test_fpr, test_tpr, color='red', lw=lw, label='ROC curve (area = %0.2f)' %test_auc) plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--') #plt.xlim([0.0, 1.0]) #plt.ylim([0.0, 1.05]) plt.xlabel('False Positive Rate') plt.ylabel('True Positive Rate') plt.title('Roc example '+ model_name) plt.legend(loc="lower right") plt.savefig("../img/2019-08-07_5种分类模型比较_&#123;&#125;.png".format(num)) plt.close() for num,name,model in zip(range(1,7),names,models): y_train_pred = model.predict_proba(X_train)[:,1] y_test_pred = model.predict_proba(X_test)[:,1] train_roc = roc_curve(y_train,y_train_pred) test_roc = roc_curve(y_test,y_test_pred) train_auc = roc_auc_score(y_train,y_train_pred) test_auc = roc_auc_score(y_test,y_test_pred) draw_roc_curve(train_roc,test_roc,train_auc,test_auc,name,num) 使用k-folds交叉建模1234567891011121314from sklearn.model_selection import KFolddef run_cv(X,y,clf_class,**kwargs): kf = KFold(n_splits = 5, shuffle = False, random_state = 0) y_pred = y.copy() clf = clf_class(**kwargs) for train_index , test_index in kf.split(X): X_train, X_test = X[train_index], X[test_index] y_train, y_test = y[train_index], y[test_index] clf.fit(X_train,y_train) y_pred[test_index] = clf.predict(X_test) return y_pred 12345678910from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifierfrom sklearn.svm import SVCfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import cross_val_scorefrom sklearn.neighbors import KNeighborsClassifier from sklearn.linear_model import LogisticRegressionLR_CV_result = run_cv(X_train,y_train,LogisticRegression)RF_CV_result = run_cv(X_train,y_train,RandomForestClassifier)KNN_CV_result = run_cv(X_train,y_train,KNeighborsClassifier) 123456def accuracy(y_true,y_pred): return np.mean(y_true == y_pred)print ("Logistic Regression (L2 is default): " + str(accuracy(y_train, LR_CV_result)))print ("Random forest: " + str(accuracy(y_train, RF_CV_result)))print ("K-nearest-neighbors: " + str(accuracy(y_train, KNN_CV_result))) Logistic Regression (L2 is default): 0.7933210623192216 Random forest: 0.7812253484091507 K-nearest-neighbors: 0.7520378648435446 参考： DataWhale数据挖掘实战营 吴裕雄 PYTHON 机器学习——集成学习梯度提升决策树GRADIENTBOOSTINGCLASSIFIER分类模型 使用5种分类模型进行用户贷款逾期预测 sklearn.model_selection.KFold]]></content>
      <categories>
        <category>人工智能</category>
        <category>监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据理解与清洗]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%2F17314%2F</url>
    <content type="text"><![CDATA[数据集载入123456789# -*- coding: utf-8 -*-import pandas as pdimport numpy as npfrom matplotlib import pyplot as pltimport seaborn as snsimport warningswarnings.filterwarnings('ignore')df = pd.read_csv(u"2019-08-01_金融数据描述_data1.csv",encoding = 'gbk') 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 custid trade_no bank_card_no low_volume_percent middle_volume_percent take_amount_in_later_12_month_highest trans_amount_increase_rate_lately trans_activity_month trans_activity_day ... loans_max_limit loans_avg_limit consfin_credit_limit consfin_credibility consfin_org_count_current consfin_product_count consfin_max_limit consfin_avg_limit latest_query_day loans_latest_day 0 5 2791858 20180507115231274000000023057383 卡号1 0.01 0.99 0 0.90 0.55 0.313 ... 2900.0 1688.0 1200.0 75.0 1.0 2.0 1200.0 1200.0 12.0 18.0 1 10 534047 20180507121002192000000023073000 卡号1 0.02 0.94 2000 1.28 1.00 0.458 ... 3500.0 1758.0 15100.0 80.0 5.0 6.0 22800.0 9360.0 4.0 2.0 2 12 2849787 20180507125159718000000023114911 卡号1 0.04 0.96 0 1.00 1.00 0.114 ... 1600.0 1250.0 4200.0 87.0 1.0 1.0 4200.0 4200.0 2.0 6.0 3 13 1809708 20180507121358683000000388283484 卡号1 0.00 0.96 2000 0.13 0.57 0.777 ... 3200.0 1541.0 16300.0 80.0 5.0 5.0 30000.0 12180.0 2.0 4.0 4 14 2499829 20180507115448545000000388205844 卡号1 0.01 0.99 0 0.46 1.00 0.175 ... 2300.0 1630.0 8300.0 79.0 2.0 2.0 8400.0 8250.0 22.0 120.0 5 rows × 90 columns 1df.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 4754 entries, 0 to 4753 Data columns (total 90 columns): Unnamed: 0 4754 non-null int64 custid 4754 non-null int64 trade_no 4754 non-null object bank_card_no 4754 non-null object low_volume_percent 4752 non-null float64 middle_volume_percent 4752 non-null float64 take_amount_in_later_12_month_highest 4754 non-null int64 trans_amount_increase_rate_lately 4751 non-null float64 trans_activity_month 4752 non-null float64 trans_activity_day 4752 non-null float64 transd_mcc 4752 non-null float64 trans_days_interval_filter 4746 non-null float64 trans_days_interval 4752 non-null float64 regional_mobility 4752 non-null float64 student_feature 1756 non-null float64 repayment_capability 4754 non-null int64 is_high_user 4754 non-null int64 number_of_trans_from_2011 4752 non-null float64 first_transaction_time 4752 non-null float64 historical_trans_amount 4754 non-null int64 historical_trans_day 4752 non-null float64 rank_trad_1_month 4752 non-null float64 trans_amount_3_month 4754 non-null int64 avg_consume_less_12_valid_month 4752 non-null float64 abs 4754 non-null int64 top_trans_count_last_1_month 4752 non-null float64 avg_price_last_12_month 4754 non-null int64 avg_price_top_last_12_valid_month 4650 non-null float64 reg_preference_for_trad 4752 non-null object trans_top_time_last_1_month 4746 non-null float64 trans_top_time_last_6_month 4746 non-null float64 consume_top_time_last_1_month 4746 non-null float64 consume_top_time_last_6_month 4746 non-null float64 cross_consume_count_last_1_month 4328 non-null float64 trans_fail_top_count_enum_last_1_month 4738 non-null float64 trans_fail_top_count_enum_last_6_month 4738 non-null float64 trans_fail_top_count_enum_last_12_month 4738 non-null float64 consume_mini_time_last_1_month 4728 non-null float64 max_cumulative_consume_later_1_month 4754 non-null int64 max_consume_count_later_6_month 4746 non-null float64 railway_consume_count_last_12_month 4742 non-null float64 pawns_auctions_trusts_consume_last_1_month 4754 non-null int64 pawns_auctions_trusts_consume_last_6_month 4754 non-null int64 jewelry_consume_count_last_6_month 4742 non-null float64 status 4754 non-null int64 source 4754 non-null object first_transaction_day 4752 non-null float64 trans_day_last_12_month 4752 non-null float64 id_name 4478 non-null object apply_score 4450 non-null float64 apply_credibility 4450 non-null float64 query_org_count 4450 non-null float64 query_finance_count 4450 non-null float64 query_cash_count 4450 non-null float64 query_sum_count 4450 non-null float64 latest_query_time 4450 non-null object latest_one_month_apply 4450 non-null float64 latest_three_month_apply 4450 non-null float64 latest_six_month_apply 4450 non-null float64 loans_score 4457 non-null float64 loans_credibility_behavior 4457 non-null float64 loans_count 4457 non-null float64 loans_settle_count 4457 non-null float64 loans_overdue_count 4457 non-null float64 loans_org_count_behavior 4457 non-null float64 consfin_org_count_behavior 4457 non-null float64 loans_cash_count 4457 non-null float64 latest_one_month_loan 4457 non-null float64 latest_three_month_loan 4457 non-null float64 latest_six_month_loan 4457 non-null float64 history_suc_fee 4457 non-null float64 history_fail_fee 4457 non-null float64 latest_one_month_suc 4457 non-null float64 latest_one_month_fail 4457 non-null float64 loans_long_time 4457 non-null float64 loans_latest_time 4457 non-null object loans_credit_limit 4457 non-null float64 loans_credibility_limit 4457 non-null float64 loans_org_count_current 4457 non-null float64 loans_product_count 4457 non-null float64 loans_max_limit 4457 non-null float64 loans_avg_limit 4457 non-null float64 consfin_credit_limit 4457 non-null float64 consfin_credibility 4457 non-null float64 consfin_org_count_current 4457 non-null float64 consfin_product_count 4457 non-null float64 consfin_max_limit 4457 non-null float64 consfin_avg_limit 4457 non-null float64 latest_query_day 4450 non-null float64 loans_latest_day 4457 non-null float64 dtypes: float64(70), int64(13), object(7) memory usage: 3.3+ MB 1234567typedic = &#123;&#125; # 类型字典for name in df.columns: typedic[str(df[name].dtype)] = typedic.get(str(df[name].dtype),[])+[name]for key,value in typedic.items(): print("&#123;&#125;格式共有&#123;&#125;个: &#123;&#125;".format(key,len(value),value)) print("") int64格式共有13个: [&#39;Unnamed: 0&#39;, &#39;custid&#39;, &#39;take_amount_in_later_12_month_highest&#39;, &#39;repayment_capability&#39;, &#39;is_high_user&#39;, &#39;historical_trans_amount&#39;, &#39;trans_amount_3_month&#39;, &#39;abs&#39;, &#39;avg_price_last_12_month&#39;, &#39;max_cumulative_consume_later_1_month&#39;, &#39;pawns_auctions_trusts_consume_last_1_month&#39;, &#39;pawns_auctions_trusts_consume_last_6_month&#39;, &#39;status&#39;] object格式共有7个: [&#39;trade_no&#39;, &#39;bank_card_no&#39;, &#39;reg_preference_for_trad&#39;, &#39;source&#39;, &#39;id_name&#39;, &#39;latest_query_time&#39;, &#39;loans_latest_time&#39;] float64格式共有70个: [&#39;low_volume_percent&#39;, &#39;middle_volume_percent&#39;, &#39;trans_amount_increase_rate_lately&#39;, &#39;trans_activity_month&#39;, &#39;trans_activity_day&#39;, &#39;transd_mcc&#39;, &#39;trans_days_interval_filter&#39;, &#39;trans_days_interval&#39;, &#39;regional_mobility&#39;, &#39;student_feature&#39;, &#39;number_of_trans_from_2011&#39;, &#39;first_transaction_time&#39;, &#39;historical_trans_day&#39;, &#39;rank_trad_1_month&#39;, &#39;avg_consume_less_12_valid_month&#39;, &#39;top_trans_count_last_1_month&#39;, &#39;avg_price_top_last_12_valid_month&#39;, &#39;trans_top_time_last_1_month&#39;, &#39;trans_top_time_last_6_month&#39;, &#39;consume_top_time_last_1_month&#39;, &#39;consume_top_time_last_6_month&#39;, &#39;cross_consume_count_last_1_month&#39;, &#39;trans_fail_top_count_enum_last_1_month&#39;, &#39;trans_fail_top_count_enum_last_6_month&#39;, &#39;trans_fail_top_count_enum_last_12_month&#39;, &#39;consume_mini_time_last_1_month&#39;, &#39;max_consume_count_later_6_month&#39;, &#39;railway_consume_count_last_12_month&#39;, &#39;jewelry_consume_count_last_6_month&#39;, &#39;first_transaction_day&#39;, &#39;trans_day_last_12_month&#39;, &#39;apply_score&#39;, &#39;apply_credibility&#39;, &#39;query_org_count&#39;, &#39;query_finance_count&#39;, &#39;query_cash_count&#39;, &#39;query_sum_count&#39;, &#39;latest_one_month_apply&#39;, &#39;latest_three_month_apply&#39;, &#39;latest_six_month_apply&#39;, &#39;loans_score&#39;, &#39;loans_credibility_behavior&#39;, &#39;loans_count&#39;, &#39;loans_settle_count&#39;, &#39;loans_overdue_count&#39;, &#39;loans_org_count_behavior&#39;, &#39;consfin_org_count_behavior&#39;, &#39;loans_cash_count&#39;, &#39;latest_one_month_loan&#39;, &#39;latest_three_month_loan&#39;, &#39;latest_six_month_loan&#39;, &#39;history_suc_fee&#39;, &#39;history_fail_fee&#39;, &#39;latest_one_month_suc&#39;, &#39;latest_one_month_fail&#39;, &#39;loans_long_time&#39;, &#39;loans_credit_limit&#39;, &#39;loans_credibility_limit&#39;, &#39;loans_org_count_current&#39;, &#39;loans_product_count&#39;, &#39;loans_max_limit&#39;, &#39;loans_avg_limit&#39;, &#39;consfin_credit_limit&#39;, &#39;consfin_credibility&#39;, &#39;consfin_org_count_current&#39;, &#39;consfin_product_count&#39;, &#39;consfin_max_limit&#39;, &#39;consfin_avg_limit&#39;, &#39;latest_query_day&#39;, &#39;loans_latest_day&#39;] 1df.columns Index([&#39;Unnamed: 0&#39;, &#39;custid&#39;, &#39;trade_no&#39;, &#39;bank_card_no&#39;, &#39;low_volume_percent&#39;, &#39;middle_volume_percent&#39;, &#39;take_amount_in_later_12_month_highest&#39;, &#39;trans_amount_increase_rate_lately&#39;, &#39;trans_activity_month&#39;, &#39;trans_activity_day&#39;, &#39;transd_mcc&#39;, &#39;trans_days_interval_filter&#39;, &#39;trans_days_interval&#39;, &#39;regional_mobility&#39;, &#39;student_feature&#39;, &#39;repayment_capability&#39;, &#39;is_high_user&#39;, &#39;number_of_trans_from_2011&#39;, &#39;first_transaction_time&#39;, &#39;historical_trans_amount&#39;, &#39;historical_trans_day&#39;, &#39;rank_trad_1_month&#39;, &#39;trans_amount_3_month&#39;, &#39;avg_consume_less_12_valid_month&#39;, &#39;abs&#39;, &#39;top_trans_count_last_1_month&#39;, &#39;avg_price_last_12_month&#39;, &#39;avg_price_top_last_12_valid_month&#39;, &#39;reg_preference_for_trad&#39;, &#39;trans_top_time_last_1_month&#39;, &#39;trans_top_time_last_6_month&#39;, &#39;consume_top_time_last_1_month&#39;, &#39;consume_top_time_last_6_month&#39;, &#39;cross_consume_count_last_1_month&#39;, &#39;trans_fail_top_count_enum_last_1_month&#39;, &#39;trans_fail_top_count_enum_last_6_month&#39;, &#39;trans_fail_top_count_enum_last_12_month&#39;, &#39;consume_mini_time_last_1_month&#39;, &#39;max_cumulative_consume_later_1_month&#39;, &#39;max_consume_count_later_6_month&#39;, &#39;railway_consume_count_last_12_month&#39;, &#39;pawns_auctions_trusts_consume_last_1_month&#39;, &#39;pawns_auctions_trusts_consume_last_6_month&#39;, &#39;jewelry_consume_count_last_6_month&#39;, &#39;status&#39;, &#39;source&#39;, &#39;first_transaction_day&#39;, &#39;trans_day_last_12_month&#39;, &#39;id_name&#39;, &#39;apply_score&#39;, &#39;apply_credibility&#39;, &#39;query_org_count&#39;, &#39;query_finance_count&#39;, &#39;query_cash_count&#39;, &#39;query_sum_count&#39;, &#39;latest_query_time&#39;, &#39;latest_one_month_apply&#39;, &#39;latest_three_month_apply&#39;, &#39;latest_six_month_apply&#39;, &#39;loans_score&#39;, &#39;loans_credibility_behavior&#39;, &#39;loans_count&#39;, &#39;loans_settle_count&#39;, &#39;loans_overdue_count&#39;, &#39;loans_org_count_behavior&#39;, &#39;consfin_org_count_behavior&#39;, &#39;loans_cash_count&#39;, &#39;latest_one_month_loan&#39;, &#39;latest_three_month_loan&#39;, &#39;latest_six_month_loan&#39;, &#39;history_suc_fee&#39;, &#39;history_fail_fee&#39;, &#39;latest_one_month_suc&#39;, &#39;latest_one_month_fail&#39;, &#39;loans_long_time&#39;, &#39;loans_latest_time&#39;, &#39;loans_credit_limit&#39;, &#39;loans_credibility_limit&#39;, &#39;loans_org_count_current&#39;, &#39;loans_product_count&#39;, &#39;loans_max_limit&#39;, &#39;loans_avg_limit&#39;, &#39;consfin_credit_limit&#39;, &#39;consfin_credibility&#39;, &#39;consfin_org_count_current&#39;, &#39;consfin_product_count&#39;, &#39;consfin_max_limit&#39;, &#39;consfin_avg_limit&#39;, &#39;latest_query_day&#39;, &#39;loans_latest_day&#39;], dtype=&#39;object&#39;) 可视化各特征12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455name_list_1 = [ 'low_volume_percent', 'middle_volume_percent', 'take_amount_in_later_12_month_highest', 'trans_amount_increase_rate_lately', 'trans_activity_month', 'trans_activity_day', 'transd_mcc', 'trans_days_interval_filter', 'trans_days_interval', 'regional_mobility', 'student_feature', 'repayment_capability', 'is_high_user', 'number_of_trans_from_2011', 'first_transaction_time' ]name_list_2 = [ 'historical_trans_amount', 'historical_trans_day', 'rank_trad_1_month', 'trans_amount_3_month', 'avg_consume_less_12_valid_month', 'abs', 'top_trans_count_last_1_month', 'avg_price_last_12_month', 'avg_price_top_last_12_valid_month', 'reg_preference_for_trad', 'trans_top_time_last_1_month', 'trans_top_time_last_6_month', 'consume_top_time_last_1_month', 'consume_top_time_last_6_month', 'cross_consume_count_last_1_month', ]name_list_3 = [ 'trans_fail_top_count_enum_last_1_month', 'trans_fail_top_count_enum_last_6_month', 'trans_fail_top_count_enum_last_12_month', 'consume_mini_time_last_1_month', 'max_cumulative_consume_later_1_month', 'max_consume_count_later_6_month', 'railway_consume_count_last_12_month', 'pawns_auctions_trusts_consume_last_1_month', 'pawns_auctions_trusts_consume_last_6_month', 'jewelry_consume_count_last_6_month', 'first_transaction_day', 'trans_day_last_12_month', 'apply_score', 'apply_credibility', 'query_org_count', ]name_list_4 = [ 'query_finance_count', 'query_cash_count', 'query_sum_count', 'latest_query_time', 'latest_one_month_apply', 'latest_three_month_apply', 'latest_six_month_apply', 'loans_score', 'loans_credibility_behavior', 'loans_count', 'loans_settle_count', 'loans_overdue_count', 'loans_org_count_behavior', 'consfin_org_count_behavior', 'loans_cash_count', ]name_list_5 = [ 'latest_one_month_loan', 'latest_three_month_loan', 'latest_six_month_loan', 'history_suc_fee', 'history_fail_fee', 'latest_one_month_suc', 'latest_one_month_fail', 'loans_long_time', 'loans_latest_time', 'loans_credit_limit', 'loans_credibility_limit', 'loans_org_count_current', 'loans_product_count', 'loans_max_limit', 'loans_avg_limit', ]name_list_6 = [ 'consfin_credit_limit', 'consfin_credibility', 'consfin_org_count_current', 'consfin_product_count', 'consfin_max_limit', 'consfin_avg_limit', 'latest_query_day', 'loans_latest_day' ] 1234567f, ax = plt.subplots(5, 3, figsize=(20, 20))for i,name in enumerate(name_list_1): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3]) plt.savefig("../img/2019-08-01_金融数据描述_1.png")plt.close() 1234567f, ax = plt.subplots(5, 3, figsize=(20, 20))for i,name in enumerate(name_list_2): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3]) plt.savefig("../img/2019-08-01_金融数据描述_2.png")plt.close() 1234567f, ax = plt.subplots(5, 3, figsize=(20, 20))for i,name in enumerate(name_list_3): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3]) plt.savefig("../img/2019-08-01_金融数据描述_3.png")plt.close() 1234567f, ax = plt.subplots(5, 3, figsize=(20, 20))for i,name in enumerate(name_list_4): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3])plt.savefig("../img/2019-08-01_金融数据描述_4.png")plt.close() 1234567f, ax = plt.subplots(5, 3, figsize=(20, 20))for i,name in enumerate(name_list_5): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3])plt.savefig("../img/2019-08-01_金融数据描述_5.png")plt.close() 1234567f, ax = plt.subplots(3, 3, figsize=(20, 20))for i,name in enumerate(name_list_6): sns.countplot(data=df, x=name, hue='status', ax=ax[i // 3][i % 3])plt.savefig("../img/2019-08-01_金融数据描述_6.png")plt.close() 从以上分布图可以看出，连续型数据的特征基本上符合正态分布，指数分布或者泊松分布等，但在[‘rank_trad_1_month’,’trans_top_time_last_1_month’,’trans_top_time_last_6_month’,’consume_top_time_last_1_month’,’consume_top_time_last_6_month’,’loans_credit_limit’,’loans_credibility_limit’,’loans_max_limit’,’consfin_credibility’]这几个特征上出现数据于最左最右位置会出现骤升。从业务层面考虑，暂时未得出满意结论，待确认特征取数逻辑后再分析。 还有，’avg_price_last_12_month’,’consfin_credit_limit’这两个特征虽然是连续型特征，但由图上看，出现标签分段，考虑继续探索，查看是否存在分段。 另外几个离散型特征，如’reg_preference_for_trad’,’regional_mobility’等，在标签status上区别明显，感觉是对模型有用的特征。 1234sns.boxplot(y = 'consfin_credit_limit',x = 'status',data = df)plt.savefig("../img/2019-08-01_金融数据描述_7.png")plt.close() 1234sns.boxplot(y = 'avg_price_last_12_month',x = 'status',data = df)plt.savefig("../img/2019-08-01_金融数据描述_8.png")plt.close() 1234sns.boxplot(y = 'rank_trad_1_month',x = 'status',data = df)plt.savefig("../img/2019-08-01_金融数据描述_9.png")plt.close() 数据预处理为什么需要处理缺失值？不同缺失值的处理方式在一定程度上影响了特征提取、建模和模型训练缺失值太多，可以尝试着直接删除，如果不删除，处理不好，可能会引来噪声缺失值较少，少于某一缺失率时，直接删除又会带来信息的损失，此时可以采取适当的填充方式。 缺失率大于多少时应当抛弃该特征？一般为70%,但是还要分析该特征与训练目标的重要程度 缺失值填充有哪些方法？插值填充 特殊值 均值、加权均值（缺点：降低数据的方差，即随机性） 中位数 众数（多用在类别变数） … 插补法 随机插补法：从总体中随机抽取某个样本代替缺失样本 多重插补法：通过变量之间的关系对缺失数据进行预测，利用蒙特卡洛方法生成多个完整的数据集，在对这些数据集进行分析，最后对分析结果进行汇总处理 热平台插补：指在非缺失数据集中找到一个与缺失值所在样本相似的样本（匹配样本），利用其中的观测值对缺失值进行插补 拉格朗日差值法 牛顿插值法 列的维度上，如果是连续性，就使用平均值插补，如果是离散性，就使用众数来插补; 行的维度上，引入预测模型，可考虑辅助回归，通过变量间的关系来预测缺失数据 丢弃如果行和列的缺失达到一定的比例，建议放弃整行或整列数据 模型法更多时候我们会基于已有的其他字段，将缺失字段作为目标变量进行预测，从而得到最为可能的补全值。如果带有缺失值的列是数值变量，采用回归模型补全；如果是分类变量，则采用分类模型补全 专家补全对于少量且具有重要意义的数据记录，专家补足也是非常重要的一种途径 不处理 当缺失值对模型的影响不大时，直接在包含空值的数据上进行数据挖掘 很多模型对于缺失值有容忍度或灵活的处理方法，因此在预处理阶段可以不做处理 树模型对于缺失值的敏感度较低，大部分时候可以在数据有缺失时使用 涉及到距离度量(distance measurement)时，如计算两个点之间的距离，缺失数据就变得比较重要。因为涉及到“距离”这个概念，那么缺失值处理不当就会导致效果很差，如K近邻算法(KNN)和支持向量机(SVM) 线性模型的代价函数(loss function)往往涉及到距离(distance)的计算，计算预测值和真实值之间的差别，这容易导致对缺失值敏感 神经网络的鲁棒性强，对于缺失数据不是非常敏感，但一般没有那么多数据可供使用。 贝叶斯模型对于缺失数据也比较稳定，数据量很小的时候首推贝叶斯模型。 时间序列依情况处理，主要看单独时间字段或时间字段与某些字段的组合属性对目标分析的作用程度，再采取相应方式来进行特征提取比如：可以将时间字段与其他字段属性进行组合，分析每天、每周、每月或特点星期几等情况下特征数据频率信息，总的来说还是得看分析得目标 通常看到的情况是，除了考虑时间序列这个单独的特征外，往往是将时间序列和具有时间属性的特征联合起来分析，查看组合特征的对所需要分析的内容的影响 异常值和离群值大多数的参数统计数值如均值、标准差、相关系数等，以及基于这些参数的统计分析均对离群值高度敏感。因此离群值的存在会对数据分析造成极大影响 判断 用分位数搞定，看跟平均值的偏差超过几倍标准差 LOF算法 describe的时候加一个箱型图 处理 对数转换 缩尾 截尾 插值 无用特征删除将所有object格式的改为数值格式，其中有部分无用特征则可直接删除 由上可看出需处理包含：[‘trade_no’, ‘bank_card_no’, ‘reg_preference_for_trad’, ‘source’, ‘id_name’, ‘latest_query_time’, ‘loans_latest_time’] 1df['source'].value_counts(dropna = False) xs 4754 Name: source, dtype: int64 12to_drop = ['trade_no', 'bank_card_no', 'student_feature','cross_consume_count_last_1_month', 'id_name', 'source']df = df.drop(to_drop, axis=1) 缺失填充1df['reg_preference_for_trad'].value_counts(dropna = False) 一线城市 3403 三线城市 1064 境外 150 二线城市 131 其他城市 4 NaN 2 Name: reg_preference_for_trad, dtype: int64 12df['reg_preference_for_trad'].fillna('其他城市',inplace = True)df['reg_preference_for_trad'].value_counts(dropna = False) 一线城市 3403 三线城市 1064 境外 150 二线城市 131 其他城市 6 Name: reg_preference_for_trad, dtype: int64 1df.isnull().sum().sort_values(ascending = False) latest_three_month_apply 304 query_finance_count 304 latest_six_month_apply 304 latest_query_time 304 query_sum_count 304 query_cash_count 304 latest_one_month_apply 304 query_org_count 304 apply_credibility 304 apply_score 304 latest_query_day 304 latest_three_month_loan 297 loans_score 297 loans_credibility_behavior 297 loans_count 297 loans_settle_count 297 loans_overdue_count 297 loans_org_count_behavior 297 consfin_org_count_behavior 297 loans_cash_count 297 latest_one_month_loan 297 loans_latest_day 297 latest_six_month_loan 297 loans_product_count 297 history_suc_fee 297 consfin_avg_limit 297 consfin_product_count 297 consfin_org_count_current 297 consfin_credibility 297 consfin_credit_limit 297 ... trans_amount_increase_rate_lately 3 trans_days_interval 2 regional_mobility 2 number_of_trans_from_2011 2 middle_volume_percent 2 transd_mcc 2 trans_activity_day 2 trans_activity_month 2 low_volume_percent 2 historical_trans_day 2 first_transaction_time 2 first_transaction_day 2 rank_trad_1_month 2 avg_consume_less_12_valid_month 2 trans_day_last_12_month 2 top_trans_count_last_1_month 2 max_cumulative_consume_later_1_month 0 custid 0 status 0 take_amount_in_later_12_month_highest 0 pawns_auctions_trusts_consume_last_6_month 0 pawns_auctions_trusts_consume_last_1_month 0 reg_preference_for_trad 0 historical_trans_amount 0 avg_price_last_12_month 0 abs 0 repayment_capability 0 is_high_user 0 trans_amount_3_month 0 Unnamed: 0 0 Length: 84, dtype: int64 特征间探索12345corr = df[:].corr()plt.figure(figsize=(15, 10))sb.heatmap(corr)plt.savefig("../img/2019-08-01_金融数据描述_10.png")plt.close() 1corr .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 custid low_volume_percent middle_volume_percent take_amount_in_later_12_month_highest trans_amount_increase_rate_lately trans_activity_month trans_activity_day transd_mcc trans_days_interval_filter ... loans_max_limit loans_avg_limit consfin_credit_limit consfin_credibility consfin_org_count_current consfin_product_count consfin_max_limit consfin_avg_limit latest_query_day loans_latest_day Unnamed: 0 1.000000 -0.007628 0.002861 -0.022844 -0.019728 0.014076 -0.021715 -0.001027 -0.006975 -0.021338 ... 0.012189 -0.004457 0.005967 0.007746 0.012062 0.009583 0.004020 0.008860 0.020774 0.026387 custid -0.007628 1.000000 0.031430 0.090599 -0.030282 -0.001299 -0.118811 -0.216062 -0.147485 0.144513 ... -0.236185 -0.152017 -0.093180 -0.041979 -0.129297 -0.139197 -0.115324 -0.076767 0.099208 0.098628 low_volume_percent 0.002861 0.031430 1.000000 -0.151504 -0.066047 0.005331 0.023895 -0.093754 -0.095780 0.054680 ... -0.140173 -0.128145 -0.083987 -0.032534 -0.074851 -0.067226 -0.096647 -0.094627 0.069301 0.047500 middle_volume_percent -0.022844 0.090599 -0.151504 1.000000 -0.135050 0.001608 -0.031743 -0.055491 -0.094736 0.010146 ... -0.145599 -0.110230 -0.153241 0.003266 -0.007761 -0.014847 -0.169575 -0.174126 -0.001628 -0.003253 take_amount_in_later_12_month_highest -0.019728 -0.030282 -0.066047 -0.135050 1.000000 -0.006699 0.060997 0.112582 0.181435 -0.055318 ... 0.071798 0.038880 0.039328 0.015841 0.021387 0.021337 0.054433 0.040634 -0.000570 -0.010231 trans_amount_increase_rate_lately 0.014076 -0.001299 0.005331 0.001608 -0.006699 1.000000 0.015389 -0.003061 -0.011644 0.013220 ... 0.007119 0.000119 0.028868 0.006174 -0.019901 -0.019603 0.007123 0.040865 -0.001457 0.027221 trans_activity_month -0.021715 -0.118811 0.023895 -0.031743 0.060997 0.015389 1.000000 0.063373 0.069272 -0.091630 ... 0.061847 0.037275 -0.036822 -0.000400 0.003332 0.005534 -0.022388 -0.043764 -0.024161 -0.014880 trans_activity_day -0.001027 -0.216062 -0.093754 -0.055491 0.112582 -0.003061 0.063373 1.000000 0.674547 -0.491304 ... 0.445155 0.202242 0.096622 0.181157 0.553486 0.551140 0.224509 0.085255 -0.188965 -0.299110 transd_mcc -0.006975 -0.147485 -0.095780 -0.094736 0.181435 -0.011644 0.069272 0.674547 1.000000 -0.407126 ... 0.313715 0.165959 0.066250 0.131905 0.371197 0.374660 0.156951 0.057663 -0.120330 -0.211593 trans_days_interval_filter -0.021338 0.144513 0.054680 0.010146 -0.055318 0.013220 -0.091630 -0.491304 -0.407126 1.000000 ... -0.222970 -0.118522 -0.055205 -0.142221 -0.287044 -0.286212 -0.111345 -0.045801 0.069560 0.163433 trans_days_interval -0.006297 0.200145 0.062421 -0.000383 -0.053329 0.000521 -0.151579 -0.542118 -0.447308 0.690819 ... -0.271875 -0.163049 -0.034716 -0.102588 -0.285654 -0.286510 -0.105000 -0.024740 0.102343 0.178628 regional_mobility 0.011694 -0.134926 -0.042939 0.009671 0.024089 -0.026960 -0.219911 0.143697 0.114936 -0.124350 ... 0.099696 0.062712 0.092796 0.054084 0.147120 0.145322 0.091150 0.079245 -0.051839 -0.107139 student_feature 0.014227 0.026639 -0.007327 0.018852 -0.013524 -0.002682 0.004966 0.011653 0.005921 -0.005412 ... 0.021982 0.007634 0.001860 0.009800 0.020368 0.017777 0.000096 0.004799 -0.020274 -0.031571 repayment_capability -0.006726 -0.026254 -0.041522 -0.178436 0.055174 -0.000572 0.024737 0.189494 0.115434 -0.048998 ... 0.128100 0.066266 0.052900 0.007068 0.046341 0.046471 0.063720 0.052120 -0.020964 -0.049951 is_high_user -0.002995 -0.004640 0.018546 -0.029172 0.068763 -0.002017 0.044231 -0.034766 -0.080892 0.146678 ... -0.006073 0.014809 0.001286 -0.000752 -0.020497 -0.017732 0.007764 0.013155 -0.011908 -0.015299 number_of_trans_from_2011 0.016355 -0.276856 -0.031668 -0.084995 0.056183 -0.013609 -0.198322 0.286353 0.262917 -0.181413 ... 0.195444 0.142227 0.105527 0.066191 0.212621 0.215217 0.138342 0.088776 -0.087938 -0.140635 historical_trans_amount 0.002346 -0.179652 -0.117333 -0.255846 0.102959 -0.002527 0.016522 0.526801 0.392433 -0.254563 ... 0.324514 0.165218 0.137554 0.073505 0.288324 0.288420 0.201670 0.138920 -0.087267 -0.156048 historical_trans_day 0.004245 -0.345875 -0.068345 -0.116128 0.112908 -0.006987 0.052108 0.855832 0.603820 -0.424616 ... 0.430792 0.223623 0.111262 0.142560 0.472101 0.473890 0.219427 0.097498 -0.171007 -0.267034 rank_trad_1_month 0.011515 0.116798 0.102996 0.139914 -0.089095 0.028153 -0.017110 -0.517923 -0.481565 0.345540 ... -0.235028 -0.121879 -0.120020 -0.133787 -0.328297 -0.327323 -0.180749 -0.115613 0.139572 0.243659 trans_amount_3_month -0.003329 -0.069252 -0.063526 -0.189438 0.074279 -0.003598 0.010864 0.293735 0.250140 -0.139654 ... 0.186909 0.084463 0.065007 0.033856 0.151395 0.153457 0.094556 0.063275 -0.044342 -0.099134 avg_consume_less_12_valid_month -0.001742 -0.087905 -0.042251 -0.154257 0.031360 0.006201 0.014532 0.081550 0.194729 -0.017535 ... 0.054239 0.010832 0.024610 0.026514 0.103333 0.101638 0.044864 0.011955 -0.069481 -0.090181 abs -0.004830 -0.059940 -0.059972 -0.247023 0.081978 -0.003474 0.038276 0.306292 0.160103 -0.054408 ... 0.152274 0.105389 0.072716 0.009934 0.071542 0.074592 0.102727 0.090651 -0.042772 -0.065586 top_trans_count_last_1_month 0.021195 0.101220 0.037765 0.059410 -0.063713 0.029701 -0.026923 -0.503568 -0.475823 0.381422 ... -0.199205 -0.082819 -0.071977 -0.138804 -0.323863 -0.324179 -0.128756 -0.058697 0.140451 0.247943 avg_price_last_12_month 0.011454 -0.090752 -0.286213 -0.556220 0.129908 -0.004808 -0.006858 0.068127 0.067431 -0.003254 ... 0.204154 0.186553 0.183277 -0.017057 0.019580 0.017570 0.179284 0.205885 -0.033386 -0.020140 avg_price_top_last_12_valid_month -0.018637 0.124158 0.509637 0.369498 -0.123202 -0.030556 0.011839 -0.138470 -0.145411 0.064464 ... -0.316923 -0.285338 -0.172475 -0.002851 -0.087684 -0.080339 -0.197348 -0.195194 0.079399 0.062422 trans_top_time_last_1_month -0.007772 -0.003624 -0.023020 -0.015316 0.028547 -0.021723 0.018931 0.092705 0.143620 -0.127328 ... 0.039372 0.019334 0.005990 0.060674 0.059770 0.056594 0.021747 0.000811 -0.030739 -0.069952 trans_top_time_last_6_month 0.012229 0.063470 0.064055 0.025356 -0.079647 0.032999 -0.016856 -0.519642 -0.400228 0.541678 ... -0.227717 -0.111353 -0.055343 -0.151634 -0.336984 -0.334724 -0.106172 -0.042912 0.088539 0.199473 consume_top_time_last_1_month -0.012425 -0.013828 -0.030325 -0.024816 0.022475 -0.020937 0.021517 0.126348 0.162267 -0.155562 ... 0.053634 0.023311 0.018442 0.073859 0.083782 0.080835 0.038965 0.012452 -0.044495 -0.078152 consume_top_time_last_6_month 0.010297 0.071615 0.026853 0.033989 -0.062038 0.032106 -0.009154 -0.506739 -0.371122 0.489491 ... -0.228478 -0.109085 -0.055605 -0.128403 -0.331808 -0.329305 -0.105383 -0.042412 0.083349 0.194636 cross_consume_count_last_1_month -0.019612 -0.015749 0.056716 -0.076003 0.042310 -0.004524 -0.001588 0.217779 0.236684 -0.098826 ... 0.101269 0.038369 0.032169 0.024935 0.129515 0.131031 0.041163 0.025667 -0.026850 -0.081532 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... loans_score -0.014716 -0.006276 -0.007019 -0.039519 -0.003928 0.010481 -0.020418 -0.211471 -0.141698 0.105373 ... -0.145502 -0.071344 0.076157 -0.043698 -0.242594 -0.249384 -0.004854 0.085289 0.035587 -0.019444 loans_credibility_behavior -0.000191 -0.023587 0.037414 -0.031636 -0.017790 -0.003788 0.002694 -0.059242 -0.028579 0.016791 ... -0.109592 -0.059538 0.113228 0.202241 0.132995 0.141105 0.112848 0.110999 0.014235 -0.034587 loans_count 0.008971 -0.104423 -0.103643 0.093372 0.034853 -0.011057 0.010844 0.713700 0.433028 -0.340780 ... 0.454809 0.167113 0.097746 0.189068 0.669975 0.658099 0.240708 0.067635 -0.194495 -0.388366 loans_settle_count 0.008509 -0.106395 -0.115451 0.084747 0.044691 -0.011398 0.006203 0.723008 0.440667 -0.346732 ... 0.466131 0.175771 0.109141 0.183622 0.633814 0.618343 0.239062 0.079620 -0.198341 -0.374859 loans_overdue_count -0.002123 -0.047870 0.003258 0.055341 -0.018406 -0.009483 0.026175 0.319103 0.193574 -0.145065 ... 0.189896 0.071337 0.001805 0.089767 0.389047 0.396295 0.109103 -0.020359 -0.069116 -0.166293 loans_org_count_behavior 0.002662 -0.107997 -0.113256 0.086219 0.020780 -0.012629 0.014655 0.698811 0.451913 -0.330187 ... 0.462677 0.133557 0.065915 0.231726 0.799828 0.784147 0.257087 0.038651 -0.216354 -0.402870 consfin_org_count_behavior 0.012062 -0.129297 -0.074851 -0.007761 0.021387 -0.019901 0.003332 0.553486 0.371197 -0.287044 ... 0.357549 0.137506 0.102057 0.297390 1.000000 0.988027 0.345697 0.074170 -0.185038 -0.399885 loans_cash_count -0.002987 -0.078110 -0.115566 0.123857 0.016962 -0.006482 0.018475 0.662281 0.420938 -0.298750 ... 0.443326 0.108990 0.034866 0.156549 0.555002 0.539896 0.164961 0.012515 -0.197164 -0.337008 latest_one_month_loan -0.001009 -0.082016 -0.034938 -0.017258 0.008845 -0.010482 0.010030 0.251331 0.152255 -0.109048 ... 0.216387 0.078718 0.057899 0.087776 0.328566 0.334659 0.136317 0.039233 -0.167327 -0.564125 latest_three_month_loan 0.009841 -0.102432 -0.041141 -0.007416 0.009611 -0.012746 0.024060 0.277217 0.180567 -0.132316 ... 0.235019 0.083134 0.055062 0.099953 0.410173 0.415173 0.158521 0.038337 -0.172112 -0.556912 latest_six_month_loan 0.013859 -0.084090 -0.080426 0.080167 0.034499 -0.007440 0.023376 0.618386 0.381795 -0.294128 ... 0.395462 0.110447 0.067585 0.169560 0.653119 0.646769 0.214958 0.040151 -0.201667 -0.457269 history_suc_fee 0.005751 -0.154554 -0.068576 0.038832 0.036804 -0.013452 0.008331 0.707752 0.432147 -0.361614 ... 0.439947 0.158091 0.129951 0.194162 0.682134 0.674063 0.258122 0.092018 -0.197019 -0.392292 history_fail_fee 0.005633 -0.039117 0.009093 0.055486 -0.019751 -0.006480 0.033715 0.269878 0.148111 -0.115664 ... 0.164983 0.047106 0.008807 0.098387 0.399674 0.411005 0.130966 -0.011496 -0.060527 -0.199490 latest_one_month_suc 0.000168 -0.078523 -0.025131 -0.022327 0.022699 -0.009579 0.009873 0.228821 0.146654 -0.111359 ... 0.194397 0.056937 0.023565 0.092642 0.349219 0.360903 0.119473 0.014118 -0.167496 -0.459412 latest_one_month_fail 0.013939 -0.041356 0.021126 -0.018844 -0.004671 -0.005436 0.017951 0.133230 0.080658 -0.053043 ... 0.104707 0.041028 -0.000725 0.053177 0.228943 0.244784 0.078403 -0.011238 -0.051815 -0.232811 loans_long_time 0.000992 -0.216323 -0.074834 0.040822 0.012660 -0.002678 0.030914 0.384281 0.301560 -0.317888 ... 0.368329 0.268476 0.144168 0.229963 0.345921 0.337877 0.198060 0.134422 -0.134214 -0.214274 loans_credit_limit -0.006194 -0.160582 -0.138446 -0.086706 0.050185 0.013118 0.036172 0.229054 0.177929 -0.146462 ... 0.745694 0.901755 0.085200 0.057358 0.151520 0.152471 0.123290 0.087213 -0.111170 -0.157736 loans_credibility_limit -0.033850 -0.000850 -0.051545 0.090824 -0.025575 0.003868 -0.005513 0.161363 0.154721 -0.083218 ... 0.328845 0.456704 -0.022646 -0.029875 0.115503 0.114720 0.021164 -0.036374 -0.127687 -0.138313 loans_org_count_current -0.002987 -0.078110 -0.115566 0.123857 0.016962 -0.006482 0.018475 0.662281 0.420938 -0.298750 ... 0.443326 0.108990 0.034866 0.156549 0.555002 0.539896 0.164961 0.012515 -0.197164 -0.337008 loans_product_count -0.001941 -0.072159 -0.114296 0.122741 0.018572 -0.007575 0.019401 0.656939 0.416980 -0.295409 ... 0.441316 0.108962 0.031936 0.155744 0.553607 0.539424 0.163650 0.009397 -0.199549 -0.348389 loans_max_limit 0.012189 -0.236185 -0.140173 -0.145599 0.071798 0.007119 0.061847 0.445155 0.313715 -0.222970 ... 1.000000 0.716175 0.108760 0.101659 0.357549 0.354231 0.208389 0.109425 -0.190074 -0.282204 loans_avg_limit -0.004457 -0.152017 -0.128145 -0.110230 0.038880 0.000119 0.037275 0.202242 0.165959 -0.118522 ... 0.716175 1.000000 0.091117 0.031452 0.137506 0.137271 0.130307 0.098641 -0.099086 -0.144835 consfin_credit_limit 0.005967 -0.093180 -0.083987 -0.153241 0.039328 0.028868 -0.036822 0.096622 0.066250 -0.055205 ... 0.108760 0.091117 1.000000 0.241837 0.102057 0.081338 0.788637 0.901470 -0.047756 -0.110230 consfin_credibility 0.007746 -0.041979 -0.032534 0.003266 0.015841 0.006174 -0.000400 0.181157 0.131905 -0.142221 ... 0.101659 0.031452 0.241837 1.000000 0.297390 0.288275 0.216232 0.275861 -0.085131 -0.230984 consfin_org_count_current 0.012062 -0.129297 -0.074851 -0.007761 0.021387 -0.019901 0.003332 0.553486 0.371197 -0.287044 ... 0.357549 0.137506 0.102057 0.297390 1.000000 0.988027 0.345697 0.074170 -0.185038 -0.399885 consfin_product_count 0.009583 -0.139197 -0.067226 -0.014847 0.021337 -0.019603 0.005534 0.551140 0.374660 -0.286212 ... 0.354231 0.137271 0.081338 0.288275 0.988027 1.000000 0.329687 0.054292 -0.183685 -0.402011 consfin_max_limit 0.004020 -0.115324 -0.096647 -0.169575 0.054433 0.007123 -0.022388 0.224509 0.156951 -0.111345 ... 0.208389 0.130307 0.788637 0.216232 0.345697 0.329687 1.000000 0.790580 -0.096890 -0.193945 consfin_avg_limit 0.008860 -0.076767 -0.094627 -0.174126 0.040634 0.040865 -0.043764 0.085255 0.057663 -0.045801 ... 0.109425 0.098641 0.901470 0.275861 0.074170 0.054292 0.790580 1.000000 -0.042131 -0.088072 latest_query_day 0.020774 0.099208 0.069301 -0.001628 -0.000570 -0.001457 -0.024161 -0.188965 -0.120330 0.069560 ... -0.190074 -0.099086 -0.047756 -0.085131 -0.185038 -0.183685 -0.096890 -0.042131 1.000000 0.230078 loans_latest_day 0.026387 0.098628 0.047500 -0.003253 -0.010231 0.027221 -0.014880 -0.299110 -0.211593 0.163433 ... -0.282204 -0.144835 -0.110230 -0.230984 -0.399885 -0.402011 -0.193945 -0.088072 0.230078 1.000000 82 rows × 82 columns 参考： DataWhale数据挖掘实战营 利用Python进行数据分析·第2版 Stata：离群值！离群值？离群值！ 机器学习中如何处理不平衡数据？]]></content>
      <categories>
        <category>人工智能</category>
        <category>数据挖掘</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[决策树]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%2F51507%2F</url>
    <content type="text"><![CDATA[信息价值指标信息熵信息熵是度量样本集合”纯度”最常用的一种指标，假定当前样本集合D中第i类样本所占的比例为$P_i$，则D的信息熵定义为： Ent(D)=-\sum_{i=1}^{n}{P_i \cdot log_2{P_i}} 某随机事件结果的种类越多，则该事件的熵越大（不确定性越大） 某随机事件的各种可能发生结果概率越均匀，则该事件的熵越大（不确定性越大） 值域：&gt;= 0 缺点是计算量大（log） 信息增益(ID3)Gain(D,a)=Ent(D)-\sum_{i=1}^{n}{\frac{|D^i|}{|D|}{Ent(D^i)}} 划分前的信息熵-划分后的信息熵 信息增益率(C4.5)Gain_ratio(D,a)=\frac{Gain(D,a)}{IV(a)}IV(a)=-\sum_{i=1}^{i}{\frac{|D^i|}{|D|}{log_2{\frac{|D^i|}{|D|}}}}基尼指数(CART)G=1-\sum_{i=1}^{n}{P_i^2} 值域：0~1 建树逻辑总体流程分而治之(divide-andconquer) 自根至叶的递归过程 在每个中间结点寻找一个”划分”属性 三种停止条件 当前结点包含的样本全属于同一类别，无须划分 当前属性集为空，或是所有样本在所有属性上取值相同，无法划分 当前结点包含的样本集合为空，不能划分 所有子树信息价值（信息熵、基尼指数）的和必定小于等于原来整体数据集的信息价值，信息增益用来衡量减少的程度。 def build(D=数据集)： if D所有数据目标值 y 都相同： return #递回停止条件 for i in D中的所有特征： 计算用i划分子树后获得的信息增益 if 所有特征都没有大于零的信息增益： return #递回停止条件 被选择的特征 x = 具有最大信息增益的特征 for sub in 按照x划分子树后的数据集： build(sub) 衍生算法 ID3： 只能使用熵的信息增益处理离散特征的分类问题 取值高的属性，更容易使数据更纯，其信息增益更大 训练得到的是一棵庞大且深度浅的树 C4.5： 使用信息增益比的概念去除先选择多值特征的倾向 支持连续特征，在计算信息增益比之前首先将其离散化 在训练后检测训练集的正确分类比，并剪枝产生错误较多的叶子结点 CART算法： 使用基尼系数代替熵进行信息增益计算、只使用二叉树，并提供解决回归问题的能力 以最小化不纯度，而不是最大化信息增益 DecisionTreeClassifier超参数： criterion: gini, entropy max_depth min_samples_split min_samples_leaf max_leaf_nodes min_impurity_decrease 12345678910from sklearn import treeX = [[2000, 30, 400], [370, 130, 0], [3020, 120, 300]]Y = [1, 0, 1]clf = tree.DecisionTreeClassifier(criterion = "entropy")clf = clf.fit(X, Y)print(clf.predict([[4000, 6000, 0]]))print(clf.feature_importances_) [0] [0. 0. 1.] 树的可视化12345678910111213from IPython.display import display, Imageimport graphvizimport pydotplus as pdpdot_data = tree.export_graphviz(clf, out_file = None, feature_names = ["标签A","标签B","标签C"], class_names = ["分类A","分类B"], filled = True, rotate = False)# 要先用brew install graphvizgraph = pdp.graph_from_dot_data(dot_data)img = Image(graph.create_png()) 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战]]></content>
      <categories>
        <category>人工智能</category>
        <category>监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[朴素贝叶斯]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%2F58685%2F</url>
    <content type="text"><![CDATA[特性 基于概率，优点是可以对预测标签给出理论上完美的可能性估计 要求数据多维特征之间相互独立，因此在计算n维特征的联合分布时，才能简化成各自先验机率相乘 原理朴素贝叶斯是应用贝叶斯定理进行有监督学习的一种分类模型。在模型中，将贝叶斯定理公式 $P(A|B) = \frac{P(A)*P(B|A)}{P(B)}$ 中的事件A看成被分类标签，事件B看成数据特征。伪代码如下： for label in 所有标签: 用贝叶斯公式计算在给定特征情况下出现该label的后验机率 预测标签 &lt;= 获得最高后验机率的 label 由于实际上计算了所有标签的后验机率，所以贝叶斯分类不仅可以提供该组特征最可能的标签，还能给出其他的标签排序。 高斯朴素贝叶斯 假定所有特征都呈高斯分布 1234567891011121314151617181920212223242526from sklearn import datasetsiris = datasets.load_iris()from sklearn.naive_bayes import GaussianNBgnb = GaussianNB()gnb.fit(iris.data, iris.target)print("数据集大小")print(iris.data.shape)print(iris.target.shape)print("")print("察看模型的先验机率")print(gnb.class_prior_)print("")print("察看训练集标签数量")print(gnb.class_count_)print("")print("察看高斯模型期望值")print(gnb.theta_)print("")print("察看高斯模型方差")print(gnb.sigma_) 数据集大小 (150, 4) (150,) 察看模型的先验机率 [0.33333333 0.33333333 0.33333333] 察看训练集标签数量 [50. 50. 50.] 察看高斯模型期望值 [[5.006 3.428 1.462 0.246] [5.936 2.77 4.26 1.326] [6.588 2.974 5.552 2.026]] 察看高斯模型方差 [[0.121764 0.140816 0.029556 0.010884] [0.261104 0.0965 0.2164 0.038324] [0.396256 0.101924 0.298496 0.073924]] 伯努利朴素贝叶斯 每次实验只可能出现两种结果的事件概率分布，也称二值分布 123456789from sklearn.naive_bayes import BernoulliNBclf = BernoulliNB(binarize = 1)# 可以输入非二值特征，BernoulliNB内部会用阈值1将其转换为二值X = [[0.3, 0.2], [1.3, 1.2], [1.1, 1.2]]Y = [0, 1, 1]clf.fit(X, Y)clf.predict([[0.99, 0.99]]) array([0]) 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战]]></content>
      <categories>
        <category>人工智能</category>
        <category>监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[支持向量机]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%2F49110%2F</url>
    <content type="text"><![CDATA[特性 能适应”样本数少，特征维度高”的数据集 步骤基本原则 学习数据空间中的一个超平面达到二值分类目的，在普通线性可分问题中，符合分类要求的超平面会有无穷多个 尽可能找到最能平均分配两类数据中空白区域的超平面，亦即使得”与超平面距离最小的数据点的距离”最大化 平行于最优超平面(Optional Hyperplane)，且含括两类数据中最靠近超平面的点(此两数据点即为Support Vector)的超平面距离应越大越好 最优超平面到上述两超平面的距离应相等(此处距离即为间隔Margin) 当数据出现噪声 当数据出现噪声，Margin过低时会导致模型过拟合，此时应加入”软间隔(Soft Margin)”概念 要尽可能正确地分类训练数据(松弛因子超参数C大) Margin 要尽可能大(松弛因子超参数C小) 当数据在现有维度中找不到最优超平面 任何有限维度的非线性问题在更高维度的空间里总可以变化成线性可分问题 SVM使用拉格朗日乘子法(Lagrange Multiplier)实现对超平面求解问题的升维，不需真的升维，而是将求超平面参数的目标转换为用高维中数据点向量两两点积值求解的二次规划问题 核函数(Kernel Function)就是一种输入两个低维空间向量，返回高维空间点积的函数。一些常用的核函数如下： 线性核(Linear)：直接返回输入向量的点积，速度最快，因为实际上没有升维，适用于本身特征维度较高、样本数量很大的场景 多项式核(Polynomial)：其中超参数d是提升到的维度k(p,q)=(p*q+1)*d 高斯迳向基核(Gaussian Radial Basis Function)：应用最广泛，gamma值越大越容易过拟合k(p,q)=exp(-\gamma*||p-q||^2) Sigmoid核：k(p,q)=tanh(a*p\cdot q+r) SVM1234567891011from sklearn import svmx = [[0,0],[2,2]]y = [1,2]clf = svm.SVC(kernel = "rbf")clf.fit(x,y)t = [[2,1],[0,1]]print(clf.predict(t))print(clf.decision_function(t)) # 返回数据到超平面的距离，越大则分类可靠性越高 [2 1] [ 0.52444566 -0.52444566] 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战 SVM 原理详解，通俗易懂]]></content>
      <categories>
        <category>人工智能</category>
        <category>监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[梯度下降]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%2F45545%2F</url>
    <content type="text"><![CDATA[步骤 任取一点作为起始点 查看在当前节点向哪个方向移动能得到最小的z值，并向该方向移动 重复步骤直到找不到更小的z值 SGD的出现计算普通梯度下降时，每次都必须遍历所有样本，计算资源过大。SGD是每次采用单一或小批量样本的方差和作为损失值。 迭代次数虽变多，但每次迭代速度快，整体还是比较有效率达到最适点 由于数据存在噪声，不代表每次迭代都是正确的，但整体还是往最适点方向前进 由于是随机选取样本，有可能跨过local minimum，去到global minimum SGDRegressor12345678910111213from sklearn.linear_model import SGDRegressorx = [[0,0],[2,1],[5,4]]y = [0,2,2]reg = SGDRegressor(penalty = "l2", max_iter = 10000)# penalty: none, l1(Lasso,绝对值), l2(Ridge,平方), elasticent# max_iter防止连续抖动reg.fit(x,y)print(reg.predict([[4,3]]))print(reg.coef_)print(reg.intercept_) [1.97845294] [ 1.56550035 -1.47798393] [0.15040332] SGDClassifier1234clf = SGDRegressor(penalty = "l2", max_iter = 10000)clf.fit(x,y)print(clf.predict([[4,3]])) [1.97839971] 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战]]></content>
      <categories>
        <category>人工智能</category>
        <category>基础概念</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Scipy基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2FScipy%2F61322%2F</url>
    <content type="text"><![CDATA[数据物理常数1234567from scipy import constants # 圆周率print(C.pi)# 引力常数print(C.g) 3.141592653589793 9.80665 积分1234567891011from scipy import integrate# 定积分Y = lambda x: x**2+3print(integrate.quad(Y, -2, 4)) # (-2, 4)是上下限 # 返回值第二个是误差预估# 数值采样积分Y = lambda x: x**2+3x = np.linspace(-2, 4, 10)y = Y(x)print(integrate.trapz(y, x)) (42.0, 4.662936703425657e-13) 42.44444444444444 优化1234567from scipy import optimizeY = lambda x: x[0]**3 + x[1]**3 + np.cos(x[2]+1)x0 = np.zeros(4)res = optimize.minimize(Y, x0)print(res.x) #xprint(Y(res.x)) #y [0. 0. 2.14159739 0. ] -0.9999999999887697 拟合123456789from scipy import optimizedef func(x, a, b, c): return a * np.exp(-b * x) + cx = np.linspace(0, 4, 50)y = func(x, 1, 2, 3)popt, pcov = optimize.curve_fit(func, x, y)popt array([1., 2., 3.]) 方程式求解123456from scipy import optimizedef func(x): return [x[0]+x[1],x[0]+10]sol = optimize.root(func, [0, 0])sol.x array([-10., 10.]) 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战]]></content>
      <categories>
        <category>基本语法</category>
        <category>Scipy</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线性回归]]></title>
    <url>%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%2F%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%2F52662%2F</url>
    <content type="text"><![CDATA[创建数据123456def make_data(nDim): x0 = np.linspace(1, np.pi, 50) x = np.vstack([[x0,], [i**x0 for i in range(2, nDim+1)]]) y = np.sin(x0) + np.random.normal(0,0.15,len(x0)) return x.transpose(), y 最小二乘法 Ordinary Least Squares (OLS)目标函数： argmin(\sum_{}^{} {(\hat{y}-y)^2})不足：OLS为了更好的拟合数据，会使用较大的w值，进而导致过度拟合。 12345678910111213141516171819202122232425import matplotlib.pyplot as pltimport numpy as npfrom sklearn import linear_modeldims = [2, 6, 12, 24]plt.figure(figsize=(10, 10))for idx, i in enumerate(dims): plt.subplot(2, 2, idx+1) x, y = make_data(i) reg = linear_model.LinearRegression() reg.fit(x, y)# reg.intercept_# reg.coef_ plt.scatter(x[:, 0], y, marker = '*', color = 'r', label = 'samples') plt.plot(x[:, 0], [reg.predict([x[i, :]]) for i in range(len(y))], linestyle = '--', label = 'model') plt.legend(loc='upper right') plt.title('Dimensions: %s' %i, fontsize=19)plt.savefig("../img/2019-07-14_线性回归_1.png")plt.close() 岭回归 Ridge Regression (Tikhonov Regularization)目标函数： argmin(\sum_{}^{} {(\hat{y}-y)^2}+\alpha \sum_{}^{} {w^2})优化：为惩罚OLS每个w逐渐增加导致过度拟合的问题，新增的项为L2惩罚项(L2 Penalty)。特点：w有可能特别小的绝对值，但很难达成0，造成贡献很小的系数还是要放，影响性能。 12345678910111213141516171819202122232425import matplotlib.pyplot as pltimport numpy as npfrom sklearn import linear_modeldims = [2, 6, 12, 24]plt.figure(figsize=(10, 10))for idx, i in enumerate(dims): plt.subplot(2, 2, idx+1) x, y = make_data(i) reg = linear_model.Ridge(alpha = 100) reg.fit(x, y)# reg.intercept_# reg.coef_ plt.scatter(x[:, 0], y, marker = '*', color = 'r', label = 'samples') plt.plot(x[:, 0], [reg.predict([x[i, :]]) for i in range(len(y))], linestyle = '--', label = 'model') plt.legend(loc='upper right') plt.title('Dimensions: %s' %i, fontsize=19) plt.savefig("../img/2019-07-14_线性回归_2.png")plt.close() Lasso 回归目标函数： argmin(\sum_{}^{} {(\hat{y}-y)^2}+\alpha \sum_{}^{} {|w|})优化：为惩罚OLS每个w逐渐增加导致过度拟合的问题，新增的项为L1惩罚项(L1 Penalty)。特点：比L2惩罚项严厉很多，可以产生稀疏回归参数，即多数回归参数为零。 12345678910111213141516171819202122232425import matplotlib.pyplot as pltimport numpy as npfrom sklearn import linear_modeldims = [2, 6, 12, 24]plt.figure(figsize=(10, 10))for idx, i in enumerate(dims): plt.subplot(2, 2, idx+1) x, y = make_data(i) reg = linear_model.Lasso(alpha = 100) reg.fit(x, y)# reg.intercept_# reg.coef_ plt.scatter(x[:, 0], y, marker = '*', color = 'r', label = 'samples') plt.plot(x[:, 0], [reg.predict([x[i, :]]) for i in range(len(y))], linestyle = '--', label = 'model') plt.legend(loc='upper right') plt.title('Dimensions: %s' %i, fontsize=19)plt.savefig("../img/2019-07-14_线性回归_3.png")plt.close() 参考： 从机器学习到深度学习：基于Scikit-learn与TensorFlow的高效开发实战]]></content>
      <categories>
        <category>人工智能</category>
        <category>监督学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正則表達式]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%2F58780%2F</url>
    <content type="text"><![CDATA[re用法1234567891011121314151617181920212223242526import redef re_all(regex): log = 'Thu Mar 14 19:27:38 1991::jvfcho@iwrptlqmyok.edu::668950058-6-11\n' print(log) print("") print("===返回匹配的字符串（re.search().group()）===") print(re.search(regex,log).group()) print("") print("===列表返回匹配的所有子串(re.findall())===") print(re.findall(regex,log)) print("") print("===返回匹配开始的位置（re.search().start()）===") print(re.search(regex,log).start()) print("") print("===返回匹配结束的位置（re.search().end()）===") print(re.search(regex,log).end()) print("") print("===返回匹配位置（re.search().span()）===") print(re.search(regex,log).span()) print("") 匹配12regex = '(Mon|Tue|Wed|Thu|Fri|Sat|Sun)' # |是orre_all(regex) Thu Mar 14 19:27:38 1991::jvfcho@iwrptlqmyok.edu::668950058-6-11 ===返回匹配的字符串（re.search().group()）=== Thu ===列表返回匹配的所有子串(re.findall())=== [&#39;Thu&#39;] ===返回匹配开始的位置（re.search().start()）=== 0 ===返回匹配结束的位置（re.search().end()）=== 3 ===返回匹配位置（re.search().span()）=== (0, 3) 12regex = '([0-9]&#123;1,2&#125;):([0-9]&#123;1,2&#125;):([0-9]&#123;1,2&#125;).' # ()是子組，會依次返回; &#123;&#125;是幾個; *是無數個re_all(regex) Thu Mar 14 19:27:38 1991::jvfcho@iwrptlqmyok.edu::668950058-6-11 ===返回匹配的字符串（re.search().group()）=== 19:27:38 ===列表返回匹配的所有子串(re.findall())=== [(&#39;19&#39;, &#39;27&#39;, &#39;38&#39;)] ===返回匹配开始的位置（re.search().start()）=== 11 ===返回匹配结束的位置（re.search().end()）=== 20 ===返回匹配位置（re.search().span()）=== (11, 20) 12regex = '([a-z]*)@([a-z]*).(com|edu|net|org|gov)'re_all(regex) Thu Mar 14 19:27:38 1991::jvfcho@iwrptlqmyok.edu::668950058-6-11 ===返回匹配的字符串（re.search().group()）=== jvfcho@iwrptlqmyok.edu ===列表返回匹配的所有子串(re.findall())=== [(&#39;jvfcho&#39;, &#39;iwrptlqmyok&#39;, &#39;edu&#39;)] ===返回匹配开始的位置（re.search().start()）=== 26 ===返回匹配结束的位置（re.search().end()）=== 48 ===返回匹配位置（re.search().span()）=== (26, 48) 参考： 陈乾博客 qiuri2008博客]]></content>
      <categories>
        <category>基本语法</category>
        <category>数据处理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[链家网房源]]></title>
    <url>%2F%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%2F%E9%A1%B9%E7%9B%AE%2F38058%2F</url>
    <content type="text"><![CDATA[123import requestsimport timefrom bs4 import BeautifulSoup request设置列表页URL的固定部分1234url = 'http://bj.lianjia.com/ershoufang/'#设置页面页的可变部分page = ('pg') 设置请求头部信息1234567headers = &#123;'User-Agent':'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11','Accept':'text/html;q=0.9,*/*;q=0.8','Accept-Charset':'ISO-8859-1,utf-8;q=0.7,*;q=0.3','Accept-Encoding':'gzip','Connection':'close','Referer':'http://www.baidu.com/link?url=_andhfsjjjKRgEWkj7i9cFmYYGsisrnm2A-TN3XZDQXxvGsM9k9ZZSnikW2Yds4s&amp;amp;amp;wd=&amp;amp;amp;eqid=c3435a7d00146bd600000003582bfd1f'&#125; 循环抓取列表页信息1234567891011121314for i in range(1,2): if i == 1: i=str(i) a=(url+page+i+'/') r=requests.get(url=a,headers=headers) html=r.content else: i=str(i) a=(url+page+i+'/') r=requests.get(url=a,headers=headers) html2=r.content html = html + html2 #每次间隔1秒 time.sleep(1) 解析抓取的页面内容1lj=BeautifulSoup(html,'html.parser') 提取房源总价12345price=lj.find_all('div','priceInfo')tp=[]for a in price: totalPrice=a.span.string tp.append(totalPrice) 提取房源信息123456houseInfo=lj.find_all('div',attrs=&#123;'class':'houseInfo'&#125;) hi=[]for b in houseInfo: house=b.get_text() hi.append(house) 提取房源关注度123456followInfo=lj.find_all('div',attrs=&#123;'class':'followInfo'&#125;) fi=[]for c in followInfo: follow=c.get_text() fi.append(follow) DataFrame123import pandas as pdhouse=pd.DataFrame(&#123;'totalprice':tp,'houseinfo':hi,'followinfo':fi&#125;)house.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } totalprice houseinfo followinfo 0 268 农光东里 | 1室1厅 | 37.55平米 | 南 | 精装 150人关注 / 6天以前发布 1 381 平乐园小区 | 2室1厅 | 60.52平米 | 南 北 | 精装 135人关注 / 18天以前发布 2 570 科源小区 | 2室1厅 | 65.1平米 | 东 西 | 简装 70人关注 / 5个月以前发布 3 365 劲松南路 | 2室1厅 | 57.49平米 | 南 北 | 简装 97人关注 / 10天以前发布 4 688 大井胡同 | 1室1厅 | 38平米 | 南 | 精装 18人关注 / 12天以前发布 对房源信息进行分列12houseinfo_split = pd.DataFrame((x.split('|') for x in house.houseinfo),index=house.index,columns=['小区','户型','面积','朝向','装修'])houseinfo_split.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 小区 户型 面积 朝向 装修 0 农光东里 1室1厅 37.55平米 南 精装 1 平乐园小区 2室1厅 60.52平米 南 北 精装 2 科源小区 2室1厅 65.1平米 东 西 简装 3 劲松南路 2室1厅 57.49平米 南 北 简装 4 大井胡同 1室1厅 38平米 南 精装 将分列结果拼接回原数据表12house=pd.merge(house,houseinfo_split,right_index=True, left_index=True)house.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } totalprice houseinfo followinfo 小区 户型 面积 朝向 装修 0 268 农光东里 | 1室1厅 | 37.55平米 | 南 | 精装 150人关注 / 6天以前发布 农光东里 1室1厅 37.55平米 南 精装 1 381 平乐园小区 | 2室1厅 | 60.52平米 | 南 北 | 精装 135人关注 / 18天以前发布 平乐园小区 2室1厅 60.52平米 南 北 精装 2 570 科源小区 | 2室1厅 | 65.1平米 | 东 西 | 简装 70人关注 / 5个月以前发布 科源小区 2室1厅 65.1平米 东 西 简装 3 365 劲松南路 | 2室1厅 | 57.49平米 | 南 北 | 简装 97人关注 / 10天以前发布 劲松南路 2室1厅 57.49平米 南 北 简装 4 688 大井胡同 | 1室1厅 | 38平米 | 南 | 精装 18人关注 / 12天以前发布 大井胡同 1室1厅 38平米 南 精装 对房源关注度进行分列123followinfo_split = pd.DataFrame((x.split('/') for x in house.followinfo),index=house.index,columns=['guanzhu','fabu'])house=pd.merge(house,followinfo_split,right_index=True, left_index=True)house.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } totalprice houseinfo followinfo 小区 户型 面积 朝向 装修 guanzhu fabu 0 268 农光东里 | 1室1厅 | 37.55平米 | 南 | 精装 150人关注 / 6天以前发布 农光东里 1室1厅 37.55平米 南 精装 150人关注 6天以前发布 1 381 平乐园小区 | 2室1厅 | 60.52平米 | 南 北 | 精装 135人关注 / 18天以前发布 平乐园小区 2室1厅 60.52平米 南 北 精装 135人关注 18天以前发布 2 570 科源小区 | 2室1厅 | 65.1平米 | 东 西 | 简装 70人关注 / 5个月以前发布 科源小区 2室1厅 65.1平米 东 西 简装 70人关注 5个月以前发布 3 365 劲松南路 | 2室1厅 | 57.49平米 | 南 北 | 简装 97人关注 / 10天以前发布 劲松南路 2室1厅 57.49平米 南 北 简装 97人关注 10天以前发布 4 688 大井胡同 | 1室1厅 | 38平米 | 南 | 精装 18人关注 / 12天以前发布 大井胡同 1室1厅 38平米 南 精装 18人关注 12天以前发布 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>爬虫开发</category>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基本爬虫]]></title>
    <url>%2F%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%2FBeautifulSoup%2F51103%2F</url>
    <content type="text"><![CDATA[请求12import requestsresult = requests.get("https://news.163.com/") 12# 从返回result的状态码中，了解到是否请求成功result.status_code 200 1result.encoding &#39;GBK&#39; 12content = result.contentprint (content[:1000]) #前1000个字符 b&#39; &lt;!DOCTYPE HTML&gt;\n&lt;!--[if IE 6 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie6 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie7 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 8 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie8 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 9 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie9&quot;&gt; &lt;![endif]--&gt;\n&lt;!--[if (gte IE 10)|!(IE)]&gt;&lt;!--&gt; &lt;html id=&quot;ne_wrap&quot; phone=&quot;1&quot;&gt; &lt;!--&lt;![endif]--&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n&lt;meta name=&quot;model_url&quot; content=&quot;http://news.163.com/special/index2015/&quot; /&gt;\n&lt;title&gt;\xcd\xf8\xd2\xd7\xd0\xc2\xce\xc5&lt;/title&gt;\n&lt;base target=&quot;_blank&quot; /&gt;\n&lt;meta name=&quot;keywords&quot; content=&quot;\xd0\xc2\xce\xc5,\xd0\xc2\xce\xc5\xd6\xd0\xd0\xc4,\xd0\xc2\xce\xc5\xc6\xb5\xb5\xc0,\xca\xb1\xca\xc2\xb1\xa8\xb5\xc0&quot; /&gt;\n&lt;meta name=&quot;description&quot; content=&quot;\xd0\xc2\xce\xc5,\xd0\xc2\xce\xc5\xd6\xd0\xd0\xc4,\xb0\xfc\xba\xac\xd3\xd0\xca\xb1\xd5\xfe\xd0\xc2\xce\xc5,\xb9\xfa\xc4\xda\xd0\xc2\xce\xc5,\xb9\xfa\xbc\xca\xd0\xc2\xce\xc5,\xc9\xe7\xbb\xe1\xd0\xc2\xce\xc5,\xca\xb1\xca\xc2\xc6\xc0\xc2\xdb,\xd0\xc2\xce\xc5\xcd\xbc\xc6\xac,\xd0\xc2\xce\xc5\xd7\xa8\xcc\xe2,\xd0\xc2\xce\xc5\xc2\xdb\xcc\xb3,\xbe\xfc\xca\xc2,\xc0\xfa\xca\xb7,\xb5\xc4\xd7\xa8\xd2\xb5\xca\xb1\xca\xc2\xb1\xa8\xb5\xc0\xc3\xc5\xbb\xa7\xcd\xf8\xd5\xbe&quot; /&gt;\n &lt;script type=&quot;text/javascript&quot; _keep=&quot;true&quot;&gt;\n var matchStr =window.location.href;\n var reURL = /^(https):\\/\\/.+$/;\n if(!reURL.test(matchStr)){\n windo&#39; 模拟登入123456s = requests.session()data = &#123;'user':'用户名','passdw':'密码'&#125;#post 换成登录的地址，res=s.post('http://www.xxx.net/index.php?action=login',data);#换成抓取的地址s.get('http://www.xxx.net/archives/155/'); BeautifulSoup123456import warningswarnings.filterwarnings("ignore")from bs4 import BeautifulSoupsoup = BeautifulSoup(content, fromEncoding="GB2312") #注意这个地方print(soup) &lt;!DOCTYPE HTML&gt; &lt;!--[if IE 6 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie6 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;&lt;!--[if IE 7 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie7 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;&lt;!--[if IE 8 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie8 ne_ua_ielte8&quot;&gt; &lt;![endif]--&gt;&lt;!--[if IE 9 ]&gt; &lt;html id=&quot;ne_wrap&quot; class=&quot;ne_ua_ie9&quot;&gt; &lt;![endif]--&gt;&lt;!--[if (gte IE 10)|!(IE)]&gt;&lt;!--&gt;&lt;html id=&quot;ne_wrap&quot; phone=&quot;1&quot;&gt; &lt;!--&lt;![endif]--&gt; &lt;head&gt; &lt;meta content=&quot;text/html; charset=utf-8&quot; http-equiv=&quot;Content-Type&quot;/&gt; &lt;meta content=&quot;http://news.163.com/special/index2015/&quot; name=&quot;model_url&quot;/&gt; &lt;title&gt;网易新闻&lt;/title&gt; &lt;base target=&quot;_blank&quot;/&gt; &lt;meta content=&quot;新闻,新闻中心,新闻频道,时事报道&quot; name=&quot;keywords&quot;/&gt; &lt;meta content=&quot;新闻,新闻中心,包含有时政新闻,国内新闻,国际新闻,社会新闻,时事评论,新闻图片,新闻专题,新闻论坛,军事,历史,的专业时事报道门户网站&quot; name=&quot;description&quot;/&gt; &lt;script _keep=&quot;true&quot; type=&quot;text/javascript&quot;&gt; var matchStr =window.location.href; var reURL = /^(https):\/\/.+$/; if(!reURL.test(matchStr)){ window.location.href = &quot;https://news.163.com/&quot;; } &lt;/script&gt; &lt;!-- 适配3g ie8bug--&gt; &lt;!-- 广告样式 --&gt; &lt;style&gt; .channel_relative_2016{ position:relative; line-height: 0px; } .channel_relative_2016_lh{ line-height: 0px; } .channel_ad_2016{ height: 17px; display:none; background: rgba(0,0,0,0.6); background: #000\9; color: #fff; border-radius: 0 8px 0px 0px; line-height: 17px; width: 30px; text-align: left; overflow: hidden; font-size: 12px; font-family: Arial; position:absolute; left:0; bottom:0; z-index:3; } .channel_ad_text_2016{ position: absolute; right: 1px; bottom: -2px; color: #999999; z-index:3; font-size: 12px; font-family: Arial; display:none; line-height: 18px; } .channel_relative_2016 .channel_ad_2016,.channel_relative_2016 .channel_ad_text_2016{ display: inline-block; } &lt;/style&gt; &lt;!-- channel2019_logo样式 --&gt; &lt;style type=&quot;text/css&quot;&gt; .channel2019_logo{ background: url(http://cms-bucket.ws.126.net/2019/04/25/09e37a6a4dd349468cd38dd79a3b15b7.png) no-repeat !important; width: 152px !important; height: 37px !important; display: block !important; float: left!important; } /*新闻*/ .channel2019_news_logo{ background-position: 0px 4px !important; } /*科技*/ .channel2019_tech_logo{ background-position: 0px -96px !important; } /*手机*/ .channel2019_mobile_logo{ background-position: 0px -196px !important; } /*数码*/ .channel2019_digi_logo{ background-position: 0px -296px !important; } /*新闻学院*/ .channel2019_college_logo{ background-position: 0px -396px !important; width: 213px !important; } /*政务*/ .channel2019_gov_logo{ background-position: 0px -496px !important; } /*军事*/ .channel2019_war_logo{ background-position: 0px 0px !important; height: 33px !important; } /*航空*/ .channel2019_air_logo{ background-position: 0px 0px !important; height: 33px !important; } /*新闻排行榜*/ .channel2019_newsrank_logo{ background-position: 0px 0px !important; height: 33px !important; } /*新闻图片*/ .channel2019_newsphoto_logo{ background-position: 0px -2200px !important; width: 213px !important; height: 33px !important; } /*体育*/ .channel2019_sports_logo{ background-position: 0px -796px !important; } /*体育二级页*/ .channel2019_sportssub_logo{ height: 33px !important; background-position: 0px -800px !important; } /*娱乐*/ .channel2019_ent_logo{ background-position: 0px -896px !important; } /*音乐*/ .channel2019_music_logo{ background-position: 0px -900px !important; height: 32px !important; } /*时尚*/ .channel2019_fashion_logo{ background-position: 0px -1100px !important; height: 32px !important; } /*女人*/ .channel2019_lady_logo{ background-position: 0px -1196px !important; } /*财经*/ .channel2019_money_logo{ background-position: 0px -1300px !important; } /*手机图片*/ .channel2019_mobilephoto_logo{ background-position: 0px -2300px !important; width: 213px !important; height: 33px !important; } /*汽车*/ .channel2019_auto_logo{ background-position: 0px -1396px !important; } /*旅游*/ .channel2019_travel_logo{ background-position: 0px -1496px !important; } /*健康*/ .channel2019_jiankang_logo{ background-position: 0px -1596px !important; } /*教育*/ .channel2019_edu_logo{ background-position: 0px -1696px !important; } /*艺术*/ .channel2019_art_logo{ background-position: 0px -1796px !important; } /*亲子*/ .channel2019_baby_logo{ background-position: 0px -1896px !important; } /*双创*/ .channel2019_shuangchuang_logo{ background-position: 0px -1996px !important; } /*酒香*/ .channel2019_jiu_logo{ background-position: 0px -2096px !important; } /*游戏*/ .channel2019_game_logo{ background-position: 0px -2400px !important; } &lt;/style&gt; &lt;script _keep=&quot;true&quot; type=&quot;text/javascript&quot;&gt; (function() { if(/s=noRedirect/i.test(location.search)) return; if(/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) { try { if(/Android|Windows Phone|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) { window.location.href = &quot;https://3g.163.com/touch/news/&quot;; } else if(/iPad/i.test(navigator.userAgent)) { window.location.href = &quot;https://news.163.com/pad/&quot; } } catch(e) {} } })(); &lt;/script&gt; &lt;script _keep=&quot;true&quot; charset=&quot;gbk&quot; src=&quot;//news.163.com/special/00015CJL/xw_news_data.js&quot;&gt;&lt;/script&gt; &lt;!-- 社交传播统计 --&gt; &lt;script src=&quot;//static.ws.126.net/163/frontend/libs/antanalysis.min.js&quot;&gt;&lt;/script&gt; &lt;script _keep=&quot;true&quot; src=&quot;//static.ws.126.net/163/frontend/antnest/NTM-KFGT6I8U-38.js&quot;&gt;&lt;/script&gt; &lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://static.ws.126.net/163/frontend/libs/raven-3.26.2.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;https://static.ws.126.net/163/f2e/news/index2016_rmd/css/head~a2a2093f5d52d.css&quot; rel=&quot;stylesheet&quot;/&gt; &lt;/head&gt; &lt;body class=&quot;news_pc&quot; ne-class=&quot;{{myState.isNs9 ? 'ns9' : 'ns12'}}&quot; ne-module=&quot;/news/index2016_rmd/index2016.js&quot;&gt; &lt;div class=&quot;index2016_wrap&quot; id=&quot;index2016_wrap&quot;&gt; &lt;div&gt; &lt;!-- 节日动画 start --&gt; &lt;!-- 节日动画 end --&gt; &lt;div class=&quot;common_nav&quot;&gt; &lt;link href=&quot;//static.ws.126.net/163/f2e/commonnav2019/css/commonnav_headcss-61ce66f60e.css&quot; rel=&quot;stylesheet&quot;/&gt; &lt;!-- urs --&gt; &lt;script _keep=&quot;true&quot; src=&quot;//urswebzj.nosdn.127.net/webzj_cdn101/message.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;div class=&quot;ntes_nav_wrap&quot; id=&quot;js_N_NTES_wrap&quot;&gt; &lt;div class=&quot;ntes-nav&quot; id=&quot;js_N_nav&quot;&gt; &lt;div class=&quot;ntes-nav-main clearfix&quot;&gt; &lt;div class=&quot;c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-index-title ntes-nav-entry-wide c-fl&quot; href=&quot;http://www.163.com/&quot; title=&quot;网易首页&quot;&gt;网易首页&lt;/a&gt; &lt;!-- 应用 --&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select ntes-nav-select-wide ntes-nav-app c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-entry-bgblack JS_NTES_LOG_FE&quot; href=&quot;http://www.163.com/#f=topnav&quot;&gt;应用 &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://m.163.com/newsapp/#f=topnav&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-newsapp&quot;&gt;网易新闻&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://open.163.com/#f=topnav&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-open&quot;&gt;网易公开课&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://hongcai.163.com/?from=pcsy-button&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-hongcai&quot;&gt;网易红彩&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://u.163.com/aosoutbdbd8&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-yanxuan&quot;&gt;网易严选&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://mail.163.com/client/dl.html?from=mail46&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-mail&quot;&gt;邮箱大师&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://study.163.com/client/download.htm?from=163app&amp;amp;utm_source=163.com&amp;amp;utm_medium=web_app&amp;amp;utm_campaign=business&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-study&quot;&gt;网易云课堂&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece47f92c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=6b69bfbfac0db5f335232faa957a27bb&amp;amp;target=https%3A%2F%2Fapp.kaola.com%2F%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt; &lt;em class=&quot;ntes-nav-app-kaola-hg&quot;&gt;网易考拉&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;c-fr&quot;&gt; &lt;!-- 片段开始 --&gt; &lt;div class=&quot;ntes-nav-quick-navigation&quot;&gt; &lt;a class=&quot;ntes-nav-quick-navigation-btn&quot; href=&quot;javascript:void(0);&quot; id=&quot;js_N_ntes_nav_quick_navigation_btn&quot; target=&quot;_self&quot;&gt; &lt;em&gt;快速导航 &lt;span class=&quot;menu1&quot;&gt;&lt;/span&gt; &lt;span class=&quot;menu2&quot;&gt;&lt;/span&gt; &lt;span class=&quot;menu3&quot;&gt;&lt;/span&gt; &lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;ntes-quicknav-pop&quot; id=&quot;js_N_ntes_quicknav_pop&quot;&gt; &lt;div class=&quot;ntes-quicknav-list&quot;&gt; &lt;div class=&quot;ntes-quicknav-content&quot;&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-1&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;https://news.163.com&quot;&gt;新闻&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/domestic&quot;&gt;国内&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/world&quot;&gt;国际&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/photo&quot;&gt;图片&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://view.163.com&quot;&gt;评论&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://discovery.163.com&quot;&gt;探索&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://war.163.com&quot;&gt;军事&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/localnews/&quot;&gt;本地新闻&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/special/wangsansanhome/&quot;&gt;王三三&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-2&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://sports.163.com&quot;&gt;体育&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/nba&quot;&gt;NBA&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/cba&quot;&gt;CBA&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/allsports&quot;&gt;综合&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/zc&quot;&gt;中超&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/world&quot;&gt;国际足球&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/yc&quot;&gt;英超&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/xj&quot;&gt;西甲&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sports.163.com/yj&quot;&gt;意甲&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-3&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://ent.163.com&quot;&gt;娱乐&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/star&quot;&gt;明星&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/photo&quot;&gt;图片&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/movie&quot;&gt;电影&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/tv&quot;&gt;电视&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/music&quot;&gt;音乐&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/special/gsbjb/&quot;&gt;稿事编辑部&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ent.163.com/special/focus_ent/&quot;&gt;娱乐FOCUS&lt;/a&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://ent.163.com/special/xbkhz/&quot;&gt;星捕快&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-4&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://money.163.com&quot;&gt;财经&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/stock&quot;&gt;股票&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://quotes.money.163.com/stock&quot;&gt;行情&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/chanjing&quot;&gt;产经&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/ipo&quot;&gt;新股&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/finance&quot;&gt;金融&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/fund&quot;&gt;基金&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://biz.163.com&quot;&gt;商业&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://money.163.com/licai&quot;&gt;理财&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-5&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://auto.163.com&quot;&gt;汽车&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://auto.163.com/buy&quot;&gt;购车&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://auto.163.com/depreciate&quot;&gt;行情&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://product.auto.163.com/finder&quot;&gt;选车&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://product.auto.163.com&quot;&gt;车型库&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://auto.163.com/news&quot;&gt;行业&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://auto.163.com/chezhu&quot;&gt;用车&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://auto.163.com/photo&quot;&gt;汽车图片&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-6&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://tech.163.com&quot;&gt;科技&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/telecom/&quot;&gt;通信&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/it&quot;&gt;IT&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/internet&quot;&gt;互联网&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/special/ydhlw&quot;&gt;移动互联网&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/special/chzt&quot;&gt;特别策划&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/special/wudaokou&quot;&gt;五道口沙龙&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/special/yyzd&quot;&gt;易语中的&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://tech.163.com/special&quot;&gt;专题&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-7&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://lady.163.com&quot;&gt;女人&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://baby.163.com&quot;&gt;亲子&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://fashion.163.com/art&quot;&gt;艺术&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://fashion.163.com&quot;&gt;时尚&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://shoucang.163.com&quot;&gt;收藏&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://lady.163.com/sense&quot;&gt;情感&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://lady.163.com/astro&quot;&gt;星座&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://lady.163.com/beauty&quot;&gt;美容&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://cosmetic.lady.163.com/trial&quot;&gt;免费试用&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-8&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://mobile.163.com&quot;&gt;手机&lt;/a&gt;&lt;span&gt;/&lt;/span&gt;&lt;a href=&quot;http://digi.163.com/&quot;&gt;数码&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://mobile.163.com/mi&quot;&gt;移动&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://digi.163.com/pc&quot;&gt;电脑&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://product.mobile.163.com&quot;&gt;手机库&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://hea.163.com/&quot;&gt;家电&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://digi.163.com/smart&quot;&gt;智能硬件&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://digi.163.com/dc&quot;&gt;相机&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://v.mobile.163.com&quot;&gt;手机视频&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-9&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://house.163.com&quot;&gt;房产&lt;/a&gt;&lt;span&gt;/&lt;/span&gt;&lt;a href=&quot;http://home.163.com&quot;&gt;家居&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://bj.house.163.com&quot;&gt;北京房产&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://sh.house.163.com&quot;&gt;上海房产&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://gz.house.163.com&quot;&gt;广州房产&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://house.163.com/city&quot;&gt;全部分站&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://xf.house.163.com&quot;&gt;楼盘库&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://home.163.com/jiaju/&quot;&gt;家具&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://home.163.com/weiyu/&quot;&gt;卫浴&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://home.163.com/special/jiajuyigui&quot;&gt;衣柜&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-10&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://travel.163.com&quot;&gt;旅游&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://travel.163.com/outdoor&quot;&gt;户外&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://guizhou.travel.163.com&quot;&gt;贵州&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://travel.163.com/food&quot;&gt;美食&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://jingdian.travel.163.com/domestic/1000066937&quot;&gt;四川&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://jingdian.travel.163.com&quot;&gt;景点&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://jingdian.travel.163.com/domestic/1000066944&quot;&gt;新疆&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://travel.163.com/special/travellist/#f=endnav&quot;&gt;专题&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://jingdian.travel.163.com/domestic/1000066926/#f=endnav&quot;&gt;西藏&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;ntes-quicknav-column ntes-quicknav-column-11&quot;&gt; &lt;li&gt; &lt;h3&gt;&lt;a href=&quot;http://edu.163.com&quot;&gt;教育&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/yimin&quot;&gt;移民&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/kaoyan&quot;&gt;考研&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/liuxue&quot;&gt;留学&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/special/official&quot;&gt;公务员&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/en&quot;&gt;外语&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://kids.163.com&quot;&gt;中小学&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://edu.163.com/gaokao&quot;&gt;高考&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://daxue.163.com&quot;&gt;校园&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;ntes-nav-sitemap&quot;&gt;&lt;a href=&quot;http://sitemap.163.com/&quot;&gt;&lt;i&gt;&lt;/i&gt;查看网易地图&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;c-fr&quot;&gt; &lt;div class=&quot;c-fl&quot; id=&quot;js_N_navLoginBefore&quot;&gt; &lt;div class=&quot;js_loginframe ntes-nav-login ntes-nav-login-normal&quot; id=&quot;js_N_navHighlight&quot;&gt; &lt;a class=&quot;ntes-nav-login-title&quot; href=&quot;http://reg.163.com/&quot; id=&quot;js_N_nav_login_title&quot;&gt;登录&lt;/a&gt; &lt;div class=&quot;ntes-nav-loginframe-pop&quot; id=&quot;js_N_login_wrap&quot;&gt; &lt;!--加载登陆组件--&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select ntes-nav-select-wide JS_NTES_LOG_FE c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-register&quot; href=&quot;http://reg.email.163.com/mailregAll/reg0.jsp?from=163navi&amp;amp;regPage=163&quot;&gt;注册免费邮箱 &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot; style=&quot;width:210px;&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://reg.vip.163.com/register.m?from=topnav&quot;&gt; &lt;span style=&quot;width:190px;&quot;&gt;注册VIP邮箱（特权邮箱，付费）&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last JS_NTES_LOG_FE&quot;&gt; &lt;a href=&quot;http://mail.163.com/client/dl.html?from=mail46&quot;&gt; &lt;span style=&quot;width:190px;&quot;&gt;免费下载网易官方手机邮箱应用&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;c-fl&quot; id=&quot;js_N_navLoginAfter&quot; style=&quot;display:none&quot;&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select ntes-nav-logined JS_NTES_LOG_FE&quot; id=&quot;js_N_logined_warp&quot;&gt; &lt;span class=&quot;ntes-nav-select-title ntes-nav-logined-userinfo&quot;&gt; &lt;span class=&quot;ntes-nav-logined-username&quot; id=&quot;js_N_navUsername&quot;&gt;&lt;/span&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;/span&gt; &lt;div class=&quot;ntes-nav-select-pop&quot; id=&quot;js_login_suggest_wrap&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot; id=&quot;js_logined_suggest&quot;&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;a class=&quot;ntes-nav-entry-wide c-fl&quot; id=&quot;js_N_navLogout&quot; target=&quot;_self&quot;&gt;安全退出&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul class=&quot;ntes-nav-inside&quot;&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-mobile-title ntes-nav-entry-bgblack&quot; href=&quot;http://www.163.com/newsapp/#f=163nav&quot;&gt; &lt;em class=&quot;ntes-nav-entry-mobile&quot;&gt;移动端&lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;qrcode-img&quot;&gt; &lt;a href=&quot;http://www.163.com/newsapp/#f=163nav&quot;&gt; &lt;img src=&quot;//static.ws.126.net/f2e/include/common_nav/images/topapp.jpg&quot;/&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-huatian ntes-nav-entry-bgblack&quot; href=&quot;https://open.163.com/&quot; id=&quot;js_love_url&quot;&gt; &lt;em class=&quot;ntes-nav-entry-huatian&quot;&gt;网易公开课&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;span class=&quot;ntes-nav-msg&quot;&gt; &lt;em class=&quot;ntes-nav-msg-num&quot;&gt;&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-huatian&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;https://vip.open.163.com&quot;&gt; &lt;span&gt;付费精品&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://open.163.com/ted/&quot;&gt; &lt;span&gt;TED&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://open.163.com/ocw/&quot;&gt; &lt;span&gt;国际名校公开课&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://open.163.com/cuvocw/&quot;&gt; &lt;span&gt;中国大学视频公开课&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://open.163.com/appreciation&quot;&gt; &lt;span&gt;赏课&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://open.163.com/khan/&quot;&gt; &lt;span&gt;可汗学院&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://open.163.com/special/appdownload_pc/&quot;&gt; &lt;span&gt;下载公开课&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-kaola ntes-nav-entry-bgblack&quot; href=&quot;http://da.kaola.com/redirect?t=5aaebece48792c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=d638f275b1755320e845734e53e897ee&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fjfccri80pages1.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot; id=&quot;js_kaola_url&quot;&gt; &lt;em class=&quot;ntes-nav-entry-kaola&quot;&gt;网易考拉&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;span class=&quot;ntes-nav-msg ntes-nav-kaola-msg&quot; id=&quot;js_N_navKaolaMsg&quot;&gt; &lt;em class=&quot;ntes-nav-msg-num&quot;&gt;&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-kaola&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece48f92c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=b3e224752b2cad85e9831e8c6cf7fbbd&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fbimaibangdan.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;1000元新人大礼包&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece49392c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=fd8e43f4a20a26fbe60f7e7de1f17efe&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fjfccri80pages1.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;新人专享进口好货&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece49392c01&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=21bcd5b595fc235cfd11e3e1cff14177&amp;amp;target=https%3A%2F%2Factivity.kaola.com%2Factivity%2FflashSaleIndex%2Fshow.html%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;今日限时抢购&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece49792c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=ecc40777cb2d68a3d9fb078b232f081d&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fjfyrzolcpagerz.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;营养保健&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece49b92c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=0cdd5a920c768340ffc12eccd659341d&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fnewpc.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;个人洗护&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece4a392c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=ee49a3a793f22e648ac616f5dab061dd&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fjpwmb9zcpagesl.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;美容彩妆&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece4a792c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=6eb2598fd20963efc203a4e3fe88f4e2&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fmyxrq.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;母婴儿童&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece4ab92c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=3946ce460ba655c11afac69855dfc02b&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Ffoodnewcustomers.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;环球美食&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece4af92c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=2eee7290051863737a434d44f3c0d46f&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fnewtalent.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;家居生活&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-lofter ntes-nav-entry-bgblack&quot; href=&quot;http://you.163.com/?from=web_fc_menhu_xinrukou_1&quot; id=&quot;js_lofter_icon_url&quot;&gt; &lt;em class=&quot;ntes-nav-entry-lofter&quot;&gt;网易严选&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;span class=&quot;ntes-nav-msg&quot; id=&quot;js_N_navLofterMsg&quot;&gt; &lt;em class=&quot;ntes-nav-msg-num&quot;&gt;&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-lofter&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot; id=&quot;js_lofter_pop_url&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/act/static/Fb2d1OZ714.html?from=web_fc_menhu_xinrukou_1&quot;&gt; &lt;span&gt;888元现金券&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/manufacturer/list?from=web_fc_menhu_xinrukou_3&quot;&gt; &lt;span&gt;品牌制造商爆款&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/item/recommend?from=web_fc_menhu_xinrukou_4&quot;&gt; &lt;span&gt;999+人气好评品&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/flashSale/index?from=web_fc_menhu_xinrukou_5&quot;&gt; &lt;span&gt;限时特惠&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/item/list?categoryId=1005000&amp;amp;from=web_fc_menhu_xinrukou_7&quot;&gt; &lt;span&gt;居家床品&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/item/list?categoryId=1005001&amp;amp;from=web_fc_menhu_xinrukou_8&quot;&gt; &lt;span&gt;精致餐厨&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/item/list?categoryId=1008000&amp;amp;from=web_fc_menhu_xinrukou_9&quot;&gt; &lt;span&gt;箱包鞋类&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com/item/list?categoryId=1010000&amp;amp;from=web_fc_menhu_xinrukou_10&quot;&gt; &lt;span&gt;经典服饰&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://you.163.com/item/list?categoryId=1005002&amp;amp;from=web_fc_menhu_xinrukou_11&quot;&gt; &lt;span&gt;健康美食&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-money ntes-nav-entry-bgblack&quot; href=&quot;http://pay.163.com/&quot;&gt; &lt;em class=&quot;ntes-nav-entry-money&quot;&gt;支付&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-temp&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://pay.163.com/#f=topnav&quot;&gt; &lt;span&gt;一卡通充值&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://ecard.163.com/script/index#f=topnav&quot;&gt; &lt;span&gt;一卡通购买&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://k.163.com/?product=163&amp;amp;trackid=01&quot;&gt; &lt;span&gt;网易白金卡&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://epay.163.com/&quot;&gt; &lt;span&gt;我的网易支付&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://3c.163.com/?from=wangyimenhu16&quot;&gt; &lt;span&gt;网易智造&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://lq.163.com?from=neteasemoney&quot;&gt; &lt;span&gt;网易来钱-借现金&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-cart ntes-nav-entry-bgblack&quot; href=&quot;http://baoxian.163.com/car/?from=mhgwc&quot;&gt; &lt;em class=&quot;ntes-nav-entry-cart&quot;&gt;电商&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-temp&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://you.163.com?from=web_in_wydaohang&quot;&gt; &lt;span&gt;严选&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://lq.163.com?from=neteasebuy&quot;&gt; &lt;span&gt;我要借钱&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://da.kaola.com/redirect?t=5aaebece4b392c00&amp;amp;p=c901ea7c&amp;amp;proId=1024&amp;amp;code=d15f8f9d72ccc507aeefda91b43c0cd2&amp;amp;target=https%3A%2F%2Fpages.kaola.com%2Fpages%2Factivity%2Fjfccri80pages1.shtml%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt; &lt;span&gt;网易考拉&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;div class=&quot;js_N_navSelect ntes-nav-select c-fl&quot;&gt; &lt;a class=&quot;ntes-nav-select-title ntes-nav-select-title-mail ntes-nav-entry-bgblack&quot; id=&quot;js_mail_url&quot;&gt; &lt;em class=&quot;ntes-nav-entry-mail&quot;&gt;邮箱&lt;/em&gt; &lt;em class=&quot;ntes-nav-select-arr&quot;&gt;&lt;/em&gt; &lt;span class=&quot;ntes-nav-msg&quot; id=&quot;js_N_navMailMsg&quot;&gt; &lt;em class=&quot;ntes-nav-msg-num&quot; id=&quot;js_N_navMailMsgNum&quot;&gt;&lt;/em&gt; &lt;/span&gt; &lt;/a&gt; &lt;div class=&quot;ntes-nav-select-pop ntes-nav-select-pop-mail&quot;&gt; &lt;ul class=&quot;ntes-nav-select-list clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://email.163.com/#f=topnav&quot;&gt; &lt;span&gt;免费邮箱&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://vipmail.163.com/#f=topnav&quot;&gt; &lt;span&gt;VIP邮箱&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://qiye.163.com/#f=topnav&quot;&gt; &lt;span&gt;企业邮箱&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://reg.email.163.com/mailregAll/reg0.jsp?from=ntes_nav&amp;amp;regPage=163&quot;&gt; &lt;span&gt;免费注册&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://reg.email.163.com/unireg/call.do?cmd=register.entrance&amp;amp;flow=mobile&amp;amp;from=ntes_nav&quot;&gt; &lt;span&gt;快速注册&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;last&quot;&gt; &lt;a href=&quot;http://mail.163.com/dashi/dlpro.html?from=mail46&quot;&gt; &lt;span&gt;客户端下载&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;//static.ws.126.net/163/f2e/commonnav2019/js/commonnav_headjs-2f356198e6.js&quot;&gt;&lt;/script&gt; &lt;/div&gt; &lt;!-- 节日背景 --&gt; &lt;div class=&quot;ns-bg-wrap&quot;&gt; &lt;div class=&quot;N-nav-channel JS_NTES_LOG_FE&quot; data-module-name=&quot;xwwzy_11_headdaohang&quot;&gt; &lt;a class=&quot;first&quot; href=&quot;https://news.163.com/&quot;&gt;新闻&lt;/a&gt;&lt;a href=&quot;http://sports.163.com/&quot;&gt;体育&lt;/a&gt;&lt;a href=&quot;http://sports.163.com/nba/&quot;&gt;NBA&lt;/a&gt;&lt;a href=&quot;http://ent.163.com/&quot;&gt;娱乐&lt;/a&gt;&lt;a href=&quot;http://money.163.com/&quot;&gt;财经&lt;/a&gt;&lt;a href=&quot;http://money.163.com/stock/&quot;&gt;股票&lt;/a&gt;&lt;a href=&quot;http://auto.163.com/&quot; id=&quot;_link_auto&quot;&gt;汽车&lt;/a&gt;&lt;a href=&quot;http://tech.163.com/&quot;&gt;科技&lt;/a&gt;&lt;a href=&quot;http://mobile.163.com/&quot;&gt;手机&lt;/a&gt;&lt;a href=&quot;http://digi.163.com/&quot;&gt;数码&lt;/a&gt;&lt;a href=&quot;http://lady.163.com/&quot;&gt;女人&lt;/a&gt;&lt;a href=&quot;http://v.163.com/&quot;&gt;直播&lt;/a&gt;&lt;a href=&quot;http://v.163.com/special/video/#tuijian&quot;&gt;视频&lt;/a&gt;&lt;a href=&quot;http://travel.163.com/&quot;&gt;旅游&lt;/a&gt;&lt;a href=&quot;http://house.163.com/&quot; id=&quot;houseUrl&quot;&gt;房产&lt;/a&gt;&lt;a href=&quot;http://home.163.com/&quot; id=&quot;homeUrl&quot;&gt;家居&lt;/a&gt;&lt;a href=&quot;http://edu.163.com/&quot;&gt;教育&lt;/a&gt;&lt;a href=&quot;http://book.163.com/&quot;&gt;读书&lt;/a&gt;&lt;a href=&quot;https://news.163.com/&quot; id=&quot;_link_game&quot;&gt;本地&lt;/a&gt;&lt;a href=&quot;http://jiankang.163.com/&quot;&gt;健康&lt;/a&gt;&lt;a href=&quot;http://rd.da.netease.com/redirect?t=5802fb18cf033c80&amp;amp;p=e17af55c&amp;amp;proId=1024&amp;amp;target=https%3A%2F%2Fwww.kaola.com%2F%3Ftag%3Dbe3d8d027a530881037ef01d304eb505&quot;&gt;海淘&lt;/a&gt;&lt;a class=&quot;last&quot; href=&quot;http://art.163.com/&quot;&gt;艺术&lt;/a&gt; &lt;/div&gt; &lt;!-- 游戏替换为本地，并定向 0310--&gt; &lt;!-- 配置定向城市 --&gt; &lt;script _keep=&quot;true&quot; type=&quot;text/javascript&quot;&gt; var HouseNavBendiTxt = { &quot;province&quot;: [ { &quot;name&quot;: &quot;北京市&quot;, &quot;shortName&quot;: &quot;北京&quot;, &quot;url&quot;:&quot;http://bj.news.163.com/&quot; }, { &quot;name&quot;: &quot;上海市&quot;, &quot;shortName&quot;: &quot;上海&quot;, &quot;url&quot;:&quot;http://sh.news.163.com/&quot; }, { &quot;name&quot;: &quot;天津市&quot;, &quot;shortName&quot;: &quot;天津&quot;, &quot;url&quot;:&quot;http://tj.news.163.com/&quot; }, { &quot;name&quot;: &quot;广东省&quot;, &quot;shortName&quot;: &quot;广东&quot;, &quot;url&quot;:&quot;http://gd.news.163.com/&quot; }, { &quot;name&quot;: &quot;江苏省&quot;, &quot;shortName&quot;: &quot;江苏&quot;, &quot;url&quot;:&quot;http://js.news.163.com/&quot; }, { &quot;name&quot;: &quot;浙江省&quot;, &quot;shortName&quot;: &quot;浙江&quot;, &quot;url&quot;:&quot;http://zj.news.163.com/&quot; }, { &quot;name&quot;: &quot;四川省&quot;, &quot;shortName&quot;: &quot;四川&quot;, &quot;url&quot;:&quot;http://sc.news.163.com/&quot; }, { &quot;name&quot;: &quot;黑龙江省&quot;, &quot;shortName&quot;: &quot;黑龙江&quot;, &quot;url&quot;:&quot;http://hlj.news.163.com/&quot; }, { &quot;name&quot;: &quot;吉林省&quot;, &quot;shortName&quot;: &quot;吉林&quot;, &quot;url&quot;:&quot;http://jl.news.163.com/&quot; }, { &quot;name&quot;: &quot;辽宁省&quot;, &quot;shortName&quot;: &quot;辽宁&quot;, &quot;url&quot;:&quot;http://liaoning.news.163.com/&quot; }, { &quot;name&quot;: &quot;内蒙古自治区&quot;, &quot;shortName&quot;: &quot;内蒙古&quot;, &quot;url&quot;:&quot;http://hhht.news.163.com/&quot; }, { &quot;name&quot;: &quot;河北省&quot;, &quot;shortName&quot;: &quot;河北&quot;, &quot;url&quot;:&quot;http://hebei.news.163.com/&quot; }, { &quot;name&quot;: &quot;河南省&quot;, &quot;shortName&quot;: &quot;河南&quot;, &quot;url&quot;:&quot;http://henan.163.com/&quot; }, { &quot;name&quot;: &quot;山东省&quot;, &quot;shortName&quot;: &quot;山东&quot;, &quot;url&quot;:&quot;http://sd.news.163.com/&quot; }, { &quot;name&quot;: &quot;陕西省&quot;, &quot;shortName&quot;: &quot;陕西&quot;, &quot;url&quot;:&quot;http://shanxi.news.163.com/&quot; }, { &quot;name&quot;: &quot;甘肃省&quot;, &quot;shortName&quot;: &quot;甘肃&quot;, &quot;url&quot;:&quot;http://gs.news.163.com/&quot; }, { &quot;name&quot;: &quot;宁夏回族自治区&quot;, &quot;shortName&quot;: &quot;宁夏&quot;, &quot;url&quot;:&quot;http://ningxia.news.163.com/&quot; }, { &quot;name&quot;: &quot;新疆维吾尔自治区&quot;, &quot;shortName&quot;: &quot;新疆&quot;, &quot;url&quot;:&quot;http://xj.news.163.com/&quot; }, { &quot;name&quot;: &quot;安徽省&quot;, &quot;shortName&quot;: &quot;安徽&quot;, &quot;url&quot;:&quot;http://ah.news.163.com/&quot; }, { &quot;name&quot;: &quot;福建省&quot;, &quot;shortName&quot;: &quot;福建&quot;, &quot;url&quot;:&quot;http://fj.news.163.com/&quot; }, { &quot;name&quot;: &quot;广西壮族自治区&quot;, &quot;shortName&quot;: &quot;广西&quot;, &quot;url&quot;:&quot;http://gx.news.163.com/&quot; }, { &quot;name&quot;: &quot;重庆市&quot;, &quot;shortName&quot;: &quot;重庆&quot;, &quot;url&quot;:&quot;http://chongqing.163.com/&quot; }, { &quot;name&quot;: &quot;湖北省&quot;, &quot;shortName&quot;: &quot;湖北&quot;, &quot;url&quot;:&quot;http://hb.news.163.com/&quot; }, { &quot;name&quot;: &quot;江西省&quot;, &quot;shortName&quot;: &quot;江西&quot;, &quot;url&quot;:&quot;http://jx.news.163.com/&quot; }, { &quot;name&quot;: &quot;海南省&quot;, &quot;shortName&quot;: &quot;海南&quot;, &quot;url&quot;:&quot;http://hn.news.163.com/&quot; }, { &quot;name&quot;: &quot;贵州省&quot;, &quot;shortName&quot;: &quot;贵州&quot;, &quot;url&quot;:&quot;http://gz.news.163.com/&quot; }, { &quot;name&quot;: &quot;云南省&quot;, &quot;shortName&quot;: &quot;云南&quot;, &quot;url&quot;:&quot;http://yn.news.163.com/&quot; }, { &quot;name&quot;: &quot;湖南省&quot;, &quot;shortName&quot;: &quot;上海&quot;, &quot;url&quot;:&quot;http://sh.news.163.com/&quot; }, { &quot;name&quot;: &quot;山西省&quot;, &quot;shortName&quot;: &quot;山西&quot;, &quot;url&quot;:&quot;http://sx.news.163.com&quot; }, { &quot;name&quot;: &quot;西藏自治区&quot;, &quot;shortName&quot;: &quot;北京&quot;, &quot;url&quot;:&quot;http://bj.news.163.com/&quot; }, { &quot;name&quot;: &quot;香港特别行政区&quot;, &quot;shortName&quot;: &quot;广东&quot;, &quot;url&quot;:&quot;http://gd.news.163.com/&quot; }, { &quot;name&quot;: &quot;澳门特别行政区&quot;, &quot;shortName&quot;: &quot;广东&quot;, &quot;url&quot;:&quot;http://gd.news.163.com/&quot; }, { &quot;name&quot;: &quot;台湾省&quot;, &quot;shortName&quot;: &quot;广东&quot;, &quot;url&quot;:&quot;http://gd.news.163.com/&quot; }, { &quot;name&quot;: &quot;天津市&quot;, &quot;shortName&quot;: &quot;北京&quot;, &quot;url&quot;:&quot;http://bj.news.163.com/&quot; }, { &quot;name&quot;: &quot;青海省&quot;, &quot;shortName&quot;: &quot;北京&quot;, &quot;url&quot;:&quot;http://bj.news.163.com/&quot; } ], &quot;city&quot;: [ { &quot;name&quot;: &quot;大连市&quot;, &quot;shortName&quot;: &quot;大连&quot;, &quot;url&quot;:&quot;http://dl.news.163.com&quot; }, { &quot;name&quot;: &quot;青岛市&quot;, &quot;shortName&quot;: &quot;青岛&quot;, &quot;url&quot;:&quot;http://qingdao.news.163.com&quot; }, { &quot;name&quot;: &quot;宁波市&quot;, &quot;shortName&quot;: &quot;宁波&quot;, &quot;url&quot;:&quot;http://ningbo.news.163.com&quot; }, { &quot;name&quot;: &quot;厦门市&quot;, &quot;shortName&quot;: &quot;厦门&quot;, &quot;url&quot;:&quot;http://xiamen.news.163.com&quot; }, { &quot;name&quot;: &quot;深圳市&quot;, &quot;shortName&quot;: &quot;深圳&quot;, &quot;url&quot;:&quot;http://shenzhen.news.163.com/&quot; } ], &quot;defalt&quot;: { &quot;name&quot;: &quot;&quot;, &quot;shortName&quot;: &quot;本地&quot;, &quot;url&quot;:&quot;http://news.163.com/&quot; } }; &lt;/script&gt; &lt;script _keep=&quot;true&quot; type=&quot;text/javascript&quot;&gt; //本地设置定向省份 function setBendiName(){ var js_nav_bendi = document.getElementById(&quot;_link_game&quot;); var cityname = &quot;&quot;; var cityurl = &quot;&quot;; var _loc = window.localAddress; if(!js_nav_bendi) return; if(HouseNavBendiTxt.city &amp;&amp; _loc){ var citylist = HouseNavBendiTxt.city; var localcity = _loc.city; for(var i=0;i&lt;citylist.length;i++){ if(citylist[i].name == localcity){ cityname = citylist[i].shortName; cityurl = citylist[i].url; break; } } } if(cityname == &quot;&quot; &amp;&amp; cityurl == &quot;&quot; &amp;&amp; HouseNavBendiTxt.province &amp;&amp; _loc){ var provincelist = HouseNavBendiTxt.province; var localprovince = _loc.province; for(var i=0;i&lt;provincelist.length;i++){ if(provincelist[i].name == localprovince){ cityname = provincelist[i].shortName; cityurl = provincelist[i].url; break; } } } if(js_nav_bendi &amp;&amp; cityname != &quot;&quot; &amp;&amp; cityurl != &quot;&quot;){ js_nav_bendi.innerHTML = cityname; js_nav_bendi.href = cityurl; } if(js_nav_bendi &amp;&amp; cityname == &quot;&quot; &amp;&amp; cityurl == &quot;&quot;){ js_nav_bendi.innerHTML = &quot;本地&quot;; js_nav_bendi.href = &quot;http://news.163.com&quot;; } } function BENDI_NAV_CALLBACK(data){ if(data &amp;&amp; data.result){ if(window.HouseNavBendiTxt){ window.localAddress = data.result; setBendiName(); } } }; if(window.localAddress){ if(window.HouseNavBendiTxt){ setBendiName(); } }else{ var url = &quot;//ipservice.163.com/locate/api/getLocByIp?key=C6E22B7D480E3312C74EC7EF013E50C5&amp;callback=BENDI_NAV_CALLBACK&quot;; var script = document.createElement(&#39;script&#39;); script.setAttribute(&#39;src&#39;, url); document.getElementsByTagName(&#39;head&#39;)[0].appendChild(script); } &lt;/script&gt; &lt;div class=&quot;index2016_content&quot;&gt; &lt;!-- 头部广告 开始--&gt; &lt;div class=&quot;ns_area index_top_ad channel_relative_2016&quot;&gt; &lt;!--16新闻首页顶通--&gt; &lt;div adtype=&quot;topColumnAd&quot; class=&quot;at_item common_ad_item top_ad_column&quot; requesturl=&quot;https://nex.163.com/q?app=7BE0FC82&amp;amp;c=news&amp;amp;l=11&amp;amp;site=netease&amp;amp;affiliate=news&amp;amp;cat=homepage&amp;amp;type=column1200x125_960x100&amp;amp;location=10&quot;&gt;&lt;/div&gt; &lt;span class=&quot;channel_ad_2016&quot;&gt;广告&lt;/span&gt; &lt;/div&gt; &lt;!-- 头部广告 结束--&gt; &lt;!-- 头部导航 开始--&gt; &lt;div class=&quot;index_head&quot;&gt; &lt;div ne-module=&quot;/news/index2016_rmd/modules/head/head.js&quot;&gt; &lt;div class=&quot;ns_area hd&quot;&gt; &lt;h1&gt; &lt;a class=&quot;channel2019_logo channel2019_news_logo&quot; href=&quot;https://news.163.com/&quot;&gt;网易新闻有态度&lt;/a&gt; &lt;/h1&gt; &lt;!-- &lt;div class=&quot;top-search&quot;&gt; &lt;form action=&quot;http://news.yodao.com/search&quot; method=&quot;get&quot; name=&quot;nisearch_top&quot; id=&quot;formtop&quot; target=&quot;_blank&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;keyfrom&quot; value=&quot;sports.163&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;suser&quot; value=&quot;user163&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;ue&quot; value=&quot;gbk&quot;&gt; &lt;div class=&quot;search-input&quot;&gt; &lt;span class=&quot;hidden&quot;&gt;搜索&lt;/span&gt; &lt;input type=&quot;text&quot; name=&quot;q&quot; id=&quot;searchInput_top&quot; onfocus=&quot;this.value=&#39;&#39;&quot; value=&quot;输入关键字&quot; class=&quot;text-box &quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;&quot; tabindex=&quot;0&quot; title=&quot;搜索&quot; class=&quot;search-submit&quot; id=&quot;sb_form_go&quot;&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; --&gt; &lt;!-- 天气 --&gt; &lt;div class=&quot;ns-lid-weather&quot; id=&quot;nsWeatherTop&quot;&gt; &lt;div class=&quot;ns-weather&quot; id=&quot;nsWeather&quot;&gt; &lt;a href=&quot;http://news.163.com/weather/&quot;&gt; &lt;script ne-repeat=&quot;weather in weatherInfo&quot; type=&quot;text/template&quot;&gt; &lt;img class=&quot;ns-weather-icon&quot; ne-src=&quot;http://static.ws.126.net/f2e/news/index2015/img/weather/&lt;%=weather.icon%&gt;&quot;&gt; &lt;div class=&quot;ns-weather-text&quot;&gt;&lt;%=weather.weather%&gt;&lt;/div&gt; &lt;div class=&quot;ns-weather-info&quot;&gt;&lt;%=weather.temp2%&gt;°~&lt;%=weather.temp1%&gt;°&lt;/div&gt; &lt;div class=&quot;ns-weather-city&quot;&gt;&lt;%=weather.city%&gt;&lt;/div&gt; &lt;/script&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;ns_area list&quot;&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;&lt;a href=&quot;http://www.163.com/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://news.163.com/rank/&quot;&gt;排行&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://news.163.com/photo/#Current&quot;&gt;图片&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;menu_guonei&quot;&gt;&lt;a href=&quot;http://news.163.com/domestic/&quot;&gt;国内&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;menu_guoji&quot;&gt;&lt;a href=&quot;http://news.163.com/world/&quot;&gt;国际&lt;/a&gt;&lt;/li&gt; &lt;!--&lt;li class=&quot;menu_shehui&quot;&gt;&lt;a href=&quot;http://news.163.com/shehui/&quot;&gt;社会&lt;/a&gt;&lt;/li&gt;--&gt; &lt;li&gt;&lt;a href=&quot;http://data.163.com/special/datablog/&quot;&gt;数读&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;menu_war&quot;&gt;&lt;a href=&quot;http://war.163.com/&quot;&gt;军事&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;menu_hangkong&quot;&gt;&lt;a href=&quot;http://news.163.com/air/&quot;&gt;航空&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;menu_wurenji&quot;&gt;&lt;a href=&quot;http://news.163.com/uav/&quot;&gt;无人机&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://news.163.com/college&quot;&gt;新闻学院&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://gov.163.com/&quot;&gt;政务&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://gongyi.163.com/&quot;&gt;公益&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://media.163.com/&quot;&gt;媒体&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;last&quot;&gt;&lt;a href=&quot;http://news.163.com/special/wangsansanhome/&quot;&gt;王三三&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 头部导航 结束--&gt; &lt;!-- 内容区域 开始 --&gt; &lt;div class=&quot;ns_area clearfix index_main&quot;&gt; &lt;!-- 原创栏目 开始 --&gt; &lt;div class=&quot;main_origina_column&quot; id=&quot;js_origina_column&quot;&gt; &lt;div ne-module=&quot;/news/index2016_rmd/modules/originacolumn/originacolumn.js&quot;&gt; &lt;div class=&quot;origina_column_warp&quot;&gt; &lt;h2&gt; &lt;span&gt;新闻各有态度&lt;/span&gt; &lt;/h2&gt; &lt;div class=&quot;scroll_bd&quot; ne-role=&quot;scroll_bd&quot;&gt; &lt;div class=&quot;scroll_column_bd&quot;&gt; &lt;ul class=&quot;scroll_ul&quot;&gt; &lt;!-- 回声 开始 --&gt; &lt;!-- 回声 结束 --&gt; &lt;!-- 数读 开始 --&gt; &lt;li class=&quot;cell cell_sd cell_hover&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;a class=&quot;tags tag_sd&quot; href=&quot;http://data.163.com/special/datablog/&quot;&gt;数读&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;http://data.163.com/19/0626/14/EIJQJG9L000181IU.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 中国哪里的地铁最拥挤？ &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;中国哪里的地铁最拥挤？&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/26/30e8760df3044e29a18fac3514dd22b1.jpeg?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;http://data.163.com/19/0625/11/EIH0CQEK00019GOE.html&quot;&gt;娶一个潮汕老婆到底是什么体验&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;http://data.163.com/19/0621/17/EI7BLS3600019GOE.html&quot;&gt;不瞒你说，成都早餐好吃到爆&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 数读 结束 --&gt; &lt;!-- 人间 开始 --&gt; &lt;li class=&quot;cell cell_rj&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;a class=&quot;tags tag_rj&quot; href=&quot;http://renjian.163.com/&quot;&gt;人间&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;http://renjian.163.com/19/0628/14/EIP21K41000181RV.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 小白作者的变现之路 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;小白作者的变现之路&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/28/27f33fcbfcec4b42b6837807b7a0883f.jpeg?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0627/16/EIML2HJO000181RV.html&quot;&gt;被毒虫男友拖下水的女大学生&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0626/13/EIJPJMCH000181RV.html&quot;&gt;领导，求你让我加班吧&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 人间 结束 --&gt; &lt;!-- 大国小民 开始 --&gt; &lt;li class=&quot;cell cell_dgxm&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_dgxm&quot;&gt;大国小民&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;http://renjian.163.com/19/0624/14/EIEOBNCB000181RK.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 当不了官发不了财的读书人 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;当不了官发不了财的读书人&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/24/b77e119ffeca477fa4bd2144b1fcb86c.jpeg?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0620/16/EI4JRNO7000181RK.html&quot;&gt;四个博士，一地鸡毛&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0618/12/EHV0QRVG000181RK.html&quot;&gt;医闹得逞后，伤害的到底是谁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 大国小民 结束 --&gt; &lt;!-- 三三有梗 开始 --&gt; &lt;li class=&quot;cell cell_dada&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_dada&quot;&gt;三三有梗&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;https://news.163.com/19/0627/11/EIM57O490001885B.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 据说99%的人在图书馆一定会碰上...... &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;据说99%的人在图书馆一定会碰上......&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/27/06eb8f4a3d4647bf9360ff5e71f003b8.png?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0626/15/EIK0IJT40001885B.html&quot;&gt;我可能，得了种，前任病&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0617/09/EHS57H4L0001885B.html&quot;&gt;那些KO不掉我的,最终成了我的OK&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 三三有梗 结束 --&gt; &lt;!-- 三三映画 开始 --&gt; &lt;!-- 三三映画 结束 --&gt; &lt;!-- 我去1990 开始 --&gt; &lt;li class=&quot;cell cell_wq1990&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_wq1990&quot;&gt;我去1990&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;https://news.163.com/19/0628/11/EIOL94760001885B.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 直男幼稚行为大赏 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;直男幼稚行为大赏&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/28/0b3890cd2f4b473fa0127b5e33ae6ccf.png?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0624/12/EIEFGMVL0001885B.html&quot;&gt;打个赌，爱情友情你分不清楚&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0621/12/EI6NKDTU0001885B.html&quot;&gt;不会唱歌的人进 KTV 以后有多惨&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 我去1990 结束 --&gt; &lt;!-- 轻松一刻 开始 --&gt; &lt;li class=&quot;cell cell_qsyk&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_qsyk&quot;&gt;轻松一刻&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;https://news.163.com/19/0628/19/EIPIQT4O000181BR.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 彩票一直都不中，我却忍不住要买 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;彩票一直都不中，我却忍不住要买&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/28/f44265c5b4ef4a11a99eedbde7c49833.png?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0627/17/EIMPGJAU000181BR.html&quot;&gt;原来&quot;神仙眷侣&quot;离婚,也是一地鸡毛&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0626/18/EIK95RV0000181BR.html&quot;&gt;我宣布，北大清华这对CP锁死了！&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 轻松一刻 结束 --&gt; &lt;!-- 槽值 开始 --&gt; &lt;li class=&quot;cell cell_caozhi&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_caozhi&quot;&gt;槽值&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;http://caozhi.news.163.com/19/0623/22/EID0CBIH000181TI.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 佟丽娅，这次你赢了 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;佟丽娅，这次你赢了&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/23/67d24242d479451ea705e26296187f78.jpeg?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;http://caozhi.news.163.com/19/0623/15/EIC9LGSP000181TI.html&quot;&gt;千万别在深夜点开这神作&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;http://caozhi.news.163.com/19/0618/19/EHVRID7G000181TI.html&quot;&gt;那个发“嗯”的人，已被踢出群聊&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 槽值 结束 --&gt; &lt;!-- 谈心社 开始 --&gt; &lt;li class=&quot;cell cell_tanxinshe&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;span class=&quot;tags tag_tanxinshe&quot;&gt;谈心社&lt;/span&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;https://news.163.com/19/0628/17/EIPCOKEA0001982T.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 王宝强母亲去世：来日方长是人生的错觉 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;王宝强母亲去世：来日方长是人生的错觉&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/28/ecd0de8b8dc0402da72d814bde76f06e.jpeg?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0627/13/EIMC0EDH0001982T.html&quot;&gt;宋仲基宋慧乔离婚：再美的爱情也会过期&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;https://news.163.com/19/0626/17/EIK6AD550001982T.html&quot;&gt;杨紫冰箱藏药，戳穿最怂瞬间&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 谈心社 结束 --&gt; &lt;!-- 看客 开始 --&gt; &lt;li class=&quot;cell cell_kanke&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;a class=&quot;tags tag_kanke&quot; href=&quot;http://renjian.163.com/special/renjian_kanke/&quot;&gt;看客&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;http://renjian.163.com/19/0628/11/EIOMK185000199ET.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 我奶茶都戒了，日本人才知道它的好 &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;我奶茶都戒了，日本人才知道它的好&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/28/f35eceb8d111496693e8f77a71a49cba.png?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0620/11/EI43PM8Q000199ET.html&quot;&gt;美国堕胎残酷物语&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;http://renjian.163.com/19/0613/11/EHI39FML000199ET.html&quot;&gt;跑腿小哥提供的十万种服务&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 看客 结束 --&gt; &lt;!-- 身体密码 开始 --&gt; &lt;li class=&quot;cell cell_stpwd&quot;&gt; &lt;p class=&quot;tag_line&quot;&gt; &lt;a class=&quot;tags tag_stpwd&quot; href=&quot;http://jiankang.163.com/special/zhutierji/?type=3&quot;&gt;身体密码&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;column_main&quot;&gt; &lt;a class=&quot;detail&quot; href=&quot;https://jiankang.163.com/19/0625/11/EIH061CM0038804G.html&quot; ne-role=&quot;detail&quot;&gt; &lt;h3&gt; 防晒，99%的人都做错了…… &lt;/h3&gt; &lt;div class=&quot;photo&quot;&gt; &lt;img alt=&quot;防晒，99%的人都做错了……&quot; height=&quot;90&quot; src=&quot;https://cms-bucket.ws.126.net/2019/06/25/f260b6843fca4702bb5e4e316600f113.png?imageView&amp;amp;thumbnail=200y90&quot; width=&quot;200&quot;/&gt; &lt;/div&gt; &lt;/a&gt; &lt;ul&gt; &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://jiankang.163.com/19/0617/14/EHSN7PPV0038804G.html&quot;&gt;当代人减肥：迈不过25岁这道坎&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;twoli&quot;&gt;&lt;a href=&quot;https://jiankang.163.com/19/0608/15/EH5J9IGA00388AD5.html&quot;&gt;多年后 无数中年人仍会被高考吓醒&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;!-- 身体密码 结束 --&gt; &lt;!-- 哒哒 开始 --&gt; &lt;!-- 哒哒 结束 --&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id=&quot;js_baseline&quot;&gt;&lt;/div&gt; &lt;span class=&quot;white_bg&quot; id=&quot;js_white_bg&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 原创栏目 结束 --&gt; &lt;!-- 中间新闻 开始 --&gt; &lt;div class=&quot;main_center_news&quot;&gt; &lt;!-- 头条新闻 --&gt; &lt;div class=&quot;mod_top_news2&quot; id=&quot;js_top_news&quot;&gt; &lt;h2&gt; &lt;a href=&quot;https://news.163.com/19/0628/16/EIP8R4SV000189FH.html&quot;&gt;央视独家：习近平会见日本首相&lt;/a&gt; &lt;/h2&gt; &lt;ul class=&quot;top_news_ul&quot;&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/16/EIP8N52U0001875N.html&quot;&gt;外交部回应中美元首会面&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/14/EIOVIP2500018AP1.html&quot; target=&quot;_blank&quot;&gt;特朗普会见普京 笑称:不要干预美国大选哦&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/16/EIP7KOH70001875P.html&quot;&gt;住建部:加快垃圾分类处理设施建设&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/16/EIP8F9QQ0001875P.html&quot; target=&quot;_blank&quot;&gt;袁仁国被公诉:受贿数额特别巨大&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/13/EIOSPGLJ0001899O.html&quot;&gt;湖南耒阳人大常委会原主任携子主动投案&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/13/EIOUHOB70001875P.html&quot; target=&quot;_blank&quot;&gt;美的48小时内被骗10亿资金&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 class=&quot;top_news_title&quot;&gt; &lt;a href=&quot;https://news.163.com/19/0628/19/EIPH3F1V0001875P.html&quot;&gt;垃圾分类逼疯上海人？别笑！马上轮到这46个城市&lt;/a&gt; &lt;/h2&gt; &lt;ul class=&quot;top_news_ul&quot;&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/19/EIPILCJ70001875P.html&quot;&gt;女子酒后澡堂一打六被刑拘&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/18/EIPFI0KN0001875P.html&quot; target=&quot;_blank&quot;&gt;杀人案嫌犯向警察开枪拒捕 被当场击毙&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/16/EIP8RHM70001875P.html&quot;&gt;95后飙摩托车追高铁发抖音被刑拘&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/16/EIP7B7RP0001899O.html&quot; target=&quot;_blank&quot;&gt;母亲担心儿子粗心在其手背&quot;刺&quot;字&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://news.163.com/19/0628/15/EIP4Q6BQ0001899O.html&quot;&gt;女子高铁上劝老人看好小孩被骂&lt;/a&gt;|&lt;a href=&quot;https://news.163.com/19/0628/16/EIP8QO5Q0001875P.html&quot; target=&quot;_blank&quot;&gt;南京杀妻案死者姑妈：侄女生前要强&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 广告 开始 --&gt; &lt;div class=&quot;mod_top_news_ad&quot;&gt; &lt;!-- 16新闻首页01小通栏 --&gt; &lt;a class=&quot;ad_hover_href&quot; href=&quot;http://gb.corp.163.com/gb/legal.html&quot;&gt;&lt;/a&gt; &lt;iframe border=&quot;0&quot; frameborder=&quot;no&quot; height=&quot;50&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://g.163.com/r?site=netease&amp;amp;affiliate=news&amp;amp;cat=homepage&amp;amp;type=logo600x50&amp;amp;location=1&quot; width=&quot;600&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;!-- 广告 结束 --&gt; &lt;!-- 特别报道 开始 --&gt; &lt;div class=&quot;mod_important_news none&quot;&gt; &lt;h5&gt;&lt;label&gt;特别报道&lt;/label&gt;&lt;/h5&gt; &lt;h2&gt; &lt;a href=&quot;http://news.163.com/16/0721/19/BSH7V8QF00014JB6.html&quot;&gt;辽宁遭暴雨侵袭致城市内涝 紧急转移12万人&lt;/a&gt; &lt;/h2&gt; &lt;ul class=&quot;top_news_ul&quot;&gt; &lt;li&gt;&lt;a href=&quot;http://news.163.com/16/0721/10/BSG7HOH20001124J.html&quot;&gt;民政部:北方暴雨75人死亡失踪&lt;/a&gt;|&lt;a href=&quot;http://news.163.com/16/0721/12/BSGG5VK300011229.html&quot; target=&quot;_blank&quot;&gt;北京发生山洪灾害 铲车翻倒4人被困&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://news.163.com/16/0721/12/BSGHHVLK00011229.html&quot;&gt;搜救犬水灾救援22天殉职 主人:它太累了&lt;/a&gt;|&lt;a href=&quot;http://news.163.com/16/0721/07/BSFUFFP800014AED.html&quot; target=&quot;_blank&quot;&gt;姐妹被洪水卷走警方拒立案&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;mod_important_pic&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/photoview/00AN0001/2189402.html?from=ph_ss#p=BSG716GE00AN0001&quot;&gt; &lt;img height=&quot;120&quot; src=&quot;http://img3.cache.netease.com/news/2016/7/21/20160721131401d35e2.jpg&quot; width=&quot;190&quot;/&gt; &lt;span class=&quot;bg&quot;&gt;&lt;/span&gt; &lt;h3&gt;河南遇强降雨 9.8万人转移&lt;/h3&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/photoview/00AP0001/2189377.html?from=ph_ss#p=BSFTQ99H00AP0001&quot;&gt; &lt;img height=&quot;120&quot; src=&quot;http://img3.cache.netease.com/news/2016/7/21/201607211319466e84e.jpg&quot; width=&quot;190&quot;/&gt; &lt;span class=&quot;bg&quot;&gt;&lt;/span&gt; &lt;h3&gt;女主播直播暴雨 浑身湿透&lt;/h3&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;http://news.163.com/photoview/00AP0001/2189389.html?from=ph_ss#p=BSG1S9AM00AP0001&quot;&gt; &lt;img height=&quot;120&quot; src=&quot;http://img5.cache.netease.com/news/2016/7/21/20160721132119ef59b.jpg&quot; width=&quot;190&quot;/&gt; &lt;span class=&quot;bg&quot;&gt;&lt;/span&gt; &lt;h3&gt;湖北民众省道上趟水摸鱼&lt;/h3&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 特别报道 结束 --&gt; &lt;!-- 网易公开课 开始--&gt; &lt;div class=&quot;mod_netes_origina&quot; ne-module=&quot;/news/index2016_rmd/modules/slide/slide.js&quot;&gt; &lt;script _keep=&quot;true&quot; type=&quot;text/javascript&quot;&gt; window.GGKSLIDEDATA = [ { &quot;title&quot;:&quot;你多久没读完一本书了？带你克服读书拖延症&quot;, &quot;imgsrc&quot;:&quot;https://cms-bucket.ws.126.net/2019/06/26/225c40fe7f9141a8852f70d20c381f8b.jpeg?imageView&amp;thumbnail=600y250&quot;, &quot;link&quot;:&quot;https://vip.open.163.com/courses/2531?p=xs_zt04&quot; } , { &quot;title&quot;:&quot;曾国藩：普通人怎样通过自我努力改写命运？&quot;, &quot;imgsrc&quot;:&quot;https://cms-bucket.ws.126.net/2019/05/16/b0ba21dfb7ef4716a1275a2c1914832a.jpeg?imageView&amp;thumbnail=600y250&quot;, &quot;link&quot;:&quot;https://vip.open.163.com/courses/1047?p=xs_zt03&quot; } , { &quot;title&quot;:&quot;你单一的收入模式，拖垮的是你财富积累速度&quot;, &quot;imgsrc&quot;:&quot;https://cms-bucket.ws.126.net/2019/03/21/fe5cf147142b414793a6326f654b41ce.jpeg?imageView&amp;thumbnail=600y250&quot;, &quot;link&quot;:&quot;https://vip.open.163.com/courses/3547?p=xs_zt04&quot; } , { &quot;title&quot;:&quot;健身VS不健身，完全是两种不同的人生&quot;, &quot;imgsrc&quot;:&quot;https://cms-bucket.nosdn.127.net/2018/11/12/94fbcf460348460f9b73300aa1948cb3.jpeg?imageView&amp;thumbnail=600y250&quot;, &quot;link&quot;:&quot;https://vip.open.163.com/courses/192?p=xs_zt02&quot; } ]; &lt;/script&gt; &lt;div class=&quot;mod_idx_focus&quot; ne-module=&quot;/modules/slide/slide.js&quot; ne-props=&quot;events:mouseover;interval:4000;topicid=000501EP;listnum=8;pointstart=80;pointend=100;&quot; ne-state=&quot;slideMethod:left;events=mouseover;interval=4000&quot;&gt; &lt;div class=&quot;hd&quot;&gt; &lt;h2&gt;&lt;a href=&quot;https://open.163.com/&quot;&gt;网易公开课&lt;/a&gt;&lt;/h2&gt; &lt;div class=&quot;focus_ctrl&quot;&gt; &lt;span ne-role=&quot;slide-nav&quot;&gt;&lt;/span&gt; &lt;span ne-role=&quot;slide-nav&quot;&gt;&lt;/span&gt; &lt;span ne-role=&quot;slide-nav&quot;&gt;&lt;/span&gt; &lt;span ne-role=&quot;slide-nav&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;a class=&quot;focus_prev&quot; ne-role=&quot;slide-prev&quot;&gt;&lt;/a&gt; &lt;a class=&quot;focus_next&quot; ne-role=&quot;slide-next&quot;&gt;&lt;/a&gt; &lt;div class=&quot;focus_body&quot; ne-role=&quot;slide-body&quot;&gt; &lt;ul ne-role=&quot;slide-scroll&quot;&gt; &lt;script ne-foreach=&quot;gkkdatalist&quot; type=&quot;text/template&quot;&gt; &lt;li &lt;%if(__i == 0){%>class="current"]]></content>
      <categories>
        <category>爬虫开发</category>
        <category>BeautifulSoup</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两股票历史价格比较]]></title>
    <url>%2F%E9%87%91%E8%9E%8D%E5%88%86%E6%9E%90%2F%E9%A1%B9%E7%9B%AE%2F29975%2F</url>
    <content type="text"><![CDATA[项目任务 获取财务数据 填充缺失值 数据归一化 折线图 代码依赖123456import matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport tushare as tsimport sslcontext = ssl._create_unverified_context() 获取财务数据1234567s_pf = '600000's_gd = '601818'sdate = '2018-01-01'edate = '2018-12-31'df_pf = ts.get_hist_data(s_pf, start = sdate, end = edate).sort_index(axis = 0, ascending = True)df_gd = ts.get_hist_data(s_gd, start = sdate, end = edate).sort_index(axis = 0, ascending = True) 数据处理1234567df = pd.concat([df_pf.close, df_gd.close], axis = 1, keys = ['pf_clse','gd_close'])df.ffill(axis = 0, inplace = True)df['pf_one'] = df_pf.close / float(df_pf.close[0]) * 100df['gd_one'] = df_gd.close / float(df_gd.close[0]) * 100display(df.corr(method = 'pearson', min_periods = 1)) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pf_clse gd_close pf_one gd_one pf_clse 1.000000 0.912252 1.000000 0.912252 gd_close 0.912252 1.000000 0.912252 1.000000 pf_one 1.000000 0.912252 1.000000 0.912252 gd_one 0.912252 1.000000 0.912252 1.000000 画图123456df.pf_one.plot(figsize = (20,15))df.gd_one.plot(figsize = (20,15))# 绘图plt.savefig("../img/2019-07-01_两股票历史价格比较_1.png")plt.close() 参考： 廖雪峰Python数据分析 Tushare官网]]></content>
      <categories>
        <category>金融分析</category>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据抽取]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%2F25692%2F</url>
    <content type="text"><![CDATA[csv I/O12345678import pandas as pddisplay(pd.read_csv('2019-06-30_数据抽取_data1.csv'))display(pd.read_table('2019-06-30_数据抽取_data1.csv', sep=','))display(pd.read_csv('2019-06-30_数据抽取_data2.csv', header=None))display(pd.read_csv('2019-06-30_数据抽取_data2.csv', names=['a', 'b', 'c', 'd', 'message']))# data.to_csv('output.csv') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d message 0 1 2 3 4 hello 1 5 6 7 8 world 2 9 10 11 12 foo .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d message 0 1 2 3 4 hello 1 5 6 7 8 world 2 9 10 11 12 foo .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0 1 2 3 4 hello 1 5 6 7 8 world 2 9 10 11 12 foo .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d message 0 1 2 3 4 hello 1 5 6 7 8 world 2 9 10 11 12 foo json1234567891011121314obj = \"""&#123;"姓名": "张三", "住处": ["天朝", "挖煤国", "万恶的资本主义日不落帝国"], "宠物": null, "兄弟": [&#123;"姓名": "李四", "年龄": 25, "宠物": "汪星人"&#125;, &#123;"姓名": "王五", "年龄": 23, "宠物": "喵星人"&#125;]&#125;"""import jsonresult = json.loads(obj) #&lt;class 'dict'&gt;result = json.dumps(result, ensure_ascii=False) #&lt;class 'str'&gt;print(result) {&quot;姓名&quot;: &quot;张三&quot;, &quot;住处&quot;: [&quot;天朝&quot;, &quot;挖煤国&quot;, &quot;万恶的资本主义日不落帝国&quot;], &quot;宠物&quot;: null, &quot;兄弟&quot;: [{&quot;姓名&quot;: &quot;李四&quot;, &quot;年龄&quot;: 25, &quot;宠物&quot;: &quot;汪星人&quot;}, {&quot;姓名&quot;: &quot;王五&quot;, &quot;年龄&quot;: 23, &quot;宠物&quot;: &quot;喵星人&quot;}]} XML/HTML12345678from lxml.html import parsefrom urllib.request import urlopenimport sslssl._create_default_https_context = ssl._create_unverified_contextparsed = parse(urlopen('https://ask.julyedu.com/'))doc = parsed.getroot() 123#拿所有&lt;a&gt;urls = [lnk.get('href') for lnk in doc.findall('.//a')]urls [&#39;http://www.julyedu.com/weekend/train9?v=m1&#39;, &#39;https://www.julyedu.com&#39;, &#39;https://www.julyedu.com/category/index&#39;, &#39;https://www.julyedu.com/question&#39;, &#39;https://oj.julyedu.com/&#39;, &#39;http://jingsai.julyedu.com/&#39;, &#39;https://www.julyedu.com/video/index&#39;, &#39;https://ask.julyedu.com&#39;, &#39;https://www.julyedu.com/active/qiye&#39;, None, &#39;https://www.julyedu.com/cart&#39;, &#39;https://passport.julyedu.com/login?redirect=http%3A%2F%2Fask.julyedu.com%2F&#39;, &#39;https://www.julyedu.com&#39;, &#39;https://passport.julyedu.com/login?redirect=https%3A%2F%2Fask.julyedu.com%2F&#39;, &#39;https://www.julyedu.com&#39;, &#39;https://www.julyedu.com/category/index&#39;, &#39;https://www.julyedu.com/question/index&#39;, &#39;https://www.julyedu.com/video/index&#39;, &#39;https://ask.julyedu.com&#39;, &#39;https://www.julyedu.com/cart/&#39;, &#39;https://ask.julyedu.com/explore/&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/explore/category-15&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/explore/category-18&#39;, &#39;https://ask.julyedu.com/explore/category-17&#39;, &#39;https://ask.julyedu.com/explore/category-10&#39;, &#39;https://ask.julyedu.com/explore/category-16&#39;, &#39;https://ask.julyedu.com/explore/category-14&#39;, &#39;https://ask.julyedu.com/explore/category-11&#39;, &#39;https://ask.julyedu.com/explore/category-4&#39;, &#39;https://ask.julyedu.com/setting/privacy/#notifications&#39;, &#39;javascript:;&#39;, &#39;https://ask.julyedu.com/notifications/&#39;, &#39;&#39;, &#39;https://ask.julyedu.com/sort_type-hot__day-7&#39;, &#39;https://ask.julyedu.com/sort_type-unresponsive&#39;, &#39;&#39;, &#39;https://ask.julyedu.com/sort_type-hot__day-7&#39;, &#39;https://ask.julyedu.com/sort_type-unresponsive&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88655&#39;, &#39;https://ask.julyedu.com/question/88655#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-14&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88654&#39;, &#39;https://ask.julyedu.com/question/88654#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88653&#39;, &#39;https://ask.julyedu.com/question/88653#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88652&#39;, &#39;https://ask.julyedu.com/question/88652#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88651&#39;, &#39;https://ask.julyedu.com/question/88651#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88650&#39;, &#39;https://ask.julyedu.com/question/88650#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-14&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88649&#39;, &#39;https://ask.julyedu.com/question/88649#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88648&#39;, &#39;https://ask.julyedu.com/question/88648#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88647&#39;, &#39;https://ask.julyedu.com/question/88647#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-15&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88646&#39;, &#39;https://ask.julyedu.com/question/88646#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1007&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/O9VznNuY&#39;, &#39;https://ask.julyedu.com/uploads/article/20190621/489e6c00af84ab51a832781134568131.png&#39;, &#39;https://ask.julyedu.com/uploads/article/20190621/424770863c018c01543b2630ed9f0153.png&#39;, &#39;https://ask.julyedu.com/article/1007&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1006&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/bwUTiuHL&#39;, &#39;https://ask.julyedu.com/article/1006&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1005&#39;, &#39;https://ask.julyedu.com/explore/category-15&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/ZmFmFUmY&#39;, &#39;https://ask.julyedu.com/article/1005&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1004&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/kFJZuxek&#39;, &#39;https://ask.julyedu.com/uploads/article/20190619/eab24a8a5b30672d260dd446d7b21c8b.png&#39;, &#39;https://ask.julyedu.com/article/1004&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88645&#39;, &#39;https://ask.julyedu.com/question/88645#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1003&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/Ar8fDfbn&#39;, &#39;https://ask.julyedu.com/uploads/article/20190618/ad20b22eee771ee56e4f674f341ee397.png&#39;, &#39;https://ask.julyedu.com/article/1003&#39;, &#39;https://ask.julyedu.com/people/Darlingpan&#39;, &#39;https://ask.julyedu.com/question/86722&#39;, &#39;https://ask.julyedu.com/people/%E8%8E%B9%E5%AE%9D%E5%AE%9D&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E8%8E%B9%E5%AE%9D%E5%AE%9D&#39;, &#39;https://ask.julyedu.com/people/Darlingpan&#39;, &#39;https://ask.julyedu.com/question/85510&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7545057&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7545057&#39;, &#39;https://ask.julyedu.com/people/zdl&#39;, &#39;https://ask.julyedu.com/question/88644&#39;, &#39;https://ask.julyedu.com/question/88644#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/zdl&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1002&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://dwz.cn/kRg2NTm0&#39;, &#39;https://ask.julyedu.com/article/1002&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88643&#39;, &#39;https://ask.julyedu.com/question/88643#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88642&#39;, &#39;https://ask.julyedu.com/question/88642#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88641&#39;, &#39;https://ask.julyedu.com/question/88641#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/%E4%B8%83%E6%9C%88%E5%9C%A8%E7%BA%BF&#39;, &#39;https://ask.julyedu.com/question/88640&#39;, &#39;https://ask.julyedu.com/question/88640#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-4&#39;, &#39;https://ask.julyedu.com/people/%E4%B8%83%E6%9C%88%E5%9C%A8%E7%BA%BF&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88639&#39;, &#39;https://ask.julyedu.com/question/88639#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88638&#39;, &#39;https://ask.julyedu.com/question/88638#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1001&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1001&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1000&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/1000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/article/999&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/uploads/article/20190605/6dcda1628e00ed7dfab23d18431f6c9b.png&#39;, &#39;https://ask.julyedu.com/article/999&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88634&#39;, &#39;https://ask.julyedu.com/question/88634#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88633&#39;, &#39;https://ask.julyedu.com/question/88633#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-18&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88632&#39;, &#39;https://ask.julyedu.com/question/88632#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-14&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E9%80%86%E8%BD%AC&#39;, &#39;https://ask.julyedu.com/question/88584&#39;, &#39;https://ask.julyedu.com/people/%E8%8B%A5%E6%99%B4&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7479632&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/qq%E7%94%A8%E6%88%B7497804&#39;, &#39;https://ask.julyedu.com/people/&#39;, &#39;https://ask.julyedu.com/question/86859&#39;, &#39;https://ask.julyedu.com/people/%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%88%B7488524&#39;, &#39;https://ask.julyedu.com/people/%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%88%B7480301&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/Michael+Michael&#39;, &#39;https://ask.julyedu.com/people/%E4%B8%83%E6%9C%88%E5%9C%A8%E7%BA%BF&#39;, &#39;https://ask.julyedu.com/question/88631&#39;, &#39;https://ask.julyedu.com/question/88631#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E4%B8%83%E6%9C%88%E5%9C%A8%E7%BA%BF&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88629&#39;, &#39;https://ask.julyedu.com/question/88629#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88630&#39;, &#39;https://ask.julyedu.com/question/88630#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88628&#39;, &#39;https://ask.julyedu.com/question/88628#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88627&#39;, &#39;https://ask.julyedu.com/question/88627#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88626&#39;, &#39;https://ask.julyedu.com/question/88626#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88625&#39;, &#39;https://ask.julyedu.com/question/88625#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88624&#39;, &#39;https://ask.julyedu.com/question/88624#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88623&#39;, &#39;https://ask.julyedu.com/question/88623#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-14&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88622&#39;, &#39;https://ask.julyedu.com/question/88622#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-1&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88621&#39;, &#39;https://ask.julyedu.com/question/88621#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/question/88619&#39;, &#39;https://ask.julyedu.com/question/88619#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-7&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7527000&#39;, &#39;https://ask.julyedu.com/people/%E5%BC%A0%E7%BF%94&#39;, &#39;https://ask.julyedu.com/question/88617&#39;, &#39;https://ask.julyedu.com/question/88617#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E5%BC%A0%E7%BF%94&#39;, &#39;https://ask.julyedu.com/people/%E5%BC%A0%E7%BF%94&#39;, &#39;https://ask.julyedu.com/question/88618&#39;, &#39;https://ask.julyedu.com/question/88618#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E5%BC%A0%E7%BF%94&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/question/88616&#39;, &#39;https://ask.julyedu.com/question/88616#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-5&#39;, &#39;https://ask.julyedu.com/people/%E6%89%8B%E6%9C%BA%E7%94%A8%E6%88%B7505476&#39;, &#39;https://ask.julyedu.com/people/afei3009&#39;, &#39;https://ask.julyedu.com/question/88615&#39;, &#39;https://ask.julyedu.com/question/88615#!answer_form&#39;, &#39;https://ask.julyedu.com/explore/category-13&#39;, &#39;https://ask.julyedu.com/people/afei3009&#39;, &#39;javascript:;&#39;, &#39;https://ask.julyedu.com/sort_type-new__day-0__is_recommend-0__page-2&#39;, &#39;https://ask.julyedu.com/sort_type-new__day-0__is_recommend-0__page-3&#39;, &#39;https://ask.julyedu.com/sort_type-new__day-0__is_recommend-0__page-4&#39;, &#39;https://ask.julyedu.com/sort_type-new__day-0__is_recommend-0__page-2&#39;, &#39;https://ask.julyedu.com/sort_type-new__day-0__is_recommend-0__page-56&#39;, &#39;https://ask.julyedu.com/topic/channel-hot&#39;, &#39;https://ask.julyedu.com/topic/python&#39;, &#39;https://ask.julyedu.com/topic/python&#39;, &#39;https://ask.julyedu.com/topic/活动&#39;, &#39;https://ask.julyedu.com/topic/活动&#39;, &#39;https://ask.julyedu.com/topic/GAN&#39;, &#39;https://ask.julyedu.com/topic/GAN&#39;, &#39;https://ask.julyedu.com/topic/面试&#39;, &#39;https://ask.julyedu.com/topic/面试&#39;, &#39;https://ask.julyedu.com/people/&#39;, &#39;https://ask.julyedu.com/people/xiaoyan2015&#39;, &#39;https://ask.julyedu.com/people/xiaoyan2015&#39;, &#39;https://ask.julyedu.com/people/qyzx_zhx&#39;, &#39;https://ask.julyedu.com/people/qyzx_zhx&#39;, &#39;https://ask.julyedu.com/people/%E7%A4%BE%E5%8C%BA%E5%B0%8F%E7%AE%A1%E5%AE%B6&#39;, &#39;https://ask.julyedu.com/people/%E7%A4%BE%E5%8C%BA%E5%B0%8F%E7%AE%A1%E5%AE%B6&#39;, &#39;https://ask.julyedu.com/people/unasm&#39;, &#39;https://ask.julyedu.com/people/unasm&#39;, &#39;https://ask.julyedu.com/people/Alina&#39;, &#39;https://ask.julyedu.com/people/Alina&#39;, &#39;http://www.julyedu.com/weekend/train9?v=m1&#39;, &#39;http://q.url.cn/AB8aue?_type=wpa&amp;qidian=true&#39;, &#39;http://www.julyedu.com/distribution/index&#39;, &#39;http://weibo.com/askjulyedu&#39;, None, &#39;https://www.julyedu.com/help/index/about&#39;, &#39;https://www.julyedu.com/help/index/contact&#39;, &#39;https://www.julyedu.com/help/index/join&#39;, &#39;https://ask.julyedu.com/question/55&#39;, &#39;https://tianchi.aliyun.com&#39;, &#39;https://cloud.tencent.com/developer/edu&#39;, &#39;https://www.aidaxue.com/?ch=qyzx&#39;, &#39;https://www.epubit.com&#39;, &#39;http://www.miitbeian.gov.cn/&#39;, &#39;https://www.cnzz.com/stat/website.php?web_id=1259748782&#39;, &#39;https://www.julyedu.com&#39;, &#39;https://www.julyedu.com/help/index/about&#39;, &#39;https://www.julyedu.com/help/index/join&#39;, &#39;http://weibo.com/askjulyedu&#39;, &#39;javascript:&#39;, &#39;https://tianchi.aliyun.com&#39;, &#39;https://cloud.tencent.com/developer/edu&#39;, &#39;https://www.aidaxue.com/?ch=qyzx&#39;, &#39;https://www.epubit.com&#39;] 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
        <category>数据处理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pandas基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2FPandas%2F6703%2F</url>
    <content type="text"><![CDATA[基本设置1pd.set_option("max_columns", 50) 数据缺失检查123apts=pd.Series(["Hangzhou", "Beijing", "Shenzhen"])print(apts.notnull())print(apts.isnull()) 0 True 1 True 2 True dtype: bool 0 False 1 False 2 False dtype: bool Series1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding: utf-8 -*- from pandas import Seriesprint("===用数组生成Series===")obj = Series([4, 7, -5, 3])print(obj)print(obj.values)print(obj.index)print("")print("===指定Series的index===")obj2 = Series([4, 7, -5, 3], index = ['d', 'b', 'a', 'c'])print(obj2)print(obj2.index)print(obj2['a'])obj2['d'] = 6print(obj2[['c', 'a', 'd']])print(obj2[obj2 &gt; 0]) # 找出大于0的元素print('b' in obj2) # 判断索引是否存在print('e' in obj2)print("")print("===使用字典生成Series===")sdata = &#123;'Ohio':45000, 'Texas':71000, 'Oregon':16000, 'Utah':5000&#125;obj3 = Series(sdata)print(obj3)print("")print("===使用字典生成Series，并额外指定index，不匹配部分为NaN===")states = ['California', 'Ohio', 'Oregon', 'Texas']obj4 = Series(sdata, index = states)print(obj4)print("")print("===Series相加，相同索引部分相加===")print(obj3 + obj4)print("")print("===指定Series及其索引的名字===")obj4.name = 'population'obj4.index.name = 'state'print( obj4)print("")print("===替换index===")obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan']print(obj) ===用数组生成Series=== 0 4 1 7 2 -5 3 3 dtype: int64 [ 4 7 -5 3] RangeIndex(start=0, stop=4, step=1) ===指定Series的index=== d 4 b 7 a -5 c 3 dtype: int64 Index([&#39;d&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;], dtype=&#39;object&#39;) -5 c 3 a -5 d 6 dtype: int64 d 6 b 7 c 3 dtype: int64 True False ===使用字典生成Series=== Ohio 45000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 ===使用字典生成Series，并额外指定index，不匹配部分为NaN=== California NaN Ohio 45000.0 Oregon 16000.0 Texas 71000.0 dtype: float64 ===Series相加，相同索引部分相加=== California NaN Ohio 90000.0 Oregon 32000.0 Texas 142000.0 Utah NaN dtype: float64 ===指定Series及其索引的名字=== state California NaN Ohio 45000.0 Oregon 16000.0 Texas 71000.0 Name: population, dtype: float64 ===替换index=== Bob 4 Steve 7 Jeff -5 Ryan 3 dtype: int64 填充1234567891011121314151617181920212223242526272829303132# -*- coding: utf-8 -*- import numpy as npfrom numpy import nan as NAimport pandas as pdfrom pandas import Series, DataFrame, Indexprint("===填充0===")df = DataFrame(np.random.randn(7, 3))df.iloc[:4, 1] = NAdf.iloc[:2, 2] = NAprint(df.fillna(0))df.fillna(0, inplace = True)print(df)print('')print("===不同行列填充不同的值===")print(df.fillna(&#123;1:0.5, 3:-1&#125;)) # 第3列不存在print('')print("===不同的填充方式===")df = DataFrame(np.random.randn(6, 3))df.iloc[2:, 1] = NAdf.iloc[4:, 2] = NAprint(df)print(df.fillna(method = 'ffill'))print(df.fillna(method = 'ffill', limit = 2))print('')print("===用统计数据填充===")data = Series([1., NA, 3.5, NA, 7])print(data.fillna(data.mean())) ===填充0=== 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 ===不同行列填充不同的值=== 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 ===不同的填充方式=== 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 NaN 1.537871 3 1.217393 NaN 0.636592 4 -1.095912 NaN NaN 5 -1.314859 NaN NaN 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 -0.435046 1.537871 3 1.217393 -0.435046 0.636592 4 -1.095912 -0.435046 0.636592 5 -1.314859 -0.435046 0.636592 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 -0.435046 1.537871 3 1.217393 -0.435046 0.636592 4 -1.095912 NaN 0.636592 5 -1.314859 NaN 0.636592 ===用统计数据填充=== 0 1.000000 1 3.833333 2 3.500000 3 3.833333 4 7.000000 dtype: float64 DataFrame123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding: utf-8 -*- import numpy as npfrom pandas import Series, DataFrameprint("===指定索引，在列中指定不存在的列，默认数据用NaN===")frame2 = DataFrame(data, columns = ['year', 'state', 'pop', 'debt'], index = ['one', 'two', 'three', 'four', 'five'])print(frame2)print(frame2['state'])print(frame2.year)print(frame2.loc['three'])frame2['debt'] = 16.5 # 修改一整列print(frame2)frame2.debt = np.arange(5) # 用numpy数组修改元素print(frame2)print('')print("===用Series指定要修改的索引及其对应的值，没有指定的默认数据用NaN===")val = Series([-1.2, -1.5, -1.7], index = ['two', 'four', 'five'])frame2['debt'] = valprint(frame2)print('')print("===赋值给新列===")frame2['eastern'] = (frame2.state == 'Ohio') # 如果state等于Ohio为Trueprint(frame2)print(frame2.columns)print('')print("===DataFrame转置===")pop = &#123;'Nevada':&#123;2001:2.4, 2002:2.9&#125;, 'Ohio':&#123;2000:1.5, 2001:1.7, 2002:3.6&#125;&#125;frame3 = DataFrame(pop)print(frame3)print(frame3.T)print('')print("===指定索引顺序，以及使用切片初始化数据===")print(DataFrame(pop))pdata = &#123;'Ohio':frame3['Ohio'][:-1], 'Nevada':frame3['Nevada'][:2]&#125;print(DataFrame(pdata))print('')print("===指定索引和列的名称===")frame3.index.name = 'year'frame3.columns.name = 'state'print(frame3)print(frame3.values)print(frame2.values)print('')print("===stack===")print(frame3.stack()) ===指定索引，在列中指定不存在的列，默认数据用NaN=== year state pop debt one 2000 Ohio 1.5 NaN two 2001 Ohio 1.7 NaN three 2002 Ohio 3.6 NaN four 2001 Nevada 2.4 NaN five 2002 Nevada 2.9 NaN one Ohio two Ohio three Ohio four Nevada five Nevada Name: state, dtype: object one 2000 two 2001 three 2002 four 2001 five 2002 Name: year, dtype: int64 year 2002 state Ohio pop 3.6 debt NaN Name: three, dtype: object year state pop debt one 2000 Ohio 1.5 16.5 two 2001 Ohio 1.7 16.5 three 2002 Ohio 3.6 16.5 four 2001 Nevada 2.4 16.5 five 2002 Nevada 2.9 16.5 year state pop debt one 2000 Ohio 1.5 0 two 2001 Ohio 1.7 1 three 2002 Ohio 3.6 2 four 2001 Nevada 2.4 3 five 2002 Nevada 2.9 4 ===用Series指定要修改的索引及其对应的值，没有指定的默认数据用NaN=== year state pop debt one 2000 Ohio 1.5 NaN two 2001 Ohio 1.7 -1.2 three 2002 Ohio 3.6 NaN four 2001 Nevada 2.4 -1.5 five 2002 Nevada 2.9 -1.7 ===赋值给新列=== year state pop debt eastern one 2000 Ohio 1.5 NaN True two 2001 Ohio 1.7 -1.2 True three 2002 Ohio 3.6 NaN True four 2001 Nevada 2.4 -1.5 False five 2002 Nevada 2.9 -1.7 False Index([&#39;year&#39;, &#39;state&#39;, &#39;pop&#39;, &#39;debt&#39;, &#39;eastern&#39;], dtype=&#39;object&#39;) ===DataFrame转置=== Nevada Ohio 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 2000 2001 2002 Nevada NaN 2.4 2.9 Ohio 1.5 1.7 3.6 ===指定索引顺序，以及使用切片初始化数据=== Nevada Ohio 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 Ohio Nevada 2000 1.5 NaN 2001 1.7 2.4 ===指定索引和列的名称=== state Nevada Ohio year 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 [[nan 1.5] [2.4 1.7] [2.9 3.6]] [[2000 &#39;Ohio&#39; 1.5 nan True] [2001 &#39;Ohio&#39; 1.7 -1.2 True] [2002 &#39;Ohio&#39; 3.6 nan True] [2001 &#39;Nevada&#39; 2.4 -1.5 False] [2002 &#39;Nevada&#39; 2.9 -1.7 False]] ===stack=== year state 2000 Ohio 1.5 2001 Nevada 2.4 Ohio 1.7 2002 Nevada 2.9 Ohio 3.6 dtype: float64 Append, Join和Concatenate123456789101112131415df1 = pd.DataFrame(&#123;'apts': [55000, 60000], 'cars': [200000, 300000],&#125;, index = ['Shanghai', 'Beijing'])df2 = pd.DataFrame(&#123;'apts': [25000, 20000], 'cars': [150000, 120000],&#125;, index = ['Hangzhou', 'Najing'])df3 = pd.DataFrame(&#123;'apts': [30000, 10000], 'cars': [180000, 100000],&#125;, index = ['Guangzhou', 'Chongqing'])df4 = pd.DataFrame(&#123;'salaries': [10000, 30000, 30000, 20000, 15000], 'cities': ['Suzhou', 'Beijing', 'Shanghai', 'Guangzhou', 'Tianjin']&#125;)print(df1)print(df2)print(df3)print(df4) apts cars Shanghai 55000 200000 Beijing 60000 300000 apts cars Hangzhou 25000 150000 Najing 20000 120000 apts cars Guangzhou 30000 180000 Chongqing 10000 100000 salaries cities 0 10000 Suzhou 1 30000 Beijing 2 30000 Shanghai 3 20000 Guangzhou 4 15000 Tianjin 123456789print("===concat===")frames = [df1, df2, df3]result = pd.concat(frames)print(result)print("")result2 = pd.concat(frames, keys=['x', 'y', 'z'])print(result2)print("")print(pd.concat([df1, df2], axis=1, sort=False)) ===concat=== apts cars Shanghai 55000 200000 Beijing 60000 300000 Hangzhou 25000 150000 Najing 20000 120000 Guangzhou 30000 180000 Chongqing 10000 100000 apts cars x Shanghai 55000 200000 Beijing 60000 300000 y Hangzhou 25000 150000 Najing 20000 120000 z Guangzhou 30000 180000 Chongqing 10000 100000 apts cars apts cars Shanghai 55000.0 200000.0 NaN NaN Beijing 60000.0 300000.0 NaN NaN Hangzhou NaN NaN 25000.0 150000.0 Najing NaN NaN 20000.0 120000.0 123print("===append===")print(df1.append(df2))print(df1.append(df3)) ===append=== apts cars Shanghai 55000 200000 Beijing 60000 300000 Hangzhou 25000 150000 Najing 20000 120000 apts cars Shanghai 55000 200000 Beijing 60000 300000 Guangzhou 30000 180000 Chongqing 10000 100000 12345678910print("===join===")print(df1.join(df4))print("")print(df1.join(df4, how='right'))print("")print(df1.join(df4, how='left'))print("")print(df1.join(df4, how='inner'))print("")print(df1.join(df4, how='outer')) ===join=== apts cars salaries cities Shanghai 55000 200000 NaN NaN Beijing 60000 300000 NaN NaN apts cars salaries cities 0 NaN NaN 10000 Suzhou 1 NaN NaN 30000 Beijing 2 NaN NaN 30000 Shanghai 3 NaN NaN 20000 Guangzhou 4 NaN NaN 15000 Tianjin apts cars salaries cities Shanghai 55000 200000 NaN NaN Beijing 60000 300000 NaN NaN Empty DataFrame Columns: [apts, cars, salaries, cities] Index: [] apts cars salaries cities Shanghai 55000.0 200000.0 NaN NaN Beijing 60000.0 300000.0 NaN NaN 0 NaN NaN 10000.0 Suzhou 1 NaN NaN 30000.0 Beijing 2 NaN NaN 30000.0 Shanghai 3 NaN NaN 20000.0 Guangzhou 4 NaN NaN 15000.0 Tianjin groupby123456789101112131415import pandas as pdsalaries = pd.DataFrame(&#123; 'Name': ['July', 'Chu', 'Chu', 'Lin', 'July', 'July', 'Chu', 'July'], 'Year': [2016,2016,2016,2016,2017,2017,2017,2017], 'Salary': [10000,2000,4000,5000,18000,25000,3000,4000], 'Bonus': [3000,1000,1000,1200,4000,2300,500,1000]&#125;)group_by_name = salaries.groupby('Name')display(group_by_name.sum())group_by_name_year = salaries.groupby(['Name', 'Year'])display(group_by_name_year.sum())display(group_by_name_year.size())display(group_by_name_year.describe()) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Salary Bonus Name Chu 6049 9000 2500 July 8067 57000 10300 Lin 2016 5000 1200 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Salary Bonus Name Year Chu 2016 6000 2000 2017 3000 500 July 2016 10000 3000 2017 47000 7300 Lin 2016 5000 1200 Name Year Chu 2016 2 2017 1 July 2016 1 2017 3 Lin 2016 1 dtype: int64 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } Bonus Salary count mean std min 25% 50% 75% max count mean std min 25% 50% 75% max Name Year Chu 2016 2.0 1000.000000 0.00000 1000.0 1000.0 1000.0 1000.0 1000.0 2.0 3000.000000 1414.213562 2000.0 2500.0 3000.0 3500.0 4000.0 2017 1.0 500.000000 NaN 500.0 500.0 500.0 500.0 500.0 1.0 3000.000000 NaN 3000.0 3000.0 3000.0 3000.0 3000.0 July 2016 1.0 3000.000000 NaN 3000.0 3000.0 3000.0 3000.0 3000.0 1.0 10000.000000 NaN 10000.0 10000.0 10000.0 10000.0 10000.0 2017 3.0 2433.333333 1504.43788 1000.0 1650.0 2300.0 3150.0 4000.0 3.0 15666.666667 10692.676622 4000.0 11000.0 18000.0 21500.0 25000.0 Lin 2016 1.0 1200.000000 NaN 1200.0 1200.0 1200.0 1200.0 1200.0 1.0 5000.000000 NaN 5000.0 5000.0 5000.0 5000.0 5000.0 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
        <category>Pandas</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Numpy基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2FNumpy%2F54426%2F</url>
    <content type="text"><![CDATA[生成数组12345678910111213141516171819202122232425262728293031323334# -*- coding: utf-8 -*-import numpy as npprint("===使用普通一维数组生成NumPy一维数组===")data = [6, 7.5, 8, 0, 1]arr = np.array(data)print(arr)print(arr.dtype) # 类型print('')print("===使用普通二维数组生成NumPy二维数组===")data = [[1, 2, 3, 4], [5, 6, 7, 8]]arr = np.array(data)print(arr)print(arr.shape) # 维度print('')print("===使用内置函数创建数组===")print(np.zeros(10)) # 生成包含10个0的一维数组print(np.zeros((3, 6))) # 生成3*6的二维数组print(np.empty((2, 3, 2))) # 生成2*3*2的三维数组，所有元素未初始化。print(np.empty_like((2, 3, 2))) # 生成2*3*2的三维数组，所有元素未初始化。print(np.ones((1,2)))print(np.full((2,2), 8))print(np.eye(3))print(np.random.random((3,2)))print('')print("===使用arrange生成连续元素===")print(np.arange(15)) # [0, 1, 2, ..., 14]print('')print("===broadcasting===")print(np.arange(3).reshape((3,1))+np.arange(3)) ===使用普通一维数组生成NumPy一维数组=== [6. 7.5 8. 0. 1. ] float64 ===使用普通二维数组生成NumPy二维数组=== [[1 2 3 4] [5 6 7 8]] (2, 4) ===使用内置函数创建数组=== [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [[0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.]] [[[4.9e-324 9.9e-324] [1.5e-323 2.0e-323] [2.5e-323 3.0e-323]] [[3.5e-323 4.0e-323] [4.4e-323 4.9e-323] [5.4e-323 5.9e-323]]] [4607182418800017408 4607182418800017408 4607182418800017408] [[1. 1.]] [[8 8] [8 8]] [[1. 0. 0.] [0. 1. 0.] [0. 0. 1.]] [[0.46824109 0.9710855 ] [0.41688259 0.20446181] [0.31828888 0.2797158 ]] ===使用arrange生成连续元素=== [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] ===broadcasting=== [[0 1 2] [1 2 3] [2 3 4]] 堆叠12345x = np.array([[1,2],[3,4]], dtype=np.float64)y = np.array([[5,6],[7,8]], dtype=np.float64)print(np.hstack((x,y)))print(np.vstack((x,y))) [[1. 2. 5. 6.] [3. 4. 7. 8.]] [[1. 2.] [3. 4.] [5. 6.] [7. 8.]] 运算12345678910111213141516171819202122x = np.array([[1,2],[3,4]], dtype=np.float64)y = np.array([[5,6],[7,8]], dtype=np.float64)print("===逐元素运算===")print(x+y)print(x-y)print(x*y)print(x/y)print(np.sqrt(x))print('')print("===矩阵内元素运算===")print(x.sum())print(np.sum(x, axis=0))print(np.sum(x, axis=1))print(np.mean(x))print(np.mean(x, axis=0))print(np.mean(x, axis=1))print(x.cumsum(axis=0))print(x.cumsum(axis=1))print(x.cumprod(axis=0))print(x.cumprod(axis=1)) ===逐元素运算=== [[ 6. 8.] [10. 12.]] [[-4. -4.] [-4. -4.]] [[ 5. 12.] [21. 32.]] [[0.2 0.33333333] [0.42857143 0.5 ]] [[1. 1.41421356] [1.73205081 2. ]] ===矩阵内元素运算=== 10.0 [4. 6.] [3. 7.] 索引/切片123456789101112131415161718192021222324252627print("===通过索引访问二维数组某一行或某个元素===")arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])print(arr[2])print(arr[0][2])print(arr[0, 2]) # 普通Python数组不能用。print('')print("===对更高维数组的访问和操作===")arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])print(arr[0]) # 结果是个2维数组print(arr[1, 0]) # 结果是个2维数组old_values = arr[0].copy() # 复制arr[0]的值arr[0] = 42 # 把arr[0]所有的元素都设置为同一个值print(arr)arr[0] = old_values # 把原来的数组写回去print(arr)print('')print("===使用切片访问和操作数组===")arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])print(arr[1:6]) # 打印元素arr[1]到arr[5]，和list切片不同，这里是引用。arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])print(arr[:2]) # 打印第1、2行print(arr[:2, 1:]) # 打印第1、2行，第2、3列print(arr[:, :1]) # 打印第一列的所有元素arr[:2, 1:] = 0 # 第1、2行，第2、3列的元素设置为0print(arr) ===通过索引访问二维数组某一行或某个元素=== [7 8 9] 3 3 ===对更高维数组的访问和操作=== [[1 2 3] [4 5 6]] [7 8 9] [[[42 42 42] [42 42 42]] [[ 7 8 9] [10 11 12]]] [[[ 1 2 3] [ 4 5 6]] [[ 7 8 9] [10 11 12]]] ===使用切片访问和操作数组=== [2 3 4 5 6] [[1 2 3] [4 5 6]] [[2 3] [5 6]] [[1] [4] [7]] [[1 0 0] [4 0 0] [7 8 9]] 矩阵123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import numpy as npimport numpy.linalg as laimport timeX = np.array([range(0, 500), range(500, 1000)])m, n = X.shapeprint(m, n)'''D(i, j) = ||xi - xj||^2'''t = time.time()D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): D[i, j] = la.norm(X[:, i] - X[:, j]) ** 2 D[j, i] = D[i, j]print(time.time() - t)'''|xi - xi| = sqrt((xi - xj) * (xi - xj).T)D(i, j) = (xi - xj) * (xi - xj).T'''t = time.time()D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): d = X[:, i] - X[:, j] D[i, j] = np.dot(d, d) D[j, i] = D[i, j]print(time.time() - t)'''D(i, j) = (xi - xj) * (xi - xj).T = xi * xi.T - xi * xj.T - xj * xi.T + xj * xj.T = xi * xi.T - 2 * xi * xj.T + xj * xj.TG(i,j) = xi.T * xj'''t = time.time()G = np.dot(X.T, X)D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): D[i, j] = G[i, i] - G[i, j] * 2 + G[j,j] D[j, i] = D[i, j]print(time.time() - t)'''H(i, j) = G(i, i)K(i, j) = G(j, j) = H(i, j).TD(i, j) = H(i, j) + K(i, j) - 2 * G(i, j)'''t = time.time()G = np.dot(X.T, X)H = np.tile(np.diag(G), (n, 1)) # n rows, 1 for each rowD = H + H.T - G * 2print(time.time() - t) 2 500 1.8900527954101562 0.6348848342895508 0.25273704528808594 0.02255988121032715 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
        <category>Numpy</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Matplotlib基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2FMatplotlib%2F16372%2F</url>
    <content type="text"><![CDATA[基本配置与标记1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#coding:utf-8import numpy as npimport matplotlib.pyplot as pltfrom pylab import *# 定义数据部分x = np.arange(0., 10, 0.2)y1 = np.cos(x)y2 = np.sin(x)y3 = np.sqrt(x)# 绘制 3 条函数曲线plt.plot(x, y1, color='blue', linewidth=1.5, linestyle='-', marker='.', label=r'$y = cos&#123;x&#125;$')plt.plot(x, y2, color='green', linewidth=1.5, linestyle='-', marker='*', label=r'$y = sin&#123;x&#125;$')plt.plot(x, y3, color='m', linewidth=1.5, linestyle='-', marker='x', label=r'$y = \sqrt&#123;x&#125;$')# 坐标轴上移ax = plt.subplot(111)ax.spines['right'].set_color('none') # 去掉右边的边框线ax.spines['top'].set_color('none') # 去掉上边的边框线# 移动下边边框线，相当于移动 X 轴ax.xaxis.set_ticks_position('bottom') ax.spines['bottom'].set_position(('data', 0))# 移动左边边框线，相当于移动 y 轴ax.yaxis.set_ticks_position('left')ax.spines['left'].set_position(('data', 0))# 设置 x, y 轴的取值范围plt.xlim(x.min()*1.1, x.max()*1.1)plt.ylim(-1.5, 4.0)# 设置 x, y 轴的刻度值plt.xticks([2, 4, 6, 8, 10], [r'2', r'4', r'6', r'8', r'10'])plt.yticks([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], [r'-1.0', r'0.0', r'1.0', r'2.0', r'3.0', r'4.0'])# 添加文字plt.text(4, 1.68, r'$x \in [0.0, \ 10.0]$', color='k', fontsize=15)plt.text(4, 1.38, r'$y \in [-1.0, \ 4.0]$', color='k', fontsize=15)# 特殊点添加注解plt.scatter([8,],[np.sqrt(8),], 50, color ='m') # 使用散点图放大当前点plt.annotate(r'$2\sqrt&#123;2&#125;$', xy=(8, np.sqrt(8)), xytext=(8.5, 2.2), fontsize=16, color='#090909', arrowprops=dict(arrowstyle='-&gt;', connectionstyle='arc3, rad=0.1', color='#090909'))# 设置标题、x轴、y轴plt.title(r'$the \ function \ figure \ of \ cos(), \ sin() \ and \ sqrt()$', fontsize=19)plt.xlabel(r'$the \ input \ value \ of \ x$', fontsize=18, labelpad=88.8)plt.ylabel(r'$y = f(x)$', fontsize=18, labelpad=12.5)# 设置图例及位置plt.legend(loc='upper right') # plt.legend(['cos(x)', 'sin(x)', 'sqrt(x)'], loc='up right')# 显示网格线plt.grid(True) # 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_1.png")plt.close() 曲线图1234567x = np.arange(-5,5,0.1)y = x ** 2plt.plot(x,y)# 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_2.png")plt.close() 散布图123456789101112import numpy as npimport matplotlib.pyplot as pltn = 1024X = np.random.normal(0, 1, n)Y = np.random.normal(0, 1, n)plt.scatter(X,Y)# 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_3.png")plt.close() 柱状图123456x = np.random.normal(size=1000)plt.hist(x, bins=10)# 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_4.png")plt.close() 1234567891011121314151617181920212223242526import numpy as npimport matplotlib.pyplot as pltn = 12X = np.arange(n)Y1 = (1- X / float(n)) * np.random.uniform(0.5, 1.0, n)Y2 = (1- X/ float(n)) * np.random.uniform(0.5, 1.0, n)plt.axes([0.025, 0.025, 0.95, 0.95])plt.bar(X, +Y1, facecolor = '#9999ff', edgecolor = 'white')plt.bar(X, -Y2, facecolor = '#ff9999', edgecolor = 'white')for x,y in zip(X,Y1): plt.text(x, y + 0.08, '%.2f' % y, ha = 'center', va = 'bottom')for x,y in zip(X,Y2): plt.text(x, -y - 0.08, '%.2f' % y, ha = 'center', va= 'top')plt.xlim(-.5, n), plt.ylim(-1.25, +1.25), plt.xticks([])plt.yticks([])# 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_5.png")plt.close() 3D图12345678910111213141516171819import numpy as npimport matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dfig = plt.figure()ax = Axes3D(fig)X = np.arange(-4, 4, 0.25)Y = np.arange(-4, 4, 0.25)X, Y = np.meshgrid(X, Y)R = np.sqrt(X ** 2 + Y ** 2)Z = np.sin(R)ax.plot_surface(X, Y, Z, rstride = 1, cstride=1, cmap = plt.cm.hot)ax.contourf(X, Y, Z, zdir = 'z', offset = -2, cmap = plt.cm.hot)ax.set_zlim(-2,2)# 绘图plt.savefig("../img/2019-06-24_Matplotlib基本语法_6.png")plt.close() 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
        <category>Matplotlib</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2FPython%2F24578%2F</url>
    <content type="text"><![CDATA[数组12345678910111213141516171819202122print("===一维数组===")print([i * 2 for i in range(10)])print([i * i for i in range(10)])print([i * i for i in range(10) if (i % 3) == 0])print([(x, y) for x in range(3) for y in range(3)])print('')print("===二维数组===")a = [[3] * (i + 1) for i in range(3)]print(a[2])print('')print("===乘法的问题===")a = [[1, 2, 3]] * 3a[1][1] = 100print(a)print('')print("===解决方法===")a = [[1, 2, 3] for i in range(3)]a[1][1] = 100print(a) ===一维数组=== [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] [0, 9, 36, 81] [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] ===二维数组=== [3, 3, 3] ===乘法的问题=== [[1, 100, 3], [1, 100, 3], [1, 100, 3]] ===解决方法=== [[1, 2, 3], [1, 100, 3], [1, 2, 3]] 字典1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950print("===初始化===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;print(d)print('')print("===获取长度===")print(len(d))print('')print("===根据key读写===")d['a'] = 100d[4] = 'dd'print(d)print('')print("===添加元素===")d['e'] = 5d[6] = 'f'print(d)print('')print("===删除元素===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;del(d['a'])del(d[2])print(d)print('')print("===判断key是否存在===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;if 'a' in d: print('a in d')if 2 in d: print('2 in d')if not ('x' in d): print('x not in d')print('')print("===判断字典是否为空===")d = &#123;&#125;if not d: print('d is empty')print('')print("===遍历===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;for k in d.keys(): print(str(k) + ': ' + str(d[k]))for k, v in d.items(): print(str(k) + ': ' + str(v)) ===初始化=== {&#39;a&#39;: 1, 2: &#39;b&#39;, &#39;c&#39;: 3, 4: &#39;d&#39;} ===获取长度=== 4 ===根据key读写=== {&#39;a&#39;: 100, 2: &#39;b&#39;, &#39;c&#39;: 3, 4: &#39;dd&#39;} ===添加元素=== {&#39;a&#39;: 100, 2: &#39;b&#39;, &#39;c&#39;: 3, 4: &#39;dd&#39;, &#39;e&#39;: 5, 6: &#39;f&#39;} ===删除元素=== {&#39;c&#39;: 3, 4: &#39;d&#39;} ===判断key是否存在=== a in d 2 in d x not in d ===判断字典是否为空=== d is empty ===遍历=== a: 1 2: b c: 3 4: d a: 1 2: b c: 3 4: d 集合12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667print("===初始化===")s_a = set([1, 2, 3, 4, 5])s_b = set([1, 1, 2, 2, 3, 4, 5])print(s_a)print(s_b)print('')print("===获取长度===")print(len(s_a))print(len(s_b))print('')print("===添加元素===")s_a.add(6)s_a.add(6)s_a.update([5, 6, 7, 8, 9])print(s_a)print('')print("===删除元素===")s_a.remove(8)s_a.remove(9)print(s_a)print('')print("===判断元素是否存在===")print(1 in s_a)print(10 in s_a)print('')print("===判断集合是否为空===")s_a = set([])if not s_a: print('set is empty')else: print('set is not empty')print('')print("===遍历===")s_a = set([1, 2, 3, 4, 5])for i in s_a: print(i)print('')print("===集合操作===")s_a = set([1, 2, 3, 4, 5])s_b = set([4, 5, 6, 7, 8])print("===并集===")print(s_a | s_b)print(s_a.union(s_b))print("")print("===交集===")print(s_a &amp; s_b)print(s_a.intersection(s_b))print("")print("===差集 s_a - (s_a and s_b)===")print(s_a - s_b)print(s_a.difference(s_b))print("")print("===对称差===")print(s_a ^ s_b)print((s_a | s_b) - (s_a &amp; s_b))print(s_a.symmetric_difference(s_b)) ===初始化=== {1, 2, 3, 4, 5} {1, 2, 3, 4, 5} ===获取长度=== 5 5 ===添加元素=== {1, 2, 3, 4, 5, 6, 7, 8, 9} ===删除元素=== {1, 2, 3, 4, 5, 6, 7} ===判断元素是否存在=== True False ===判断集合是否为空=== set is empty ===遍历=== 1 2 3 4 5 ===集合操作=== ===并集=== {1, 2, 3, 4, 5, 6, 7, 8} {1, 2, 3, 4, 5, 6, 7, 8} ===交集=== {4, 5} {4, 5} ===差集 s_a - (s_a and s_b)=== {1, 2, 3} {1, 2, 3} ===对称差=== {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8} 列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364print("===初始化列表===")li = [1, 2, 3, 'abc', 4.5, [2, 3, 4], &#123;1:'one'&#125;]print("===获取长度===")print(len(li))print('')print("===根据索引读写===")print(li[0])print(li[3])print(li[-1])print('')print("===添加元素===")li = [1, 2, 3]li.append('a')li.append('b')print(li)li.append([4, 5, 6])print(li)li = [1, 2, 3]li.extend([4, 5, 6])print(li)print('')print("===删除元素===")li = [1, 2, 3, 4, 5]li.pop()print(li)del(li[0])del(li[1])print(li)print('')print("===元素是否存在===")li = [1, 2, 3, 4, 5]print(1 in li)print(6 in li)print('')print("===列表是否为空===")li = []if not li: print('Empty')else: print('Not empty')print('')print("===字符串===")s = 'abcdefg'li = list(s)li[4] = 'E'li[5] = 'F'print(li)s = ''.join(li)print(s)print('')print("===遍历===")li = [1, 2, 3]for i in li: print(i)for i in range(len(li)): print(li[i]) ===初始化列表=== ===获取长度=== 7 ===根据索引读写=== 1 abc {1: &#39;one&#39;} ===添加元素=== [1, 2, 3, &#39;a&#39;, &#39;b&#39;] [1, 2, 3, &#39;a&#39;, &#39;b&#39;, [4, 5, 6]] [1, 2, 3, 4, 5, 6] ===删除元素=== [1, 2, 3, 4] [2, 4] ===元素是否存在=== True False ===列表是否为空=== Empty ===字符串=== [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;E&#39;, &#39;F&#39;, &#39;g&#39;] abcdEFg ===遍历=== 1 2 3 1 2 3 切片12345678910111213141516li = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print("===切片===")print(li[2:5])print(li[:4])print(li[5:])print(li[:])print(li[0:6:2])print(li[3::2])print('')print("===负数索引和step===")print(li[::-1])print(li[::-2])print(li[-6:-1:1])print(li[-1::-1]) ===切片=== [2, 3, 4] [0, 1, 2, 3] [5, 6, 7, 8, 9, 10] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [0, 2, 4] [3, 5, 7, 9] ===负数索引和step=== [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] [10, 8, 6, 4, 2, 0] [5, 6, 7, 8, 9] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] json处理1234567891011121314151617181920212223242526272829303132333435363738import jsonprint("===dict与json互转===")d = &#123;'Python':100, 'C++':70, 'Basic':60, 'others':&#123;'C':65, 'Java':50&#125;&#125;jtxt = json.dumps(d)dd = json.loads(jtxt)print(jtxt)print(dd)print('')print("===用json序列化非dict对象===")class Student: def __init__(self, name, age, score): self.name = name self.age = age self.score = score def __str__(self): return '%s: %d, %d' % (self.name, self.age, self.score)s = Student('Tom', 15, 85)print(s)print(s.__dict__)print("")print("===方法1===")jtxt = json.dumps(s, default = lambda obj: obj.__dict__)print(jtxt)def d2s(d): return Student(d['name'], d['age'], d['score'])print(json.loads(jtxt, object_hook = d2s))print("")print("===方法2===")def s2d(s): return s.__dict__jtxt = json.dumps(s, default = s2d)print(jtxt) ===dict与json互转=== {&quot;Python&quot;: 100, &quot;C++&quot;: 70, &quot;Basic&quot;: 60, &quot;others&quot;: {&quot;C&quot;: 65, &quot;Java&quot;: 50}} {&#39;Python&#39;: 100, &#39;C++&#39;: 70, &#39;Basic&#39;: 60, &#39;others&#39;: {&#39;C&#39;: 65, &#39;Java&#39;: 50}} ===用json序列化非dict对象=== Tom: 15, 85 {&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 15, &#39;score&#39;: 85} ===方法1=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85} Tom: 15, 85 ===方法2=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85} class123456789101112131415161718class MyClass: def __init__(self, val): self.val = val def display(self, s): print('%s: %d' % (s, self.val))m = MyClass(100)print(m.val)m.display('hello')print('')m2 = mprint(id(m))print(id(m2))fn = m.displayfn('hey') 100 hello: 100 4539482520 4539482520 hey: 100 generator1234567891011def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 return n for n in fab(5): print(n) 1 1 2 3 5 参考： 廖雪峰Python数据分析 yield讲解]]></content>
      <categories>
        <category>基本语法</category>
        <category>Python</category>
      </categories>
  </entry>
</search>
