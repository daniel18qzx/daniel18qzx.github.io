<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Matplotlib基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F2019%2F06%2F24%2F1%2F</url>
    <content type="text"><![CDATA[基本配置与标记123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import numpy as npimport matplotlib.pyplot as plt# 基本配置plt.figure(figsize = (10, 10), dpi = 80)plt.xlim(-4.0, 4.0) # 坐标上下限plt.ylim(-1.0, 1.0)'''plt.xticks(np.linspace(-4, 4, 9, endpoint = True))plt.yticks(np.linspace(-1, 1, 5, endpoint = True))'''# 更直观的记号plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi], [r'$-\pi$', r'$-\pi/2$', r'$0$', r'$+\pi/2$', r'$+\pi$'])plt.yticks([-1, 0, +1], [r'$-1$', r'$0$', r'$+1$'])# 画曲线X = np.linspace(-np.pi, np.pi, 256,endpoint = True)Cos,Sin = np.cos(X), np.sin(X)plt.plot(X, Cos, color = 'blue', linewidth = 1.0, linestyle = '-', label = 'cos') # label添加图例plt.plot(X, Sin, color = 'green', linewidth = 1.0, linestyle = '-', label = 'sin')plt.legend(loc='upper left') # 图例位置左上角# 移动坐标ax = plt.gca()ax.spines['top'].set_color('none')ax.spines['right'].set_color('none')ax.xaxis.set_ticks_position('bottom')ax.spines['bottom'].set_position(('data',0))ax.yaxis.set_ticks_position('left')ax.spines['left'].set_position(('data',0))# 给特殊点加注释t = 2*np.pi/3plt.plot([t, t],[0, np.cos(t)], color = 'blue', linewidth = 2.5, linestyle = '--')plt.scatter([t, ],[np.cos(t),], 50, color ='red')plt.annotate(r'$\cos(\frac&#123;2\pi&#125;&#123;3&#125;)=-\frac&#123;1&#125;&#123;2&#125;$', xy = (t, np.cos(t)), xycoords = 'data', xytext = (-90, -50), textcoords = 'offset points', fontsize = 16, arrowprops = &#123;'arrowstyle':'-&gt;', 'connectionstyle':'arc3,rad=.2'&#125;)plt.plot([t,t],[0,np.sin(t)], color ='red', linewidth=2.5, linestyle="--")plt.scatter([t,],[np.sin(t),], 50, color ='red')plt.annotate(r'$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$', xy = (t, np.sin(t)), xycoords = 'data', xytext = (+10, +30), textcoords = 'offset points', fontsize = 16, arrowprops = &#123;'arrowstyle':'-&gt;', 'connectionstyle':'arc3,rad=.2'&#125;)# 显示图片plt.show() 散布图123456789import numpy as npimport matplotlib.pyplot as pltn = 1024X = np.random.normal(0, 1, n)Y = np.random.normal(0, 1, n)plt.scatter(X,Y)plt.show() 柱状图123456789101112131415161718192021222324import numpy as npimport matplotlib.pyplot as pltn = 12X = np.arange(n)Y1 = (1- X / float(n)) * np.random.uniform(0.5, 1.0, n)Y2 = (1- X/ float(n)) * np.random.uniform(0.5, 1.0, n)plt.axes([0.025, 0.025, 0.95, 0.95])plt.bar(X, +Y1, facecolor = '#9999ff', edgecolor = 'white')plt.bar(X, -Y2, facecolor = '#ff9999', edgecolor = 'white')for x,y in zip(X,Y1): plt.text(x, y + 0.08, '%.2f' % y, ha = 'center', va = 'bottom')for x,y in zip(X,Y2): plt.text(x, -y - 0.08, '%.2f' % y, ha = 'center', va= 'top')plt.xlim(-.5, n), plt.ylim(-1.25, +1.25), plt.xticks([])plt.yticks([])plt.show() 3D图1234567891011121314151617import numpy as npimport matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dfig = plt.figure()ax = Axes3D(fig)X = np.arange(-4, 4, 0.25)Y = np.arange(-4, 4, 0.25)X, Y = np.meshgrid(X, Y)R = np.sqrt(X ** 2 + Y ** 2)Z = np.sin(R)ax.plot_surface(X, Y, Z, rstride = 1, cstride=1, cmap = plt.cm.hot)ax.contourf(X, Y, Z, zdir = 'z', offset = -2, cmap = plt.cm.hot)ax.set_zlim(-2,2)plt.show() 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Numpy基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F2019%2F06%2F24%2F2%2F</url>
    <content type="text"><![CDATA[生成数组12345678910111213141516171819202122232425262728293031323334# -*- coding: utf-8 -*-import numpy as npprint("===使用普通一维数组生成NumPy一维数组===")data = [6, 7.5, 8, 0, 1]arr = np.array(data)print(arr)print(arr.dtype) # 类型print('')print("===使用普通二维数组生成NumPy二维数组===")data = [[1, 2, 3, 4], [5, 6, 7, 8]]arr = np.array(data)print(arr)print(arr.shape) # 维度print('')print("===使用内置函数创建数组===")print(np.zeros(10)) # 生成包含10个0的一维数组print(np.zeros((3, 6))) # 生成3*6的二维数组print(np.empty((2, 3, 2))) # 生成2*3*2的三维数组，所有元素未初始化。print(np.empty_like((2, 3, 2))) # 生成2*3*2的三维数组，所有元素未初始化。print(np.ones((1,2)))print(np.full((2,2), 8))print(np.eye(3))print(np.random.random((3,2)))print('')print("===使用arrange生成连续元素===")print(np.arange(15)) # [0, 1, 2, ..., 14]print('')print("===broadcasting===")print(np.arange(3).reshape((3,1))+np.arange(3)) ===使用普通一维数组生成NumPy一维数组=== [6. 7.5 8. 0. 1. ] float64 ===使用普通二维数组生成NumPy二维数组=== [[1 2 3 4] [5 6 7 8]] (2, 4) ===使用内置函数创建数组=== [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [[0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0.]] [[[4.9e-324 9.9e-324] [1.5e-323 2.0e-323] [2.5e-323 3.0e-323]] [[3.5e-323 4.0e-323] [4.4e-323 4.9e-323] [5.4e-323 5.9e-323]]] [4607182418800017408 4607182418800017408 4607182418800017408] [[1. 1.]] [[8 8] [8 8]] [[1. 0. 0.] [0. 1. 0.] [0. 0. 1.]] [[0.46824109 0.9710855 ] [0.41688259 0.20446181] [0.31828888 0.2797158 ]] ===使用arrange生成连续元素=== [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14] ===broadcasting=== [[0 1 2] [1 2 3] [2 3 4]]堆叠12345x = np.array([[1,2],[3,4]], dtype=np.float64)y = np.array([[5,6],[7,8]], dtype=np.float64)print(np.hstack((x,y)))print(np.vstack((x,y))) [[1. 2. 5. 6.] [3. 4. 7. 8.]] [[1. 2.] [3. 4.] [5. 6.] [7. 8.]]运算12345678910111213141516171819202122x = np.array([[1,2],[3,4]], dtype=np.float64)y = np.array([[5,6],[7,8]], dtype=np.float64)print("===逐元素运算===")print(x+y)print(x-y)print(x*y)print(x/y)print(np.sqrt(x))print('')print("===矩阵内元素运算===")print(x.sum())print(np.sum(x, axis=0))print(np.sum(x, axis=1))print(np.mean(x))print(np.mean(x, axis=0))print(np.mean(x, axis=1))print(x.cumsum(axis=0))print(x.cumsum(axis=1))print(x.cumprod(axis=0))print(x.cumprod(axis=1)) ===逐元素运算=== [[ 6. 8.] [10. 12.]] [[-4. -4.] [-4. -4.]] [[ 5. 12.] [21. 32.]] [[0.2 0.33333333] [0.42857143 0.5 ]] [[1. 1.41421356] [1.73205081 2. ]] ===矩阵内元素运算=== 10.0 [4. 6.] [3. 7.]索引/切片123456789101112131415161718192021222324252627print("===通过索引访问二维数组某一行或某个元素===")arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])print(arr[2])print(arr[0][2])print(arr[0, 2]) # 普通Python数组不能用。print('')print("===对更高维数组的访问和操作===")arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])print(arr[0]) # 结果是个2维数组print(arr[1, 0]) # 结果是个2维数组old_values = arr[0].copy() # 复制arr[0]的值arr[0] = 42 # 把arr[0]所有的元素都设置为同一个值print(arr)arr[0] = old_values # 把原来的数组写回去print(arr)print('')print("===使用切片访问和操作数组===")arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])print(arr[1:6]) # 打印元素arr[1]到arr[5]，和list切片不同，这里是引用。arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])print(arr[:2]) # 打印第1、2行print(arr[:2, 1:]) # 打印第1、2行，第2、3列print(arr[:, :1]) # 打印第一列的所有元素arr[:2, 1:] = 0 # 第1、2行，第2、3列的元素设置为0print(arr) ===通过索引访问二维数组某一行或某个元素=== [7 8 9] 3 3 ===对更高维数组的访问和操作=== [[1 2 3] [4 5 6]] [7 8 9] [[[42 42 42] [42 42 42]] [[ 7 8 9] [10 11 12]]] [[[ 1 2 3] [ 4 5 6]] [[ 7 8 9] [10 11 12]]] ===使用切片访问和操作数组=== [2 3 4 5 6] [[1 2 3] [4 5 6]] [[2 3] [5 6]] [[1] [4] [7]] [[1 0 0] [4 0 0] [7 8 9]]矩阵123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import numpy as npimport numpy.linalg as laimport timeX = np.array([range(0, 500), range(500, 1000)])m, n = X.shapeprint(m, n)'''D(i, j) = ||xi - xj||^2'''t = time.time()D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): D[i, j] = la.norm(X[:, i] - X[:, j]) ** 2 D[j, i] = D[i, j]print(time.time() - t)'''|xi - xi| = sqrt((xi - xj) * (xi - xj).T)D(i, j) = (xi - xj) * (xi - xj).T'''t = time.time()D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): d = X[:, i] - X[:, j] D[i, j] = np.dot(d, d) D[j, i] = D[i, j]print(time.time() - t)'''D(i, j) = (xi - xj) * (xi - xj).T = xi * xi.T - xi * xj.T - xj * xi.T + xj * xj.T = xi * xi.T - 2 * xi * xj.T + xj * xj.TG(i,j) = xi.T * xj'''t = time.time()G = np.dot(X.T, X)D = np.zeros([n, n])for i in range(n): for j in range(i + 1, n): D[i, j] = G[i, i] - G[i, j] * 2 + G[j,j] D[j, i] = D[i, j]print(time.time() - t)'''H(i, j) = G(i, i)K(i, j) = G(j, j) = H(i, j).TD(i, j) = H(i, j) + K(i, j) - 2 * G(i, j)'''t = time.time()G = np.dot(X.T, X)H = np.tile(np.diag(G), (n, 1)) # n rows, 1 for each rowD = H + H.T - G * 2print(time.time() - t) 2 500 1.8900527954101562 0.6348848342895508 0.25273704528808594 0.02255988121032715 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pandas基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F2019%2F06%2F24%2F3%2F</url>
    <content type="text"><![CDATA[基本设置1pd.set_option("max_columns", 50) 数据缺失检查123apts=pd.Series(["Hangzhou", "Beijing", "Shenzhen"])print(apts.notnull())print(apts.isnull()) 0 True 1 True 2 True dtype: bool 0 False 1 False 2 False dtype: boolSeries1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# -*- coding: utf-8 -*- from pandas import Seriesprint("===用数组生成Series===")obj = Series([4, 7, -5, 3])print(obj)print(obj.values)print(obj.index)print("")print("===指定Series的index===")obj2 = Series([4, 7, -5, 3], index = ['d', 'b', 'a', 'c'])print(obj2)print(obj2.index)print(obj2['a'])obj2['d'] = 6print(obj2[['c', 'a', 'd']])print(obj2[obj2 &gt; 0]) # 找出大于0的元素print('b' in obj2) # 判断索引是否存在print('e' in obj2)print("")print("===使用字典生成Series===")sdata = &#123;'Ohio':45000, 'Texas':71000, 'Oregon':16000, 'Utah':5000&#125;obj3 = Series(sdata)print(obj3)print("")print("===使用字典生成Series，并额外指定index，不匹配部分为NaN===")states = ['California', 'Ohio', 'Oregon', 'Texas']obj4 = Series(sdata, index = states)print(obj4)print("")print("===Series相加，相同索引部分相加===")print(obj3 + obj4)print("")print("===指定Series及其索引的名字===")obj4.name = 'population'obj4.index.name = 'state'print( obj4)print("")print("===替换index===")obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan']print(obj) ===用数组生成Series=== 0 4 1 7 2 -5 3 3 dtype: int64 [ 4 7 -5 3] RangeIndex(start=0, stop=4, step=1) ===指定Series的index=== d 4 b 7 a -5 c 3 dtype: int64 Index([&apos;d&apos;, &apos;b&apos;, &apos;a&apos;, &apos;c&apos;], dtype=&apos;object&apos;) -5 c 3 a -5 d 6 dtype: int64 d 6 b 7 c 3 dtype: int64 True False ===使用字典生成Series=== Ohio 45000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 ===使用字典生成Series，并额外指定index，不匹配部分为NaN=== California NaN Ohio 45000.0 Oregon 16000.0 Texas 71000.0 dtype: float64 ===Series相加，相同索引部分相加=== California NaN Ohio 90000.0 Oregon 32000.0 Texas 142000.0 Utah NaN dtype: float64 ===指定Series及其索引的名字=== state California NaN Ohio 45000.0 Oregon 16000.0 Texas 71000.0 Name: population, dtype: float64 ===替换index=== Bob 4 Steve 7 Jeff -5 Ryan 3 dtype: int64填充1234567891011121314151617181920212223242526272829303132# -*- coding: utf-8 -*- import numpy as npfrom numpy import nan as NAimport pandas as pdfrom pandas import Series, DataFrame, Indexprint("===填充0===")df = DataFrame(np.random.randn(7, 3))df.iloc[:4, 1] = NAdf.iloc[:2, 2] = NAprint(df.fillna(0))df.fillna(0, inplace = True)print(df)print('')print("===不同行列填充不同的值===")print(df.fillna(&#123;1:0.5, 3:-1&#125;)) # 第3列不存在print('')print("===不同的填充方式===")df = DataFrame(np.random.randn(6, 3))df.iloc[2:, 1] = NAdf.iloc[4:, 2] = NAprint(df)print(df.fillna(method = 'ffill'))print(df.fillna(method = 'ffill', limit = 2))print('')print("===用统计数据填充===")data = Series([1., NA, 3.5, NA, 7])print(data.fillna(data.mean())) ===填充0=== 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 ===不同行列填充不同的值=== 0 1 2 0 0.619043 0.000000 0.000000 1 1.262121 0.000000 0.000000 2 -0.536828 0.000000 1.354608 3 0.273867 0.000000 1.046143 4 0.648504 0.366829 -0.122517 5 0.773085 -0.547392 -0.289962 6 0.070365 -1.258029 0.144977 ===不同的填充方式=== 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 NaN 1.537871 3 1.217393 NaN 0.636592 4 -1.095912 NaN NaN 5 -1.314859 NaN NaN 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 -0.435046 1.537871 3 1.217393 -0.435046 0.636592 4 -1.095912 -0.435046 0.636592 5 -1.314859 -0.435046 0.636592 0 1 2 0 0.755876 1.438577 0.986349 1 0.457114 -0.435046 -0.365518 2 0.631733 -0.435046 1.537871 3 1.217393 -0.435046 0.636592 4 -1.095912 NaN 0.636592 5 -1.314859 NaN 0.636592 ===用统计数据填充=== 0 1.000000 1 3.833333 2 3.500000 3 3.833333 4 7.000000 dtype: float64DataFrame123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# -*- coding: utf-8 -*- import numpy as npfrom pandas import Series, DataFrameprint("===指定索引，在列中指定不存在的列，默认数据用NaN===")frame2 = DataFrame(data, columns = ['year', 'state', 'pop', 'debt'], index = ['one', 'two', 'three', 'four', 'five'])print(frame2)print(frame2['state'])print(frame2.year)print(frame2.loc['three'])frame2['debt'] = 16.5 # 修改一整列print(frame2)frame2.debt = np.arange(5) # 用numpy数组修改元素print(frame2)print('')print("===用Series指定要修改的索引及其对应的值，没有指定的默认数据用NaN===")val = Series([-1.2, -1.5, -1.7], index = ['two', 'four', 'five'])frame2['debt'] = valprint(frame2)print('')print("===赋值给新列===")frame2['eastern'] = (frame2.state == 'Ohio') # 如果state等于Ohio为Trueprint(frame2)print(frame2.columns)print('')print("===DataFrame转置===")pop = &#123;'Nevada':&#123;2001:2.4, 2002:2.9&#125;, 'Ohio':&#123;2000:1.5, 2001:1.7, 2002:3.6&#125;&#125;frame3 = DataFrame(pop)print(frame3)print(frame3.T)print('')print("===指定索引顺序，以及使用切片初始化数据===")print(DataFrame(pop))pdata = &#123;'Ohio':frame3['Ohio'][:-1], 'Nevada':frame3['Nevada'][:2]&#125;print(DataFrame(pdata))print('')print("===指定索引和列的名称===")frame3.index.name = 'year'frame3.columns.name = 'state'print(frame3)print(frame3.values)print(frame2.values)print('')print("===stack===")print(frame3.stack()) ===指定索引，在列中指定不存在的列，默认数据用NaN=== year state pop debt one 2000 Ohio 1.5 NaN two 2001 Ohio 1.7 NaN three 2002 Ohio 3.6 NaN four 2001 Nevada 2.4 NaN five 2002 Nevada 2.9 NaN one Ohio two Ohio three Ohio four Nevada five Nevada Name: state, dtype: object one 2000 two 2001 three 2002 four 2001 five 2002 Name: year, dtype: int64 year 2002 state Ohio pop 3.6 debt NaN Name: three, dtype: object year state pop debt one 2000 Ohio 1.5 16.5 two 2001 Ohio 1.7 16.5 three 2002 Ohio 3.6 16.5 four 2001 Nevada 2.4 16.5 five 2002 Nevada 2.9 16.5 year state pop debt one 2000 Ohio 1.5 0 two 2001 Ohio 1.7 1 three 2002 Ohio 3.6 2 four 2001 Nevada 2.4 3 five 2002 Nevada 2.9 4 ===用Series指定要修改的索引及其对应的值，没有指定的默认数据用NaN=== year state pop debt one 2000 Ohio 1.5 NaN two 2001 Ohio 1.7 -1.2 three 2002 Ohio 3.6 NaN four 2001 Nevada 2.4 -1.5 five 2002 Nevada 2.9 -1.7 ===赋值给新列=== year state pop debt eastern one 2000 Ohio 1.5 NaN True two 2001 Ohio 1.7 -1.2 True three 2002 Ohio 3.6 NaN True four 2001 Nevada 2.4 -1.5 False five 2002 Nevada 2.9 -1.7 False Index([&apos;year&apos;, &apos;state&apos;, &apos;pop&apos;, &apos;debt&apos;, &apos;eastern&apos;], dtype=&apos;object&apos;) ===DataFrame转置=== Nevada Ohio 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 2000 2001 2002 Nevada NaN 2.4 2.9 Ohio 1.5 1.7 3.6 ===指定索引顺序，以及使用切片初始化数据=== Nevada Ohio 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 Ohio Nevada 2000 1.5 NaN 2001 1.7 2.4 ===指定索引和列的名称=== state Nevada Ohio year 2000 NaN 1.5 2001 2.4 1.7 2002 2.9 3.6 [[nan 1.5] [2.4 1.7] [2.9 3.6]] [[2000 &apos;Ohio&apos; 1.5 nan True] [2001 &apos;Ohio&apos; 1.7 -1.2 True] [2002 &apos;Ohio&apos; 3.6 nan True] [2001 &apos;Nevada&apos; 2.4 -1.5 False] [2002 &apos;Nevada&apos; 2.9 -1.7 False]] ===stack=== year state 2000 Ohio 1.5 2001 Nevada 2.4 Ohio 1.7 2002 Nevada 2.9 Ohio 3.6 dtype: float64Append, Join和Concatenate123456789101112131415df1 = pd.DataFrame(&#123;'apts': [55000, 60000], 'cars': [200000, 300000],&#125;, index = ['Shanghai', 'Beijing'])df2 = pd.DataFrame(&#123;'apts': [25000, 20000], 'cars': [150000, 120000],&#125;, index = ['Hangzhou', 'Najing'])df3 = pd.DataFrame(&#123;'apts': [30000, 10000], 'cars': [180000, 100000],&#125;, index = ['Guangzhou', 'Chongqing'])df4 = pd.DataFrame(&#123;'salaries': [10000, 30000, 30000, 20000, 15000], 'cities': ['Suzhou', 'Beijing', 'Shanghai', 'Guangzhou', 'Tianjin']&#125;)print(df1)print(df2)print(df3)print(df4) apts cars Shanghai 55000 200000 Beijing 60000 300000 apts cars Hangzhou 25000 150000 Najing 20000 120000 apts cars Guangzhou 30000 180000 Chongqing 10000 100000 salaries cities 0 10000 Suzhou 1 30000 Beijing 2 30000 Shanghai 3 20000 Guangzhou 4 15000 Tianjin123456789print("===concat===")frames = [df1, df2, df3]result = pd.concat(frames)print(result)print("")result2 = pd.concat(frames, keys=['x', 'y', 'z'])print(result2)print("")print(pd.concat([df1, df2], axis=1, sort=False)) ===concat=== apts cars Shanghai 55000 200000 Beijing 60000 300000 Hangzhou 25000 150000 Najing 20000 120000 Guangzhou 30000 180000 Chongqing 10000 100000 apts cars x Shanghai 55000 200000 Beijing 60000 300000 y Hangzhou 25000 150000 Najing 20000 120000 z Guangzhou 30000 180000 Chongqing 10000 100000 apts cars apts cars Shanghai 55000.0 200000.0 NaN NaN Beijing 60000.0 300000.0 NaN NaN Hangzhou NaN NaN 25000.0 150000.0 Najing NaN NaN 20000.0 120000.0123print("===append===")print(df1.append(df2))print(df1.append(df3)) ===append=== apts cars Shanghai 55000 200000 Beijing 60000 300000 Hangzhou 25000 150000 Najing 20000 120000 apts cars Shanghai 55000 200000 Beijing 60000 300000 Guangzhou 30000 180000 Chongqing 10000 10000012345678910print("===join===")print(df1.join(df4))print("")print(df1.join(df4, how='right'))print("")print(df1.join(df4, how='left'))print("")print(df1.join(df4, how='inner'))print("")print(df1.join(df4, how='outer')) ===join=== apts cars salaries cities Shanghai 55000 200000 NaN NaN Beijing 60000 300000 NaN NaN apts cars salaries cities 0 NaN NaN 10000 Suzhou 1 NaN NaN 30000 Beijing 2 NaN NaN 30000 Shanghai 3 NaN NaN 20000 Guangzhou 4 NaN NaN 15000 Tianjin apts cars salaries cities Shanghai 55000 200000 NaN NaN Beijing 60000 300000 NaN NaN Empty DataFrame Columns: [apts, cars, salaries, cities] Index: [] apts cars salaries cities Shanghai 55000.0 200000.0 NaN NaN Beijing 60000.0 300000.0 NaN NaN 0 NaN NaN 10000.0 Suzhou 1 NaN NaN 30000.0 Beijing 2 NaN NaN 30000.0 Shanghai 3 NaN NaN 20000.0 Guangzhou 4 NaN NaN 15000.0 Tianjingroupby123456789101112131415import pandas as pdsalaries = pd.DataFrame(&#123; 'Name': ['July', 'Chu', 'Chu', 'Lin', 'July', 'July', 'Chu', 'July'], 'Year': [2016,2016,2016,2016,2017,2017,2017,2017], 'Salary': [10000,2000,4000,5000,18000,25000,3000,4000], 'Bonus': [3000,1000,1000,1200,4000,2300,500,1000]&#125;)group_by_name = salaries.groupby('Name')display(group_by_name.sum())group_by_name_year = salaries.groupby(['Name', 'Year'])display(group_by_name_year.sum())display(group_by_name_year.size())display(group_by_name_year.describe()) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Salary Bonus Name Chu 6049 9000 2500 July 8067 57000 10300 Lin 2016 5000 1200 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Salary Bonus Name Year Chu 2016 6000 2000 2017 3000 500 July 2016 10000 3000 2017 47000 7300 Lin 2016 5000 1200 Name Year Chu 2016 2 2017 1 July 2016 1 2017 3 Lin 2016 1 dtype: int64 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } Bonus Salary count mean std min 25% 50% 75% max count mean std min 25% 50% 75% max Name Year Chu 2016 2.0 1000.000000 0.00000 1000.0 1000.0 1000.0 1000.0 1000.0 2.0 3000.000000 1414.213562 2000.0 2500.0 3000.0 3500.0 4000.0 2017 1.0 500.000000 NaN 500.0 500.0 500.0 500.0 500.0 1.0 3000.000000 NaN 3000.0 3000.0 3000.0 3000.0 3000.0 July 2016 1.0 3000.000000 NaN 3000.0 3000.0 3000.0 3000.0 3000.0 1.0 10000.000000 NaN 10000.0 10000.0 10000.0 10000.0 10000.0 2017 3.0 2433.333333 1504.43788 1000.0 1650.0 2300.0 3150.0 4000.0 3.0 15666.666667 10692.676622 4000.0 11000.0 18000.0 21500.0 25000.0 Lin 2016 1.0 1200.000000 NaN 1200.0 1200.0 1200.0 1200.0 1200.0 1.0 5000.000000 NaN 5000.0 5000.0 5000.0 5000.0 5000.0 参考： 廖雪峰Python数据分析]]></content>
      <categories>
        <category>基本语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F2019%2F06%2F23%2F1%2F</url>
    <content type="text"><![CDATA[数组12345678910111213141516171819202122print("===一维数组===")print([i * 2 for i in range(10)])print([i * i for i in range(10)])print([i * i for i in range(10) if (i % 3) == 0])print([(x, y) for x in range(3) for y in range(3)])print('')print("===二维数组===")a = [[3] * (i + 1) for i in range(3)]print(a[2])print('')print("===乘法的问题===")a = [[1, 2, 3]] * 3a[1][1] = 100print(a)print('')print("===解决方法===")a = [[1, 2, 3] for i in range(3)]a[1][1] = 100print(a) ===一维数组=== [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] [0, 9, 36, 81] [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] ===二维数组=== [3, 3, 3] ===乘法的问题=== [[1, 100, 3], [1, 100, 3], [1, 100, 3]] ===解决方法=== [[1, 2, 3], [1, 100, 3], [1, 2, 3]]字典1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950print("===初始化===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;print(d)print('')print("===获取长度===")print(len(d))print('')print("===根据key读写===")d['a'] = 100d[4] = 'dd'print(d)print('')print("===添加元素===")d['e'] = 5d[6] = 'f'print(d)print('')print("===删除元素===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;del(d['a'])del(d[2])print(d)print('')print("===判断key是否存在===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;if 'a' in d: print('a in d')if 2 in d: print('2 in d')if not ('x' in d): print('x not in d')print('')print("===判断字典是否为空===")d = &#123;&#125;if not d: print('d is empty')print('')print("===遍历===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;for k in d.keys(): print(str(k) + ': ' + str(d[k]))for k, v in d.items(): print(str(k) + ': ' + str(v)) ===初始化=== {&apos;a&apos;: 1, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;d&apos;} ===获取长度=== 4 ===根据key读写=== {&apos;a&apos;: 100, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;dd&apos;} ===添加元素=== {&apos;a&apos;: 100, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;dd&apos;, &apos;e&apos;: 5, 6: &apos;f&apos;} ===删除元素=== {&apos;c&apos;: 3, 4: &apos;d&apos;} ===判断key是否存在=== a in d 2 in d x not in d ===判断字典是否为空=== d is empty ===遍历=== a: 1 2: b c: 3 4: d a: 1 2: b c: 3 4: d集合12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667print("===初始化===")s_a = set([1, 2, 3, 4, 5])s_b = set([1, 1, 2, 2, 3, 4, 5])print(s_a)print(s_b)print('')print("===获取长度===")print(len(s_a))print(len(s_b))print('')print("===添加元素===")s_a.add(6)s_a.add(6)s_a.update([5, 6, 7, 8, 9])print(s_a)print('')print("===删除元素===")s_a.remove(8)s_a.remove(9)print(s_a)print('')print("===判断元素是否存在===")print(1 in s_a)print(10 in s_a)print('')print("===判断集合是否为空===")s_a = set([])if not s_a: print('set is empty')else: print('set is not empty')print('')print("===遍历===")s_a = set([1, 2, 3, 4, 5])for i in s_a: print(i)print('')print("===集合操作===")s_a = set([1, 2, 3, 4, 5])s_b = set([4, 5, 6, 7, 8])print("===并集===")print(s_a | s_b)print(s_a.union(s_b))print("")print("===交集===")print(s_a &amp; s_b)print(s_a.intersection(s_b))print("")print("===差集 s_a - (s_a and s_b)===")print(s_a - s_b)print(s_a.difference(s_b))print("")print("===对称差===")print(s_a ^ s_b)print((s_a | s_b) - (s_a &amp; s_b))print(s_a.symmetric_difference(s_b)) ===初始化=== {1, 2, 3, 4, 5} {1, 2, 3, 4, 5} ===获取长度=== 5 5 ===添加元素=== {1, 2, 3, 4, 5, 6, 7, 8, 9} ===删除元素=== {1, 2, 3, 4, 5, 6, 7} ===判断元素是否存在=== True False ===判断集合是否为空=== set is empty ===遍历=== 1 2 3 4 5 ===集合操作=== ===并集=== {1, 2, 3, 4, 5, 6, 7, 8} {1, 2, 3, 4, 5, 6, 7, 8} ===交集=== {4, 5} {4, 5} ===差集 s_a - (s_a and s_b)=== {1, 2, 3} {1, 2, 3} ===对称差=== {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8}列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364print("===初始化列表===")li = [1, 2, 3, 'abc', 4.5, [2, 3, 4], &#123;1:'one'&#125;]print("===获取长度===")print(len(li))print('')print("===根据索引读写===")print(li[0])print(li[3])print(li[-1])print('')print("===添加元素===")li = [1, 2, 3]li.append('a')li.append('b')print(li)li.append([4, 5, 6])print(li)li = [1, 2, 3]li.extend([4, 5, 6])print(li)print('')print("===删除元素===")li = [1, 2, 3, 4, 5]li.pop()print(li)del(li[0])del(li[1])print(li)print('')print("===元素是否存在===")li = [1, 2, 3, 4, 5]print(1 in li)print(6 in li)print('')print("===列表是否为空===")li = []if not li: print('Empty')else: print('Not empty')print('')print("===字符串===")s = 'abcdefg'li = list(s)li[4] = 'E'li[5] = 'F'print(li)s = ''.join(li)print(s)print('')print("===遍历===")li = [1, 2, 3]for i in li: print(i)for i in range(len(li)): print(li[i]) ===初始化列表=== ===获取长度=== 7 ===根据索引读写=== 1 abc {1: &apos;one&apos;} ===添加元素=== [1, 2, 3, &apos;a&apos;, &apos;b&apos;] [1, 2, 3, &apos;a&apos;, &apos;b&apos;, [4, 5, 6]] [1, 2, 3, 4, 5, 6] ===删除元素=== [1, 2, 3, 4] [2, 4] ===元素是否存在=== True False ===列表是否为空=== Empty ===字符串=== [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;E&apos;, &apos;F&apos;, &apos;g&apos;] abcdEFg ===遍历=== 1 2 3 1 2 3切片12345678910111213141516li = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print("===切片===")print(li[2:5])print(li[:4])print(li[5:])print(li[:])print(li[0:6:2])print(li[3::2])print('')print("===负数索引和step===")print(li[::-1])print(li[::-2])print(li[-6:-1:1])print(li[-1::-1]) ===切片=== [2, 3, 4] [0, 1, 2, 3] [5, 6, 7, 8, 9, 10] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [0, 2, 4] [3, 5, 7, 9] ===负数索引和step=== [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] [10, 8, 6, 4, 2, 0] [5, 6, 7, 8, 9] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]json处理1234567891011121314151617181920212223242526272829303132333435363738import jsonprint("===dict与json互转===")d = &#123;'Python':100, 'C++':70, 'Basic':60, 'others':&#123;'C':65, 'Java':50&#125;&#125;jtxt = json.dumps(d)dd = json.loads(jtxt)print(jtxt)print(dd)print('')print("===用json序列化非dict对象===")class Student: def __init__(self, name, age, score): self.name = name self.age = age self.score = score def __str__(self): return '%s: %d, %d' % (self.name, self.age, self.score)s = Student('Tom', 15, 85)print(s)print(s.__dict__)print("")print("===方法1===")jtxt = json.dumps(s, default = lambda obj: obj.__dict__)print(jtxt)def d2s(d): return Student(d['name'], d['age'], d['score'])print(json.loads(jtxt, object_hook = d2s))print("")print("===方法2===")def s2d(s): return s.__dict__jtxt = json.dumps(s, default = s2d)print(jtxt) ===dict与json互转=== {&quot;Python&quot;: 100, &quot;C++&quot;: 70, &quot;Basic&quot;: 60, &quot;others&quot;: {&quot;C&quot;: 65, &quot;Java&quot;: 50}} {&apos;Python&apos;: 100, &apos;C++&apos;: 70, &apos;Basic&apos;: 60, &apos;others&apos;: {&apos;C&apos;: 65, &apos;Java&apos;: 50}} ===用json序列化非dict对象=== Tom: 15, 85 {&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 15, &apos;score&apos;: 85} ===方法1=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85} Tom: 15, 85 ===方法2=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85}class123456789101112131415161718class MyClass: def __init__(self, val): self.val = val def display(self, s): print('%s: %d' % (s, self.val))m = MyClass(100)print(m.val)m.display('hello')print('')m2 = mprint(id(m))print(id(m2))fn = m.displayfn('hey') 100 hello: 100 4539482520 4539482520 hey: 100generator1234567891011def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 return n for n in fab(5): print(n) 1 1 2 3 5 参考： 廖雪峰Python数据分析 yield讲解]]></content>
      <categories>
        <category>基本语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两股票历史价格比较]]></title>
    <url>%2FQuant%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%2F%E9%A1%B9%E7%9B%AE%2F2019%2F06%2F22%2F1%2F</url>
    <content type="text"><![CDATA[项目任务 获取财务数据 填充缺失值 数据归一化 折线图 代码依赖123456import matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport tushare as tsimport sslcontext = ssl._create_unverified_context() 获取财务数据1234567s_pf = '600000's_gd = '601818'sdate = '2018-01-01'edate = '2018-12-31'df_pf = ts.get_hist_data(s_pf, start = sdate, end = edate).sort_index(axis = 0, ascending = True)df_gd = ts.get_hist_data(s_gd, start = sdate, end = edate).sort_index(axis = 0, ascending = True) 数据处理1234567df = pd.concat([df_pf.close, df_gd.close], axis = 1, keys = ['pf_clse','gd_close'])df.ffill(axis = 0, inplace = True)df['pf_one'] = df_pf.close / float(df_pf.close[0]) * 100df['gd_one'] = df_gd.close / float(df_gd.close[0]) * 100display(df.corr(method = 'pearson', min_periods = 1)) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pf_clse gd_close pf_one gd_one pf_clse 1.000000 0.912252 1.000000 0.912252 gd_close 0.912252 1.000000 0.912252 1.000000 pf_one 1.000000 0.912252 1.000000 0.912252 gd_one 0.912252 1.000000 0.912252 1.000000 画图12df.pf_one.plot(figsize = (20,15))df.gd_one.plot(figsize = (20,15)) &lt;matplotlib.axes._subplots.AxesSubplot at 0x11bcdfef0&gt; 参考： 廖雪峰Python数据分析 Tushare官网]]></content>
      <categories>
        <category>Quant量化交易</category>
        <category>项目</category>
      </categories>
  </entry>
</search>
