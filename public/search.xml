<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python基本语法]]></title>
    <url>%2F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F2019%2F06%2F23%2F1%2F</url>
    <content type="text"><![CDATA[数组12345678910111213141516171819202122print("===一维数组===")print([i * 2 for i in range(10)])print([i * i for i in range(10)])print([i * i for i in range(10) if (i % 3) == 0])print([(x, y) for x in range(3) for y in range(3)])print('')print("===二维数组===")a = [[3] * (i + 1) for i in range(3)]print(a[2])print('')print("===乘法的问题===")a = [[1, 2, 3]] * 3a[1][1] = 100print(a)print('')print("===解决方法===")a = [[1, 2, 3] for i in range(3)]a[1][1] = 100print(a) ===一维数组=== [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] [0, 9, 36, 81] [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] ===二维数组=== [3, 3, 3] ===乘法的问题=== [[1, 100, 3], [1, 100, 3], [1, 100, 3]] ===解决方法=== [[1, 2, 3], [1, 100, 3], [1, 2, 3]]字典1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950print("===初始化===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;print(d)print('')print("===获取长度===")print(len(d))print('')print("===根据key读写===")d['a'] = 100d[4] = 'dd'print(d)print('')print("===添加元素===")d['e'] = 5d[6] = 'f'print(d)print('')print("===删除元素===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;del(d['a'])del(d[2])print(d)print('')print("===判断key是否存在===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;if 'a' in d: print('a in d')if 2 in d: print('2 in d')if not ('x' in d): print('x not in d')print('')print("===判断字典是否为空===")d = &#123;&#125;if not d: print('d is empty')print('')print("===遍历===")d = &#123;'a':1, 2:'b', 'c':3, 4:'d'&#125;for k in d.keys(): print(str(k) + ': ' + str(d[k]))for k, v in d.items(): print(str(k) + ': ' + str(v)) ===初始化=== {&apos;a&apos;: 1, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;d&apos;} ===获取长度=== 4 ===根据key读写=== {&apos;a&apos;: 100, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;dd&apos;} ===添加元素=== {&apos;a&apos;: 100, 2: &apos;b&apos;, &apos;c&apos;: 3, 4: &apos;dd&apos;, &apos;e&apos;: 5, 6: &apos;f&apos;} ===删除元素=== {&apos;c&apos;: 3, 4: &apos;d&apos;} ===判断key是否存在=== a in d 2 in d x not in d ===判断字典是否为空=== d is empty ===遍历=== a: 1 2: b c: 3 4: d a: 1 2: b c: 3 4: d集合12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667print("===初始化===")s_a = set([1, 2, 3, 4, 5])s_b = set([1, 1, 2, 2, 3, 4, 5])print(s_a)print(s_b)print('')print("===获取长度===")print(len(s_a))print(len(s_b))print('')print("===添加元素===")s_a.add(6)s_a.add(6)s_a.update([5, 6, 7, 8, 9])print(s_a)print('')print("===删除元素===")s_a.remove(8)s_a.remove(9)print(s_a)print('')print("===判断元素是否存在===")print(1 in s_a)print(10 in s_a)print('')print("===判断集合是否为空===")s_a = set([])if not s_a: print('set is empty')else: print('set is not empty')print('')print("===遍历===")s_a = set([1, 2, 3, 4, 5])for i in s_a: print(i)print('')print("===集合操作===")s_a = set([1, 2, 3, 4, 5])s_b = set([4, 5, 6, 7, 8])print("===并集===")print(s_a | s_b)print(s_a.union(s_b))print("")print("===交集===")print(s_a &amp; s_b)print(s_a.intersection(s_b))print("")print("===差集 s_a - (s_a and s_b)===")print(s_a - s_b)print(s_a.difference(s_b))print("")print("===对称差===")print(s_a ^ s_b)print((s_a | s_b) - (s_a &amp; s_b))print(s_a.symmetric_difference(s_b)) ===初始化=== {1, 2, 3, 4, 5} {1, 2, 3, 4, 5} ===获取长度=== 5 5 ===添加元素=== {1, 2, 3, 4, 5, 6, 7, 8, 9} ===删除元素=== {1, 2, 3, 4, 5, 6, 7} ===判断元素是否存在=== True False ===判断集合是否为空=== set is empty ===遍历=== 1 2 3 4 5 ===集合操作=== ===并集=== {1, 2, 3, 4, 5, 6, 7, 8} {1, 2, 3, 4, 5, 6, 7, 8} ===交集=== {4, 5} {4, 5} ===差集 s_a - (s_a and s_b)=== {1, 2, 3} {1, 2, 3} ===对称差=== {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8} {1, 2, 3, 6, 7, 8}列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364print("===初始化列表===")li = [1, 2, 3, 'abc', 4.5, [2, 3, 4], &#123;1:'one'&#125;]print("===获取长度===")print(len(li))print('')print("===根据索引读写===")print(li[0])print(li[3])print(li[-1])print('')print("===添加元素===")li = [1, 2, 3]li.append('a')li.append('b')print(li)li.append([4, 5, 6])print(li)li = [1, 2, 3]li.extend([4, 5, 6])print(li)print('')print("===删除元素===")li = [1, 2, 3, 4, 5]li.pop()print(li)del(li[0])del(li[1])print(li)print('')print("===元素是否存在===")li = [1, 2, 3, 4, 5]print(1 in li)print(6 in li)print('')print("===列表是否为空===")li = []if not li: print('Empty')else: print('Not empty')print('')print("===字符串===")s = 'abcdefg'li = list(s)li[4] = 'E'li[5] = 'F'print(li)s = ''.join(li)print(s)print('')print("===遍历===")li = [1, 2, 3]for i in li: print(i)for i in range(len(li)): print(li[i]) ===初始化列表=== ===获取长度=== 7 ===根据索引读写=== 1 abc {1: &apos;one&apos;} ===添加元素=== [1, 2, 3, &apos;a&apos;, &apos;b&apos;] [1, 2, 3, &apos;a&apos;, &apos;b&apos;, [4, 5, 6]] [1, 2, 3, 4, 5, 6] ===删除元素=== [1, 2, 3, 4] [2, 4] ===元素是否存在=== True False ===列表是否为空=== Empty ===字符串=== [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;E&apos;, &apos;F&apos;, &apos;g&apos;] abcdEFg ===遍历=== 1 2 3 1 2 3切片12345678910111213141516li = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print("===切片===")print(li[2:5])print(li[:4])print(li[5:])print(li[:])print(li[0:6:2])print(li[3::2])print('')print("===负数索引和step===")print(li[::-1])print(li[::-2])print(li[-6:-1:1])print(li[-1::-1]) ===切片=== [2, 3, 4] [0, 1, 2, 3] [5, 6, 7, 8, 9, 10] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [0, 2, 4] [3, 5, 7, 9] ===负数索引和step=== [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] [10, 8, 6, 4, 2, 0] [5, 6, 7, 8, 9] [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]json处理1234567891011121314151617181920212223242526272829303132333435363738import jsonprint("===dict与json互转===")d = &#123;'Python':100, 'C++':70, 'Basic':60, 'others':&#123;'C':65, 'Java':50&#125;&#125;jtxt = json.dumps(d)dd = json.loads(jtxt)print(jtxt)print(dd)print('')print("===用json序列化非dict对象===")class Student: def __init__(self, name, age, score): self.name = name self.age = age self.score = score def __str__(self): return '%s: %d, %d' % (self.name, self.age, self.score)s = Student('Tom', 15, 85)print(s)print(s.__dict__)print("")print("===方法1===")jtxt = json.dumps(s, default = lambda obj: obj.__dict__)print(jtxt)def d2s(d): return Student(d['name'], d['age'], d['score'])print(json.loads(jtxt, object_hook = d2s))print("")print("===方法2===")def s2d(s): return s.__dict__jtxt = json.dumps(s, default = s2d)print(jtxt) ===dict与json互转=== {&quot;Python&quot;: 100, &quot;C++&quot;: 70, &quot;Basic&quot;: 60, &quot;others&quot;: {&quot;C&quot;: 65, &quot;Java&quot;: 50}} {&apos;Python&apos;: 100, &apos;C++&apos;: 70, &apos;Basic&apos;: 60, &apos;others&apos;: {&apos;C&apos;: 65, &apos;Java&apos;: 50}} ===用json序列化非dict对象=== Tom: 15, 85 {&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 15, &apos;score&apos;: 85} ===方法1=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85} Tom: 15, 85 ===方法2=== {&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 15, &quot;score&quot;: 85}class123456789101112131415161718class MyClass: def __init__(self, val): self.val = val def display(self, s): print('%s: %d' % (s, self.val))m = MyClass(100)print(m.val)m.display('hello')print('')m2 = mprint(id(m))print(id(m2))fn = m.displayfn('hey') 100 hello: 100 4539482520 4539482520 hey: 100generator1234567891011def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 return n for n in fab(5): print(n) 1 1 2 3 5 参考： 廖雪峰Python数据分析 yield讲解]]></content>
      <categories>
        <category>基本语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两股票历史价格比较]]></title>
    <url>%2FQuant%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%2F%E9%A1%B9%E7%9B%AE%2F2019%2F06%2F22%2F1%2F</url>
    <content type="text"><![CDATA[项目任务 获取财务数据 填充缺失值 数据归一化 折线图 代码依赖123456import matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport tushare as tsimport sslcontext = ssl._create_unverified_context() 获取财务数据1234567s_pf = '600000's_gd = '601818'sdate = '2018-01-01'edate = '2018-12-31'df_pf = ts.get_hist_data(s_pf, start = sdate, end = edate).sort_index(axis = 0, ascending = True)df_gd = ts.get_hist_data(s_gd, start = sdate, end = edate).sort_index(axis = 0, ascending = True) 数据处理1234567df = pd.concat([df_pf.close, df_gd.close], axis = 1, keys = ['pf_clse','gd_close'])df.ffill(axis = 0, inplace = True)df['pf_one'] = df_pf.close / float(df_pf.close[0]) * 100df['gd_one'] = df_gd.close / float(df_gd.close[0]) * 100display(df.corr(method = 'pearson', min_periods = 1)) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pf_clse gd_close pf_one gd_one pf_clse 1.000000 0.912252 1.000000 0.912252 gd_close 0.912252 1.000000 0.912252 1.000000 pf_one 1.000000 0.912252 1.000000 0.912252 gd_one 0.912252 1.000000 0.912252 1.000000 画图12df.pf_one.plot(figsize = (20,15))df.gd_one.plot(figsize = (20,15)) &lt;matplotlib.axes._subplots.AxesSubplot at 0x11bcdfef0&gt; 参考： 廖雪峰Python数据分析 Tushare官网]]></content>
      <categories>
        <category>Quant量化交易</category>
        <category>项目</category>
      </categories>
  </entry>
</search>
